var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
///<amd-module name="sabre-ngv-core/modules/IModuleManifest" />
/// <ngv scope="public" />
define("sabre-ngv-core/modules/IModuleManifest", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-core/modules/ExposedClassesStruct" />
/// <ngv scope="public" />
define("sabre-ngv-core/modules/ExposedClassesStruct", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-core/modules/IModule" />
/// <ngv scope="public" />
define("sabre-ngv-core/modules/IModule", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-core/modules/IModuleContext" />
/// <ngv scope='public' />
define("sabre-ngv-core/modules/IModuleContext", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-core/modules/ContextedRequestFactory" />
/// <ngv scope="public" />
define("sabre-ngv-core/modules/ContextedRequestFactory", ["require", "exports", "sabre-ngv-app/app/services/impl/RequestFactory"], function (require, exports, RequestFactory_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /** @internal */
    var ContextedRequestFactory = (function (_super) {
        __extends(ContextedRequestFactory, _super);
        function ContextedRequestFactory(cfDecorator) {
            var _this = _super.call(this) || this;
            _this.cfDecorator = cfDecorator;
            return _this;
        }
        ContextedRequestFactory.prototype.createRedappServiceRequest = function (flowId) {
            return this.cfDecorator(_super.prototype.createRedappServiceRequest.call(this, flowId));
        };
        return ContextedRequestFactory;
    }(RequestFactory_1.RequestFactory));
    ContextedRequestFactory.SERVICE_NAME = 'requestFactory';
    exports.ContextedRequestFactory = ContextedRequestFactory;
});
///<amd-module name="sabre-ngv-core/helpers/ProxyContext" />
/// <ngv scope="public" />
define("sabre-ngv-core/helpers/ProxyContext", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.proxyContext = function (target, context) {
        return new Proxy(target, {
            get: function (target, key) {
                return context.hasOwnProperty(key) ? context[key] : target[key];
            }
        });
    };
});
///<amd-module name="sabre-ngv-core/modules/ModuleContext" />
/// <ngv scope="public" />
define("sabre-ngv-core/modules/ModuleContext", ["require", "exports", "sabre-ngv-app/app/services/impl/RequestFactory", "sabre-ngv-core/modules/ContextedRequestFactory", "sabre-ngv-app/cf", "sabre-ngv-app/app/getService", "sabre-ngv-app/app/registerService", "sabre-ngv-app/app/services/impl/AbstractService", "sabre-ngv-app/app/services/impl/SrwSyncApi", "sabre-ngv-app/app/services/impl/SrwAsyncApi", "sabre-ngv-app/app/services/impl/ILoggerService", "sabre-ngv-core/helpers/ProxyContext"], function (require, exports, RequestFactory_2, ContextedRequestFactory_1, cf_1, getService_1, registerService_1, AbstractService_1, SrwSyncApi_1, SrwAsyncApi_1, ILoggerService_1, ProxyContext_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ModuleContext = (function () {
        function ModuleContext(moduleName) {
            if (moduleName === void 0) { moduleName = 'unknown'; }
            this.moduleName = moduleName;
            this.module = null;
            // pass;
        }
        ModuleContext.prototype.setModule = function (module) {
            if (this.module !== null) {
                throw new Error('Module already set!');
            }
            this.module = module;
        };
        ModuleContext.prototype.getModule = function () {
            if (this.module === null) {
                throw new Error('Module not available yet!');
            }
            return this.module;
        };
        ModuleContext.prototype.getModuleName = function () {
            return this.module ? this.module.getName() : this.moduleName;
        };
        ModuleContext.prototype.cf = function (command) {
            return this.decorateCommandFlow(cf_1.cf(command));
        };
        ModuleContext.prototype.decorateCommandFlow = function (commandFlow) {
            return commandFlow.setRemotePreferences(this.getModule().getMeta('cf') || {});
        };
        ModuleContext.prototype.registerService = function (serviceClass, options) {
            registerService_1.registerService(serviceClass, options);
        };
        ModuleContext.prototype.getService = function (serviceClass) {
            var serviceInstance;
            if (serviceClass.SERVICE_NAME === RequestFactory_2.RequestFactory.SERVICE_NAME) {
                return this.getRequestFactoryService();
            }
            if (serviceClass.SERVICE_NAME === SrwSyncApi_1.SrwSyncApi.SERVICE_NAME || serviceClass.SERVICE_NAME === SrwAsyncApi_1.SrwAsyncApi.SERVICE_NAME) {
                var bundle = this.getModule().getManifest();
                if (bundle.meta.bundleName) {
                    var SrwApiForBundle = (_a = (function (_super) {
                            __extends(class_1, _super);
                            function class_1() {
                                return _super !== null && _super.apply(this, arguments) || this;
                            }
                            return class_1;
                        }(AbstractService_1.AbstractService)),
                        _a.SERVICE_NAME = bundle.meta.bundleName + "." + serviceClass.SERVICE_NAME,
                        _a);
                    var srwApi = getService_1.getService(SrwApiForBundle);
                    serviceInstance = srwApi ? srwApi : getService_1.getService(serviceClass);
                }
            }
            if (serviceClass.SERVICE_NAME === 'restApi') {
                var bundle = this.getModule().getManifest();
                return ProxyContext_1.proxyContext(getService_1.getService(serviceClass), { bundleName: bundle.meta.bundleName });
            }
            if (!serviceInstance) {
                serviceInstance = getService_1.getService(serviceClass);
            }
            if (serviceInstance) {
                if (!serviceInstance[ModuleContext.CONTEXTUAL_INSTANCES]) {
                    serviceInstance[ModuleContext.CONTEXTUAL_INSTANCES] = [];
                }
                var moduleName = this.getModuleName();
                if (!serviceInstance[ModuleContext.CONTEXTUAL_INSTANCES][moduleName]) {
                    serviceInstance[ModuleContext.CONTEXTUAL_INSTANCES][moduleName] = new Proxy(serviceInstance, {});
                }
                serviceInstance = serviceInstance[ModuleContext.CONTEXTUAL_INSTANCES][moduleName];
                ModuleContext.addContext(serviceInstance, this);
            }
            else {
                this.getService(ILoggerService_1.ILoggerService).stack("Cannot deliver " + serviceClass.SERVICE_NAME + " service - no registered instance found!");
            }
            return serviceInstance;
            var _a;
        };
        ModuleContext.prototype.getRequestFactoryService = function () {
            if (!this.requestFactory) {
                this.requestFactory = new ContextedRequestFactory_1.ContextedRequestFactory(this.decorateCommandFlow);
            }
            return this.requestFactory;
        };
        ModuleContext.getContexts = function (target) {
            if (!target[ModuleContext.MODULE_CONTEXTS]) {
                target[ModuleContext.MODULE_CONTEXTS] = [];
            }
            return target[ModuleContext.MODULE_CONTEXTS];
        };
        ;
        ModuleContext.addContext = function (target, context) {
            if (!ModuleContext.hasContext(target, context)) {
                ModuleContext.getContexts(target).push(context);
            }
        };
        ModuleContext.copyContexts = function (giver, taker) {
            ModuleContext.getContexts(giver)
                .forEach(function (ctx) { return ModuleContext.addContext(taker, ctx); });
        };
        ModuleContext.hasContext = function (target, context) {
            return ModuleContext.getContexts(target).indexOf(context) >= 0;
        };
        return ModuleContext;
    }());
    ModuleContext.MODULE_CONTEXTS = Symbol('ModuleContext.MODULE_CONTEXTS');
    ModuleContext.CONTEXTUAL_INSTANCES = Symbol('ModuleContext.CONTEXTUAL_INSTANCES');
    exports.ModuleContext = ModuleContext;
});
///<amd-module name="sabre-ngv-core/Context" />
/// <ngv scope="public" />
define("sabre-ngv-core/Context", ["require", "exports", "sabre-ngv-core/modules/ModuleContext"], function (require, exports, ModuleContext_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    // Cannot use IModuleContext['something'] for types - it seems to break generics
    // types are copied from IModuleContext
    /** @internal **/
    exports.context = new ModuleContext_1.ModuleContext("sabre-ngv-core");
    /** @internal **/
    exports.cf = exports.context.cf.bind(exports.context);
    /** @internal **/
    exports.registerService = exports.context.registerService.bind(exports.context);
    /** @internal **/
    exports.getService = exports.context.getService.bind(exports.context);
});
///<amd-module name="sabre-ngv-core/modules/Module" />
/// <ngv scope="public" />
define("sabre-ngv-core/modules/Module", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Module = (function () {
        /**
         * Module object constructor. Requires manifest describing module.
         *
         * @param manifest Module manifest
         */
        function Module(manifest) {
            this.manifest = manifest;
        }
        /**
         * Module initialization method.
         *
         * Overwrite it in sub-classes to provide module initialization. For example you may contribute to drawer configuration.
         */
        Module.prototype.init = function () {
            // pass
        };
        /**
         * Returns module manifest.
         *
         * @returns Module manifest
         */
        Module.prototype.getManifest = function () {
            return this.manifest;
        };
        /**
         * Returns module name.
         *
         * @returns Module name
         */
        Module.prototype.getName = function () {
            return this.getManifest().name;
        };
        Module.prototype.getMeta = function (key) {
            var meta = this.getManifest().meta;
            return meta ? meta[key] : undefined;
        };
        Module.prototype.getExposedClasses = function () {
            return {};
        };
        return Module;
    }());
    exports.Module = Module;
});
///<amd-module name="sabre-ngv-core/services/ILayerService" />
/// <ngv scope="public" />
define("sabre-ngv-core/services/ILayerService", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * LayerService interface
     */
    var ILayerService = (function () {
        function ILayerService() {
        }
        return ILayerService;
    }());
    ILayerService.SERVICE_NAME = 'layer';
    exports.ILayerService = ILayerService;
});
///<amd-module name="sabre-ngv-core/services/LayerService" />
/// <ngv scope="public" />
define("sabre-ngv-core/services/LayerService", ["require", "exports", "sabre-ngv-app/app/services/impl/AbstractService", "sabre-ngv-app/app/widgets/layer/views/Layer", "sabre-ngv-app/app/C2WBridge", "react"], function (require, exports, AbstractService_2, Layer_1, C2WBridge_1, React) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Layer service allows access to view layer, which displays modals.
     */
    var LayerService = (function (_super) {
        __extends(LayerService, _super);
        function LayerService() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.layers = new Map();
            return _this;
        }
        LayerService.prototype.createLayer = function (position) {
            var effectivePosition = position ? position : LayerService.DEFAULT_LAYER_POSITION;
            var newLayer = new Layer_1.Layer();
            newLayer.setPosition(effectivePosition);
            this.layers.set(effectivePosition, newLayer);
            if (this.layers.size == 1) {
                window.app.areaView.$el.prepend(newLayer.$el);
            }
            else {
                this.insertRecentlyAddedLayerToDom(newLayer);
            }
            return newLayer;
        };
        LayerService.prototype.insertRecentlyAddedLayerToDom = function (layer) {
            this.getFirstLayer().$el.after(layer.$el);
        };
        LayerService.prototype.getFirstLayer = function () {
            return this.layers.values().next().value;
        };
        /**
         * @inheritDoc
         */
        LayerService.prototype.showInModal = function (widget, modalOptions, layerOptions) {
            var position = (layerOptions && layerOptions.position) || LayerService.DEFAULT_LAYER_POSITION;
            this.getLayer(position).showInModal(widget, modalOptions, layerOptions);
        };
        /**
         * Converts widget to C2W if widget is React Component, otherwise do nothing
         */
        LayerService.prototype.convertWidgetForLayer = function (widget, componentProps) {
            var widgetForLayer = widget;
            if (widget.prototype instanceof React.Component) {
                widgetForLayer = new C2WBridge_1.C2WBridge({
                    componentClass: widget,
                    componentProps: componentProps
                });
            }
            return widgetForLayer;
        };
        /**
         * @inheritDoc
         */
        LayerService.prototype.showOnLayer = function (widget, layerOptions, componentProps) {
            this.getLayer(layerOptions.position)
                .showOnLayer(this.convertWidgetForLayer(widget, componentProps), layerOptions);
        };
        /**
         * @inheritDoc
         */
        LayerService.prototype.putOnLayer = function (widget, layerOptions, componentProps) {
            this.getLayer(layerOptions.position)
                .putOnLayer(this.convertWidgetForLayer(widget, componentProps), layerOptions);
        };
        /**
         * @inheritDoc
         */
        LayerService.prototype.clearLayer = function (position) {
            this.getLayer(position).clearLayer();
        };
        /**
         * @inheritDoc
         */
        LayerService.prototype.getLayers = function () {
            return this.layers;
        };
        /**
         * @inheritDoc
         */
        LayerService.prototype.getLayer = function (position) {
            if (position === void 0) { position = LayerService.DEFAULT_LAYER_POSITION; }
            var layer = this.layers.get(position);
            return layer || this.createLayer(position);
        };
        LayerService.prototype.onDataReceived = function (data) {
            this.getLayer().handleLayeredMaskData(data);
        };
        return LayerService;
    }(AbstractService_2.AbstractService));
    LayerService.SERVICE_NAME = 'layer';
    LayerService.DEFAULT_LAYER_POSITION = 3;
    exports.LayerService = LayerService;
});
///<amd-module name="sabre-ngv-core/services/MockConnector" />
/// <ngv scope="protected" />
define("sabre-ngv-core/services/MockConnector", ["require", "exports", "sabre-ngv-app/app/services/impl/AbstractConnector", "moment", "sabre-ngv-app/key", "sabre-ngv-app/app/services/impl/LoggerService", "sabre-ngv-core/Context"], function (require, exports, AbstractConnector_1, moment, key_1, LoggerService_1, Context_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @class
     * Connector class for mocks shipped with application.
     * @extends app.services.impl.AbstractConnector
     */
    var MockConnector = (function (_super) {
        __extends(MockConnector, _super);
        function MockConnector() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.logger = Context_1.getService(LoggerService_1.LoggerService);
            return _this;
        }
        MockConnector.prototype._send = function (commandFlow) {
            return __awaiter(this, void 0, void 0, function () {
                var response, _a, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            _b = (_a = JSON).stringify;
                            return [4 /*yield*/, this.getResponseTo(commandFlow)];
                        case 1:
                            response = _b.apply(_a, [_c.sent()]);
                            setTimeout(this.receive.bind(this, response));
                            return [2 /*return*/];
                    }
                });
            });
        };
        MockConnector.prototype.getResponseTo = function (commandFlow) {
            return __awaiter(this, void 0, void 0, function () {
                var url, fileContent;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getMockFileUrl(commandFlow)];
                        case 1:
                            url = _a.sent();
                            if (!(url !== null)) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.getFileContent(url)];
                        case 2:
                            fileContent = _a.sent();
                            fileContent['d.CommandFlow']['d.ConversationId'] = commandFlow.getMsgId();
                            fileContent['d.CommandFlow']['d.MsgId'] = commandFlow.getMsgId();
                            fileContent['d.CommandFlow']['d.ConvId'] = commandFlow.getConvId();
                            return [2 /*return*/, fileContent];
                        case 3:
                            this.logger.info('Missing response for cf: ' + JSON.stringify(commandFlow.getCommand()));
                            return [2 /*return*/, {
                                    'd.CommandFlow': {
                                        'd.Command': commandFlow.getCommand(),
                                        'd.ConversationId': commandFlow.getMsgId(),
                                        'd.MsgId': commandFlow.getMsgId(),
                                        'd.ConvId': commandFlow.getConvId()
                                    }
                                }];
                    }
                });
            });
        };
        MockConnector.prototype.getMockFileUrl = function (commandFlow) {
            return __awaiter(this, void 0, void 0, function () {
                var errorMsg, request, rawMockFilename, filename, url, _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            errorMsg = '';
                            request = this.getRequest(commandFlow);
                            this.logRequest(request);
                            rawMockFilename = commandFlow.getCommand();
                            filename = this.createFullFormattedFilename(rawMockFilename, 'xml');
                            url = this.getUrlForMockFile(filename);
                            _a = url !== null;
                            if (!_a) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.fileExists(url)];
                        case 1:
                            _a = (_d.sent());
                            _d.label = 2;
                        case 2:
                            if (!_a) return [3 /*break*/, 6];
                            return [4 /*yield*/, this.getResponseFileUrlFromXmlFile(url, request)];
                        case 3:
                            url = _d.sent();
                            _b = url !== null;
                            if (!_b) return [3 /*break*/, 5];
                            return [4 /*yield*/, this.fileExists(url)];
                        case 4:
                            _b = (_d.sent());
                            _d.label = 5;
                        case 5:
                            if (_b) {
                                this.logger.info('Returned response from file: ' + filename + ' for request: ' + request);
                                this.logger.info('Found response: ' + url);
                                return [2 /*return*/, url];
                            }
                            else {
                                errorMsg +=
                                    'No matching responses in XML file. Request being searched: ' + request + ', ';
                            }
                            return [3 /*break*/, 7];
                        case 6:
                            errorMsg += filename + ' and ';
                            _d.label = 7;
                        case 7:
                            filename = this.createFullFormattedFilename(rawMockFilename, 'json');
                            url = this.getUrlForMockFile(filename);
                            _c = url !== null;
                            if (!_c) return [3 /*break*/, 9];
                            return [4 /*yield*/, this.fileExists(url)];
                        case 8:
                            _c = !(_d.sent());
                            _d.label = 9;
                        case 9:
                            if (_c) {
                                this.logger.info('Cannot read mock response: ' + errorMsg + filename + ' cannot be found for request: ' + request);
                                return [2 /*return*/, null];
                            }
                            this.logger.info('Returned default response from file: ' + filename + ' for request: '
                                + request);
                            return [2 /*return*/, url];
                    }
                });
            });
        };
        MockConnector.prototype.getResponseFileUrlFromXmlFile = function (url, request) {
            return __awaiter(this, void 0, void 0, function () {
                var filename, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.findResponseFromXmlFile(url, request)];
                        case 1:
                            filename = _b.sent();
                            if (!(filename !== null)) return [3 /*break*/, 4];
                            filename = filename.trim();
                            url = this.getUrlForMockFile(filename);
                            _a = url === null;
                            if (_a) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.fileExists(url)];
                        case 2:
                            _a = !(_b.sent());
                            _b.label = 3;
                        case 3:
                            if (_a) {
                                throw new Error('File ' + filename
                                    + ' referenced from XML file cannot be found for request: ' + request);
                            }
                            this.logger.info('Using mock file: ' + filename + ' for request: ' + request);
                            return [2 /*return*/, url];
                        case 4: return [2 /*return*/, null];
                    }
                });
            });
        };
        MockConnector.prototype.findResponseFromXmlFile = function (url, request) {
            return __awaiter(this, void 0, void 0, function () {
                var fileContent, result, _this, number, _i, _a, it, pair, rq, rs, _rq, _request;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.getFileContent(url)];
                        case 1:
                            fileContent = _b.sent();
                            result = null;
                            _this = this;
                            number = 0;
                            if (fileContent !== null) {
                                for (_i = 0, _a = $(fileContent).find('pair').toArray(); _i < _a.length; _i++) {
                                    it = _a[_i];
                                    pair = $(it);
                                    rq = pair.find('rq').text();
                                    rs = pair.find('rs').text();
                                    if (rq !== null && rs !== null) {
                                        rq = _this.supplyDateTime(rq);
                                        try {
                                            console.log(rq);
                                            console.log(request);
                                            console.log(rs);
                                            _rq = JSON.parse(_this.unescape(rq));
                                            _request = JSON.parse(request);
                                            if (_this.compareObjects(_rq, _request)) {
                                                return [2 /*return*/, rs];
                                            }
                                        }
                                        catch (e) {
                                            throw e;
                                        }
                                    }
                                }
                            }
                            return [2 /*return*/, null];
                    }
                });
            });
        };
        MockConnector.prototype.fileExists = function (url) {
            return __awaiter(this, void 0, void 0, function () {
                var response;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.resolveUrl(url, 'HEAD')];
                        case 1:
                            response = _a.sent();
                            return [2 /*return*/, response.status === 200];
                    }
                });
            });
        };
        MockConnector.prototype.resolveUrl = function (url, method) {
            if (method === void 0) { method = 'GET'; }
            return new Promise(function (resolve, reject) {
                var xmlhttp = new XMLHttpRequest();
                xmlhttp.onreadystatechange = function () {
                    if (this.readyState === 4) {
                        if (this.status === 200) {
                            resolve({
                                status: this.status,
                                data: xmlhttp
                            });
                        }
                        resolve({
                            status: this.status,
                            error: this
                        });
                    }
                };
                xmlhttp.open(method, url, true);
                xmlhttp.send();
            });
        };
        MockConnector.prototype.getFileContent = function (url) {
            return __awaiter(this, void 0, void 0, function () {
                var response, type;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.resolveUrl(url)];
                        case 1:
                            response = _a.sent();
                            if (response.status === 200) {
                                type = url.split('.').pop();
                                if (type === 'json') {
                                    return [2 /*return*/, JSON.parse(this.supplyDateTime(response.data.responseText))];
                                }
                                else if (type === 'xml') {
                                    return [2 /*return*/, response.data.responseXML];
                                }
                                else {
                                    return [2 /*return*/, response.data.responseText];
                                }
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        MockConnector.prototype.getRequest = function (commandFlow) {
            var request = {
                'd.CommandFlow': {
                    'd.Command': commandFlow.getCommand(),
                    'o.ExtensionPoint_Summary': commandFlow.getRequestParamsStructure()
                }
            };
            return JSON.stringify(request);
        };
        MockConnector.prototype.supplyDateTime = function (string) {
            var regex = /EVALdaysLater\(([0-9]*),[\"\']([A-Za-z\-\:\' ]*)[\"\']\)EVAL/m;
            var regex2 = /EVALyear\(([0-9]*),([0-9]*),[\"\']([A-Za-z\-\:\' ]*)[\"\']\)EVAL/m;
            var m;
            while ((m = regex.exec(string)) !== null) {
                // This is necessary to avoid infinite loops with zero-width matches
                if (m.index === regex.lastIndex) {
                    regex.lastIndex++;
                }
                var match = m[0];
                var days = m[1];
                var pattern = m[2].toUpperCase();
                string = string.replace(match, moment().add(days, 'd').format(pattern).toUpperCase());
            }
            while ((m = regex2.exec(string)) !== null) {
                if (m.index === regex2.lastIndex) {
                    regex2.lastIndex++;
                }
                var match = m[0];
                var month = m[1];
                var day = m[2];
                var pattern = m[3].toUpperCase();
                var year = moment().year();
                var date = moment(year + '-' + month + '-' + day).format(pattern);
                var currentDate = moment().format(pattern);
                if (date === currentDate || moment(date).isBefore(currentDate)) {
                    date = moment(date).add(1, 'y').format(pattern);
                }
                string = string.replace(match, date.toUpperCase());
            }
            return string;
        };
        MockConnector.prototype.getUrlForMockFile = function (filename) {
            if (filename === null || filename === undefined) {
                return null;
            }
            return 'http://localhost:8087/mocks/' + filename;
        };
        MockConnector.prototype.logRequest = function (request) {
            this.logger.info('Trying to find mock for following request: ' + request);
        };
        MockConnector.prototype.createFullFormattedFilename = function (command, extension) {
            return (this.encodeFilename(command) + '.' + extension).toLowerCase();
        };
        MockConnector.prototype.encodeFilename = function (filename) {
            var mapping = new Map([
                [':', '(colon)'],
                ['\\', '(backslash)'],
                ['/', '(slash)'],
                ['*', '(star)'],
                [key_1.key.CROSS, '(cross)'],
                [key_1.key.CHANGE, '(change)'],
                [key_1.key.END_ITEM, '(end)'],
                ['<', '(lt)'],
                ['>', '(gt)'],
                ['.', '(dot)'],
                [' ', '(space)'],
                ['?', '(q)'],
                ['&', '(amp)'],
                ['=', '(eq)'],
                ['%', '(percent)'],
                [';', '(semicolon)'],
                ['@', '(at)']
            ]);
            if (filename === null || filename === undefined) {
                return null;
            }
            else {
                mapping.forEach(function (value, key) {
                    var regex = new RegExp(this.escapeRegExp(key), 'g');
                    filename = filename.replace(regex, value);
                }.bind(this));
                if (filename.length > 140) {
                    filename = filename.substring(0, 100) + "_etc";
                }
                return filename;
            }
        };
        MockConnector.prototype.escapeRegExp = function (string) {
            return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
        };
        MockConnector.prototype.unescape = function (string) {
            if (/&amp;|&quot;|&#39;|&lt;|&gt;/.test(string)) {
                var doc = new DOMParser().parseFromString(string, "text/html");
                return doc.documentElement.textContent;
            }
            return string;
        };
        MockConnector.prototype.compareObjects = function (ob1, ob2) {
            if (ob1 === null && ob2 === null) {
                return true;
            }
            var object1Keys = Object.keys(ob1).sort();
            var object2Keys = Object.keys(ob2).sort();
            if (object1Keys.length === object2Keys.length) {
                for (var i = 0; i < object1Keys.length; i++) {
                    if (object1Keys[i] === object2Keys[i]) {
                        if (typeof ob1[object1Keys[i]] === 'object' && typeof ob2[object2Keys[i]] === 'object') {
                            // both objects
                            if (!(ob1[object1Keys[i]] instanceof Array) && !(ob2[object2Keys[i]] instanceof Array)) {
                                // both non-arrays
                                var result = this.compareObjects(ob1[object1Keys[i]], ob2[object2Keys[i]]);
                                if (!result) {
                                    return false; // covered by test
                                }
                                continue; // covered by test
                            }
                            else if (ob1[object1Keys[i]] instanceof Array && ob2[object2Keys[i]] instanceof Array) {
                                // both arrays
                                if (ob1[object1Keys[i]].length !== ob2[object2Keys[i]].length) {
                                    return false; //covered by test
                                }
                                for (var j = 0; j < ob1[object1Keys[i]].length; j++) {
                                    if (typeof ob1[object1Keys[i]][j] === 'object') {
                                        var result = this.compareObjects(ob1[object1Keys[i]][j], ob2[object2Keys[i]][j]);
                                        if (!result) {
                                            return false; // covered by test
                                        }
                                        continue; // covered by test
                                    }
                                    else {
                                        if (this.valueAsString(ob1[object1Keys[i]][j]) !== this.valueAsString(ob2[object2Keys[i]][j])) {
                                            return false; // covered by test
                                        }
                                        continue; // covered by test
                                    }
                                }
                                continue; // covered by test
                            }
                            else if (!(ob2[object2Keys[i]] instanceof Array) && ob1[object1Keys[i]] instanceof Array && ob1[object1Keys[i]].length === 1) {
                                var result = this.compareObjects(ob1[object1Keys[i]][0], ob2[object2Keys[i]]);
                                if (!result) {
                                    return false; // covered by test
                                }
                                continue; // covered by test
                            }
                            else if (!(ob1[object1Keys[i]] instanceof Array) && ob2[object2Keys[i]] instanceof Array && ob2[object2Keys[i]].length === 1) {
                                var result = this.compareObjects(ob1[object1Keys[i]], ob2[object2Keys[i]][0]);
                                if (!result) {
                                    return false; // covered by test
                                }
                                continue; // covered by test
                            }
                        }
                        else if (ob1[object1Keys[i]] instanceof Array && ob1[object1Keys[i]].length === 1) {
                            //ob2 non object
                            if (this.valueAsString(ob1[object1Keys[i]][0]) !== this.valueAsString(ob2[object2Keys[i]])) {
                                return false; // covered by test
                            }
                            continue; // covered by test
                        }
                        else if (ob2[object2Keys[i]] instanceof Array && ob2[object2Keys[i]].length === 1) {
                            //ob1 nonobject
                            if (this.valueAsString(ob2[object2Keys[i]][0]) !== this.valueAsString(ob1[object1Keys[i]])) {
                                return false; // covered by test
                            }
                            continue; // covered by test
                        }
                        else {
                            if (this.valueAsString(ob1[object1Keys[i]]) !== this.valueAsString(ob2[object2Keys[i]])) {
                                return false; // covered by test
                            }
                        }
                    }
                    else {
                        return false; // covered by test
                    }
                }
            }
            else {
                return false; // covered by test
            }
            return true; // covered by test
        };
        MockConnector.prototype.valueAsString = function (value) {
            if (typeof value === 'object') {
                return JSON.stringify(value).toLowerCase();
            }
            else {
                return String(value).toLowerCase();
            }
        };
        return MockConnector;
    }(AbstractConnector_1.AbstractConnector));
    exports.MockConnector = MockConnector;
});
///<amd-module name="sabre-ngv-core/services/IInstrumentationService" />
/// <ngv scope="protected" />
define("sabre-ngv-core/services/IInstrumentationService", ["require", "exports", "sabre-ngv-app/app/services/impl/AbstractService"], function (require, exports, AbstractService_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var IInstrumentationService = (function (_super) {
        __extends(IInstrumentationService, _super);
        function IInstrumentationService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return IInstrumentationService;
    }(AbstractService_3.AbstractService));
    IInstrumentationService.SERVICE_NAME = 'core_instrumentation_service';
    exports.IInstrumentationService = IInstrumentationService;
});
define("sabre-ngv-core/services/InstrumentationService", ["require", "exports", "sabre-ngv-core/services/IInstrumentationService"], function (require, exports, IInstrumentationService_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var InstrumentationService = (function (_super) {
        __extends(InstrumentationService, _super);
        function InstrumentationService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        InstrumentationService.prototype.postEvent = function (eventData, target) {
            if (this.eventHandler) {
                this.eventHandler(eventData);
            }
        };
        InstrumentationService.prototype.registerEventHandler = function (handler) {
            this.eventHandler = handler;
        };
        return InstrumentationService;
    }(IInstrumentationService_1.IInstrumentationService));
    exports.InstrumentationService = InstrumentationService;
});
define("sabre-ngv-core/Main", ["require", "exports", "sabre-ngv-core/modules/Module", "sabre-ngv-core/services/LayerService", "sabre-ngv-core/Context", "sabre-ngv-core/services/MockConnector", "sabre-ngv-core/modules/ModuleContext", "sabre-ngv-core/services/InstrumentationService"], function (require, exports, Module_1, LayerService_1, Context_2, MockConnector_1, ModuleContext_2, InstrumentationService_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Main = (function (_super) {
        __extends(Main, _super);
        function Main() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Main.prototype.init = function () {
            _super.prototype.init.call(this);
            Context_2.registerService(LayerService_1.LayerService);
            Context_2.registerService(InstrumentationService_1.InstrumentationService);
        };
        Main.prototype.getExposedClasses = function () {
            return {
                MockConnector: MockConnector_1.MockConnector,
                ModuleContext: ModuleContext_2.ModuleContext
            };
        };
        return Main;
    }(Module_1.Module));
    exports.Main = Main;
});
///<amd-module name="sabre-ngv-core" />
define("sabre-ngv-core", ["require", "exports", "sabre-ngv-core/Main", "sabre-ngv-core/Context"], function (require, exports, Main_1, Context_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Module_sabre_ngv_core = (function (_super) {
        __extends(Module_sabre_ngv_core, _super);
        function Module_sabre_ngv_core(manifest) {
            var _this = _super.call(this, manifest) || this;
            Context_3.context.setModule(_this);
            return _this;
        }
        return Module_sabre_ngv_core;
    }(Main_1.Main));
    exports.default = Module_sabre_ngv_core;
});
define("sabre-ngv-core/helpers/MethodWrapper", ["require", "exports", "underscore"], function (require, exports, _) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var MethodWrapper = (function () {
        function MethodWrapper(methodName, wrapper) {
            this.methodName = methodName;
            this.wrapper = wrapper;
        }
        MethodWrapper.prototype.getWrapper = function () {
            return this.wrapper;
        };
        MethodWrapper.prototype.getMethodName = function () {
            return this.methodName;
        };
        MethodWrapper.prototype.wrap = function (target) {
            var methodName = this.getMethodName();
            var wrapper = this.getWrapper();
            target.prototype[methodName] = _.wrap(target.prototype[methodName], wrapper);
        };
        return MethodWrapper;
    }());
    exports.MethodWrapper = MethodWrapper;
});
define("sabre-ngv-core/helpers/InitializeMethodWrapper", ["require", "exports", "sabre-ngv-core/helpers/MethodWrapper", "sabre-ngv-app/app/AbstractView", "underscore"], function (require, exports, MethodWrapper_1, AbstractView_1, _) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     *
     *  Low level helper class for merging options from multiple sources.
     *
     */
    var InitializeMethodWrapper = (function (_super) {
        __extends(InitializeMethodWrapper, _super);
        function InitializeMethodWrapper(initialOptions) {
            var _this = this;
            var wrapper = function initialize(originalInitialize, data, options) {
                if (this instanceof AbstractView_1.AbstractView) {
                    var mergedOptions = _.extend({}, initialOptions, data);
                    originalInitialize.call(this, mergedOptions);
                }
                else {
                    var mergedOptions = _.extend({}, initialOptions, options);
                    originalInitialize.call(this, data, mergedOptions);
                }
            };
            _this = _super.call(this, 'initialize', wrapper) || this;
            return _this;
        }
        return InitializeMethodWrapper;
    }(MethodWrapper_1.MethodWrapper));
    exports.InitializeMethodWrapper = InitializeMethodWrapper;
});
define("sabre-ngv-core/helpers/PrototypeExtension", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-core/helpers/PrototypeExtender" />
/// <ngv scope="public" />
define("sabre-ngv-core/helpers/PrototypeExtender", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     *
     *  Low level helper class for merging prototypes
     *
     */
    var PrototypeExtender = (function () {
        function PrototypeExtender(prototypeExtension) {
            if (prototypeExtension instanceof Function) {
                var mixinClass = prototypeExtension;
                this.prototypeExtension = new mixinClass();
            }
            else {
                this.prototypeExtension = prototypeExtension;
            }
        }
        PrototypeExtender.prototype.extend = function (target) {
            for (var memberName in this.prototypeExtension) {
                if (!target.prototype.hasOwnProperty(memberName)) {
                    // class is decorated after methods are defined on prototype
                    // we do not want to overwrite them
                    target.prototype[memberName] = this.prototypeExtension[memberName];
                }
            }
        };
        return PrototypeExtender;
    }());
    exports.PrototypeExtender = PrototypeExtender;
});
///<amd-module name="sabre-ngv-core/interfaces/asciiTable" />
/// <ngv scope="protected" />
define("sabre-ngv-core/interfaces/asciiTable", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-core/services/ISymbolsService" />
/// <ngv scope="protected" />
define("sabre-ngv-core/services/ISymbolsService", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ISymbolsService = (function () {
        function ISymbolsService() {
        }
        return ISymbolsService;
    }());
    ISymbolsService.SERVICE_NAME = 'symbols';
    exports.ISymbolsService = ISymbolsService;
});
///<amd-module name="sabre-ngv-core/services/SymbolsService" />
/// <ngv scope="protected" />
define("sabre-ngv-core/services/SymbolsService", ["require", "exports", "sabre-ngv-app/app/services/impl/AbstractService"], function (require, exports, AbstractService_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var SymbolsService = (function (_super) {
        __extends(SymbolsService, _super);
        function SymbolsService() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.symbols = {};
            _this.uid = 0;
            return _this;
        }
        SymbolsService.prototype.getSymbol = function (uid) {
            if (!this.symbols[uid]) {
                throw new Error('Cannot find Symbol() for given UID. Please bind Symbol with UID first using .getUid() method.');
                // do not create symbols automatically - UIDs should be created from existing Symbol to force Symbol-based development
            }
            return this.symbols[uid];
        };
        SymbolsService.prototype.getUid = function (symbol) {
            var scopeUid = _.findKey(this.symbols, function (it) { return it === symbol; });
            if (typeof scopeUid === 'undefined') {
                scopeUid = 'SYMBOL_UID_' + (++this.uid);
                this.symbols[scopeUid] = symbol;
            }
            return scopeUid;
        };
        return SymbolsService;
    }(AbstractService_4.AbstractService));
    SymbolsService.SERVICE_NAME = 'symbols';
    exports.SymbolsService = SymbolsService;
});
///<amd-module name="sabre-ngv-core/configs/drawer/LargeWidgetDrawerConfig" />
/// <ngv scope="public" />
define("sabre-ngv-core/configs/drawer/LargeWidgetDrawerConfig", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Drawer's large widget configuration class.
     *
     * Large widgets are displayed in modal window when user clicks on tile in drawer.
     *
     * @param <T> - interface of tile class
     * @param <U> - interface of large widget class
     */
    var LargeWidgetDrawerConfig = (function () {
        /**
         * Constructor.
         *
         * @param tile - descriptor of widget to be displayed as tile
         * @param widget - descriptoy of widget to be displayed as large widget
         * @param modalOptions - options for modal holding large widget
         */
        function LargeWidgetDrawerConfig(tile, widget, modalOptions) {
            this.type = 'large-widget';
            this.tile = tile;
            this.widget = widget;
            this.modalOptions = modalOptions;
        }
        return LargeWidgetDrawerConfig;
    }());
    exports.LargeWidgetDrawerConfig = LargeWidgetDrawerConfig;
});
///<amd-module name="sabre-ngv-core/configs/drawer/SmallWidgetDrawerConfig" />
/// <ngv scope="public" />
define("sabre-ngv-core/configs/drawer/SmallWidgetDrawerConfig", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Drawer's small widget configuration class.
     *
     * Small widgets are displayed inlined in drawer when user clicks on tile.
     *
     * @param <T> - interface of tile class
     * @param <U> - interface of small widget class
     */
    var SmallWidgetDrawerConfig = (function () {
        /**
         * Constructor.
         *
         * @param tile - descriptor of widget to be displayed as tile
         * @param widget - descriptoy of widget to be displayed as small widget (inlined)
         */
        function SmallWidgetDrawerConfig(tile, widget) {
            this.type = 'small-widget';
            this.tile = tile;
            this.widget = widget;
        }
        return SmallWidgetDrawerConfig;
    }());
    exports.SmallWidgetDrawerConfig = SmallWidgetDrawerConfig;
});
///<amd-module name="sabre-ngv-core/configs/drawer/TileWidgetDrawerConfig" />
/// <ngv scope="public" />
define("sabre-ngv-core/configs/drawer/TileWidgetDrawerConfig", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Drawer's tile widget configuration class.
     *
     * Tile widgets are just tiles with some quick detailed information.
     *
     * @param <T> - interface of tile class
     */
    var TileWidgetDrawerConfig = (function () {
        /**
         * Constructor.
         *
         * @param tile - descriptor of widget to be displayed as tile
         */
        function TileWidgetDrawerConfig(tile) {
            this.type = 'tile-widget';
            this.tile = tile;
        }
        return TileWidgetDrawerConfig;
    }());
    exports.TileWidgetDrawerConfig = TileWidgetDrawerConfig;
});
///<amd-module name="sabre-ngv-core/data/mutation/Mutation" />
/// <ngv scope="protected" />
define("sabre-ngv-core/data/mutation/Mutation", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Mutation = (function () {
        function Mutation() {
        }
        return Mutation;
    }());
    exports.Mutation = Mutation;
});
///<amd-module name="sabre-ngv-core/data/mutation/MutationCalculator" />
/// <ngv scope="protected" />
define("sabre-ngv-core/data/mutation/MutationCalculator", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-core/data/mutation/AttributeMutation" />
/// <ngv scope="protected" />
define("sabre-ngv-core/data/mutation/AttributeMutation", ["require", "exports", "sabre-ngv-core/data/mutation/Mutation"], function (require, exports, Mutation_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var AttributeMutation = (function (_super) {
        __extends(AttributeMutation, _super);
        function AttributeMutation() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AttributeMutation.calculateMutationOf = function (attributeName) {
            return function (oldState, newState) {
                var oldAttrValue = oldState ? oldState[attributeName] : undefined;
                var newAttrValue = newState ? newState[attributeName] : undefined;
                return {
                    old: oldState,
                    new: newState,
                    mutated: oldAttrValue !== newAttrValue,
                    attributeName: attributeName
                };
            };
        };
        return AttributeMutation;
    }(Mutation_1.Mutation));
    exports.AttributeMutation = AttributeMutation;
});
///<amd-module name="sabre-ngv-core/data/mutation/KeyValueMutation" />
/// <ngv scope="protected" />
define("sabre-ngv-core/data/mutation/KeyValueMutation", ["require", "exports", "sabre-ngv-core/data/mutation/Mutation"], function (require, exports, Mutation_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var KeyValueMutation = (function (_super) {
        __extends(KeyValueMutation, _super);
        function KeyValueMutation() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        KeyValueMutation.getChangedKeys = function (oldState, newState) {
            var changedKeys = {};
            for (var key in newState) {
                if (!oldState || newState[key] !== oldState[key]) {
                    changedKeys[key] = true;
                }
            }
            for (var key in oldState) {
                if (!newState || oldState[key] !== newState[key]) {
                    changedKeys[key] = true;
                }
            }
            return changedKeys;
        };
        KeyValueMutation.calculateMutation = function (oldState, newState) {
            var changedKeys = KeyValueMutation.getChangedKeys(oldState, newState);
            var mutatedKeysCount = Object.keys(changedKeys).length;
            return {
                old: oldState,
                new: newState,
                mutatedKeys: changedKeys,
                mutatedKeysCount: mutatedKeysCount,
                mutated: mutatedKeysCount > 0
            };
        };
        return KeyValueMutation;
    }(Mutation_2.Mutation));
    exports.KeyValueMutation = KeyValueMutation;
});
///<amd-module name="sabre-ngv-core/data/mutation/SingleValueMutation" />
/// <ngv scope="protected" />
define("sabre-ngv-core/data/mutation/SingleValueMutation", ["require", "exports", "sabre-ngv-core/data/mutation/Mutation"], function (require, exports, Mutation_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var SingleValueMutation = (function (_super) {
        __extends(SingleValueMutation, _super);
        function SingleValueMutation() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SingleValueMutation.calculateMutation = function (oldState, newState) {
            return {
                old: oldState,
                new: newState,
                mutated: oldState !== newState
            };
        };
        return SingleValueMutation;
    }(Mutation_3.Mutation));
    exports.SingleValueMutation = SingleValueMutation;
});
///<amd-module name="sabre-ngv-core/data/mutation/observeMutation" />
/// <ngv scope="protected" />
define("sabre-ngv-core/data/mutation/observeMutation", ["require", "exports", "rxjs"], function (require, exports, Rx) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function observeMutation(calculator) {
        return function (source) {
            var oldValue = undefined;
            return new Rx.Observable(function (observer) {
                return source.subscribe({
                    next: function (newValue) {
                        var mutation = calculator(oldValue, newValue);
                        if (mutation.mutated) {
                            observer.next(mutation);
                            oldValue = newValue;
                        }
                    },
                    error: function (err) {
                        observer.error(err);
                    },
                    complete: function () {
                        observer.complete();
                    }
                });
            });
        };
    }
    exports.observeMutation = observeMutation;
});
///<amd-module name="sabre-ngv-core/decorators/classes/Initial" />
/// <ngv scope="public" />
define("sabre-ngv-core/decorators/classes/Initial", ["require", "exports", "sabre-ngv-core/helpers/PrototypeExtender"], function (require, exports, PrototypeExtender_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Decorator used to initialize object with passed attribute values.
     *
     * It is used to make TS inheritance system compatible with Backbone one.
     * Configures object when the one is being constructed before constructor method is called.
     * Available configuration options are described by interface passed as type parameter.
     *
     * @param <T> - interface of attributes to be initialized
     * @param initialOptions - attributes to be initialized
     *
     * @example
     * \@Initial<SomeModelOptions>({
     *   autoPropagateData: true
     * })
     * export class SomeClass {
     * }
     */
    function Initial(initialOptions) {
        return function Initial(target) {
            new PrototypeExtender_1.PrototypeExtender(initialOptions).extend(target);
        };
    }
    exports.Initial = Initial;
});
///<amd-module name="sabre-ngv-core/decorators/classes/Mixin" />
/// <ngv scope="public" />
define("sabre-ngv-core/decorators/classes/Mixin", ["require", "exports", "sabre-ngv-core/helpers/PrototypeExtender"], function (require, exports, PrototypeExtender_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Mixin decorator, used to add a mixin to a class.
     *
     * Concept of mixins was used widely in Backbone-based application,
     * but it turned out it is too hard to understand for programmers,
     * so please use mixins only for backward compatibility and re-using
     * already implemented functionalities.
     *
     * @param mixin - Mixin class to be added
     *
     * @example
     * \@Mixin(WithSomeMixin)
     * export class SomeClass {
     *   // ...
     * }
     */
    function Mixin(mixin) {
        return function Mixin(target) {
            new PrototypeExtender_2.PrototypeExtender(mixin).extend(target);
        };
    }
    exports.Mixin = Mixin;
});
///<amd-module name="sabre-ngv-core/decorators/methods/Bound" />
/// <ngv scope="public" />
define("sabre-ngv-core/decorators/methods/Bound", ["require", "exports", "sabre-ngv-app/str"], function (require, exports, str_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function Bound(target, methodName) {
        var randomSuffix = str_1.str(Math.random()).replace(/[^0-9]/, '');
        var initializerName = "initializeBoundMethod" + randomSuffix;
        target[initializerName] = function () {
            this[methodName] = this[methodName].bind(this);
        };
    }
    exports.Bound = Bound;
});
///<amd-module name="sabre-ngv-core/decorators/methods/Cache" />
/// <ngv scope="protected" />
define("sabre-ngv-core/decorators/methods/Cache", ["require", "exports", "sabre-ngv-app/cache"], function (require, exports, cache_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Caching decorator. Method will run only once and the return value will be cached.
     * Subsequent calls will return this cached value.
     *
     * @param options - Caching options, as described in CacheDecoratorOptions.
     *
     * @example
     * \@Cache()
     * private getValue() {
     *   return 'value';
     * }
     */
    function Cache(options) {
        return function Cache(target, methodName, descriptor) {
            descriptor.value = cache_1.cache(descriptor.value, options);
        };
    }
    exports.Cache = Cache;
});
///<amd-module name="sabre-ngv-core/decorators/methods/Lazy" />
/// <ngv scope="protected" />
define("sabre-ngv-core/decorators/methods/Lazy", ["require", "exports", "sabre-ngv-app/lazy"], function (require, exports, lazy_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Decorator that creates version of method that caches results of it execution.
     * IMPORTANT Difference between lazy() and cache() that cache support methods with arguments.
     * Also lazy() doesn't supports dismiss-event or any other options that cache supports.
     *
     * @example
     * class A {
     *   \@Lazy
     *   lazyMethod() {
     *     // ...
     *   }
     *   // ...
     * }
     *
     */
    function Lazy(target, propertyKey, descriptor) {
        return {
            value: lazy_1.lazy(descriptor.value)
        };
    }
    exports.Lazy = Lazy;
});
///<amd-module name="sabre-ngv-core/data/redux/multiStore/StoreMap" />
/// <ngv scope="protected" />
define("sabre-ngv-core/data/redux/multiStore/StoreMap", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
///<amd-module name="sabre-ngv-core/data/redux/multiStore/UPDATE_STATE" />
/// <ngv scope="protected" />
define("sabre-ngv-core/data/redux/multiStore/UPDATE_STATE", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var UPDATE_STATE;
    (function (UPDATE_STATE) {
        UPDATE_STATE.key = 'UPDATE_STATE';
        function is(action) {
            return action.type === UPDATE_STATE.key;
        }
        UPDATE_STATE.is = is;
        function reducer(state, action) {
            var newState = Object.assign({}, state);
            newState[action.storeName] = action.storeState;
            return newState;
        }
        UPDATE_STATE.reducer = reducer;
    })(UPDATE_STATE = exports.UPDATE_STATE || (exports.UPDATE_STATE = {}));
});
///<amd-module name="sabre-ngv-core/data/redux/multiStore/mergeStores" />
/// <ngv scope="protected" />
define("sabre-ngv-core/data/redux/multiStore/mergeStores", ["require", "exports", "redux", "sabre-ngv-core/data/redux/multiStore/UPDATE_STATE"], function (require, exports, redux_1, UPDATE_STATE_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function mergeStores(storeMap) {
        var reducer = function (state, action) {
            if (UPDATE_STATE_1.UPDATE_STATE.is(action)) {
                return UPDATE_STATE_1.UPDATE_STATE.reducer(state, action);
            }
            else if (action.type !== '@@redux/INIT' && action.type !== '@@INIT') {
                setTimeout(function () { return dispatchToSubStores(action); });
                return state;
            }
            else {
                return state;
            }
        };
        var dispatchToSubStores = function (action) {
            for (var key in storeMap) {
                if (storeMap.hasOwnProperty(key)) {
                    storeMap[key].dispatch(action);
                }
            }
        };
        var initialState = {};
        for (var key in storeMap) {
            initialState[key] = storeMap[key].getState();
        }
        var store = redux_1.createStore(reducer, initialState);
        for (var key in storeMap) {
            if (storeMap.hasOwnProperty(key)) {
                storeMap[key].subscribe((function (key) { return function () {
                    var newState = storeMap[key].getState();
                    var action = {
                        type: UPDATE_STATE_1.UPDATE_STATE.key,
                        storeName: key,
                        storeState: newState
                    };
                    store.dispatch(action);
                }; })(key));
            }
        }
        return store;
    }
    exports.mergeStores = mergeStores;
});
///<amd-module name="sabre-ngv-core/decorators/classes/view/CssClass" />
/// <ngv scope="public" />
define("sabre-ngv-core/decorators/classes/view/CssClass", ["require", "exports", "sabre-ngv-core/helpers/PrototypeExtender", "sabre-ngv-app/bool"], function (require, exports, PrototypeExtender_3, bool_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function hasCssClassOptions(o) {
        return bool_1.bool(o.cssClass);
    }
    /**
     * Decorator which allows to set or overwrite css class of given widget class.
     *
     * @param cssClassName - name of the CSS class
     * @param options - options used when setting CSS class to widget
     *
     * @example
     * \@CssClass('drawer profile-search-drawer')
     * export class SomeViewClass {
     *   // ...
     * }
     */
    function CssClass(cssClassName, options) {
        return function CssClass(target) {
            var initialOptions = {
                cssClass: ''
            };
            if ((options && !options.overwrite) && hasCssClassOptions(target.prototype)) {
                initialOptions.cssClass = target.prototype.cssClass + " " + cssClassName;
            }
            else {
                initialOptions.cssClass = cssClassName;
            }
            new PrototypeExtender_3.PrototypeExtender(initialOptions).extend(target);
        };
    }
    exports.CssClass = CssClass;
});
///<amd-module name="sabre-ngv-core/decorators/classes/view/Template" />
/// <ngv scope="public" />
define("sabre-ngv-core/decorators/classes/view/Template", ["require", "exports", "sabre-ngv-core/helpers/PrototypeExtender"], function (require, exports, PrototypeExtender_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Decorator to bind template to a widget.
     *
     * @param templateName - Name of the template in format: `module-name:template-name`
     *
     * @example
     * \@Template('sabre-sdk-sample-drawer:SampleDrawerView')
     * export class SomeViewClass {
     *   // ...
     * }
     */
    function Template(templateName) {
        var extender = new PrototypeExtender_4.PrototypeExtender({ template: templateName });
        return function Template(target) {
            extender.extend(target);
        };
    }
    exports.Template = Template;
});
///<amd-module name="sabre-ngv-core/decorators/methods/domEvents/OnDomEvent" />
/// <ngv scope="public" />
define("sabre-ngv-core/decorators/methods/domEvents/OnDomEvent", ["require", "exports", "sabre-ngv-app/array"], function (require, exports, array_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     *  A decorator function for attaching methods as event listeners. Mainly used by other decorators, not by itself.
     *
     * @param eventName - Event name or an array of event names
     * @param selector - Element selector
     * @param args - arguments passed to the method when it's triggered
     * @constructor
     */
    function OnDomEvent(eventName, selector, args) {
        if (selector === void 0) { selector = ''; }
        var eventsKeys = array_1.array(eventName)
            .map(function (it) {
            return it + " " + selector;
        });
        return function OnDomEvent(target, methodName) {
            var eventsObject = target['events'] = (target['events'] || {});
            eventsKeys.forEach(function (it) {
                while (eventsObject[it]) {
                    it += '_';
                }
                if (args) {
                    eventsObject[it] = function () {
                        this[methodName].apply(this, args);
                    };
                }
                else {
                    eventsObject[it] = methodName;
                }
            });
        };
    }
    exports.OnDomEvent = OnDomEvent;
});
///<amd-module name="sabre-ngv-core/decorators/methods/domEvents/OnChange" />
/// <ngv scope="public" />
define("sabre-ngv-core/decorators/methods/domEvents/OnChange", ["require", "exports", "sabre-ngv-core/decorators/methods/domEvents/OnDomEvent"], function (require, exports, OnDomEvent_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Decorator used to attach a method as a change event listener.
     *
     * @param selector - Selector for the element to trigger the change event
     * @param args - Arguments to pass to the listener method on execution
     *
     * @example
     * \@OnChange('.select')
     * private handleSelectChange() {
     * }
     */
    function OnChange(selector, args) {
        if (selector === void 0) { selector = ''; }
        return OnDomEvent_1.OnDomEvent('change', selector, args);
    }
    exports.OnChange = OnChange;
});
///<amd-module name="sabre-ngv-core/decorators/methods/domEvents/OnClick" />
/// <ngv scope="public" />
define("sabre-ngv-core/decorators/methods/domEvents/OnClick", ["require", "exports", "sabre-ngv-core/decorators/methods/domEvents/OnDomEvent"], function (require, exports, OnDomEvent_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Decorator used to attach a method as a click event listener.
     *
     * @param selector - Selector for the element to trigger the click event
     * @param args - Arguments to pass to the listener method on execution
     *
     * @example
     * \@OnClick('.button')
     * private handleButtonClick() {
     * }
     */
    function OnClick(selector, args) {
        if (selector === void 0) { selector = ''; }
        return OnDomEvent_2.OnDomEvent('click', selector, args);
    }
    exports.OnClick = OnClick;
});
///<amd-module name="sabre-ngv-core/decorators/methods/domEvents/OnKeyCombo" />
/// <ngv scope="public" />
define("sabre-ngv-core/decorators/methods/domEvents/OnKeyCombo", ["require", "exports", "sabre-ngv-core/decorators/methods/domEvents/OnDomEvent"], function (require, exports, OnDomEvent_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Decorator used to attach a method as a keydown event listener.
     *
     * @param combo - Name of the key or key combination
     * @param selector - Selector for the element to trigger the keydown event
     * @param args - Arguments to pass to the listener method on execution
     *
     * @example
     * \@OnKeyDown('alt+up', '.input')
     * private handleInputAltUp() {
     * }
     */
    function OnKeyCombo(combo, selector, args) {
        if (selector === void 0) { selector = ''; }
        return OnDomEvent_3.OnDomEvent("keydown(" + combo + ")", selector, args);
    }
    exports.OnKeyCombo = OnKeyCombo;
});

//# sourceMappingURL=module.js.map
