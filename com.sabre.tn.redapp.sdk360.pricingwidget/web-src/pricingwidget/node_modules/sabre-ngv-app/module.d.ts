declare module "sabre-ngv-app/app/services/impl/IRequestFactory" {
    /// <ngv scope="public" />
    import {CommandFlow} from "sabre-ngv-app/app/common/data/dto/CommandFlow";
    export interface IRequestFactory {
        createRedappServiceRequest(flowId: string): CommandFlow;
    }
}

declare module "sabre-ngv-app/app/services/impl/RequestFactory" {
    /// <ngv scope="public" />
    import {IRequestFactory} from "sabre-ngv-app/app/services/impl/IRequestFactory";
    import {CommandFlow} from "sabre-ngv-app/app/common/data/dto/CommandFlow";
    import {AbstractService} from "sabre-ngv-app/app/services/impl/AbstractService";
    export class RequestFactory extends AbstractService implements IRequestFactory {
        createRedappServiceRequest(flowId: string): CommandFlow;
    }
}

declare module "sabre-ngv-app/app/services/impl/I18nService" {
    /// <ngv scope="public" />
    import {AbstractService} from "sabre-ngv-app/app/services/impl/AbstractService";
    import {KeyValueMap} from "sabre-ngv-app/_types";
    export type TranslationContext = KeyValueMap;
    export type ScopedTranslator = (path: string, context?: TranslationContext) => string;
    export type Locale =
        | 'de_DE'
        | 'en_US'
        | 'es_ES'
        | 'fr_FR'
        | 'it_IT'
        | 'ja_JP'
        | 'pt_PT'
        | 'ru_RU'
        | 'zh_CN'
        | 'zh_TW'
    /**
     * TODO write usage guide
     */
    export class I18nService extends AbstractService {
        static SERVICE_NAME: 'i18n';
        /**
         * returns translation for the given key.
         * @param {string} path Path to the requested key, usually takes form <pluginName>/<KEY>
         * @param {string} [key] Optionally the key can be given as the second parameter.
         * @param {Object} [context] Context for the formatted message - object containing keys
         * corresponding to variables used in the message.
         * @returns {string}
         */
        translate(path: string, key: string, context: TranslationContext): string;
        translateWithDefault(path: string, key: string, context: TranslationContext): string;
        getScopedHelper(scope: string): (path: string, key?: string, context?: TranslationContext) => string;
        getScopedTranslator(scope: string): ScopedTranslator;
        getLocale(): Locale;
    }
}

declare module "sabre-ngv-app/app/responses/cpa/models/CpaRequestSender" {
    /// <ngv scope="public" />
    import {AbstractModel} from "sabre-ngv-app/app/AbstractModel";
    import {ScanAvailabilityOptions} from "sabre-ngv-app/app/responses/cpa/models/ScanAvailabilityOptions";
    import {CommandFlow} from "sabre-ngv-app/app/common/data/dto/CommandFlow";
    /**
     */
    export class CpaRequestSender extends AbstractModel {
        /**
         * Request flights for the next day, relative to date of cpaModel.
         * @param cpaModel
         * @returns {Promise}
         */
        requestNextDay(model: AbstractModel): void
        /**
         * Request flights for the previous day, relative to date of cpaModel.
         * @param cpaModel
         * @returns {Promise}
         */
        requestPreviousDay(model: AbstractModel): void
        requestMoreFlights(model: AbstractModel): void
        /**
         * Request availability scan (5 days forward).
         * @param options instance of {ScanAvailabilityOptions} - expected to contain numberOfPassengers and bookingClass
         * @returns {Promise}
         */
        scanAvailability(options: ScanAvailabilityOptions): CommandFlow;
        wasSearchByDepartureTimeSelected(): boolean;
    }
}

declare module "sabre-ngv-app/app/responses/cpa/models/ScanAvailabilityOptions" {
    /// <ngv scope="public" />
    export interface ScanAvailabilityOptions {
        numberOfPassengers: number;
        bookingClass: string;
    }
}

declare module "sabre-ngv-app/app/widgets/layer/model/LayeredMaskData" {
    /// <ngv scope="public" />
    import {NonGenericMaskData} from "sabre-ngv-app/app/common/data/dto/NonGenericMaskData";
    /**
     * Layered Mask model.
     * @extends app.common.data.dto.NonGenericMaskData
     */
    export class LayeredMaskData extends NonGenericMaskData {
    }
}

declare module "sabre-ngv-app/app/widgets/layer/views/Layer" {
    /// <ngv scope="public" />
    import {StackContainerView} from "sabre-ngv-app/app/widgets/container/StackContainerView";
    import {ModalOptions} from "sabre-ngv-app/app/widgets/layer/views/ModalOptions";
    import {ViewDescriptor} from "sabre-ngv-app/_types";
    import {LayerOptions} from "sabre-ngv-app/app/widgets/layer/views/LayerOptions";
    import {AbstractView} from "sabre-ngv-app/app/AbstractView";
    import {ComponentType} from 'react';
    import {LayeredMaskData} from "sabre-ngv-app/app/widgets/layer/model/LayeredMaskData";
    /**
     *
     * Layer view class.
     */
    export class Layer extends StackContainerView {
        /**
         * Shows given widget in modal window.
         *
         * @param widget to show
         * @param {struct.ModalOptions} [modalOptions={}] Modal panel configuration options
         * @param {struct.LayerOptions} [layerOptions={}] Layer options
         * @returns {app.widgets.panel.views.ModalPanel}
         */
        showInModal(widget: ViewDescriptor | AbstractView, modalOptions?: ModalOptions, layerOptions?: LayerOptions): void;
        /**
         * Shows given widget on layer
         *
         * @param {ViewDescriptor | AbstractView | ComponentType} widget
         * @param {LayerOptions} layerOptions
         */
        showOnLayer(widget: ViewDescriptor | AbstractView | ComponentType, layerOptions?: LayerOptions): void;
        /**
         * Puts given widget on layer
         *
         * @param {ViewDescriptor | AbstractView | ComponentType} widget
         * @param {LayerOptions} layerOptions
         */
        putOnLayer(widget: ViewDescriptor | AbstractView | ComponentType, layerOptions?: LayerOptions): void;
        /**
         * Dismisses current layer item
         */
        clearLayer(): void;
        /**
         * Shows current layer
         */
        show(): void;
        /**
         * Hides current layer
         */
        hide(): void;
        /**
         * Handles LayeredMaskData response
         * @param data
         */
        handleLayeredMaskData(data: LayeredMaskData): void;
        /**
         * Sets position of the layer, used only for initialization
         */
        setPosition(position: number);
    }
}

declare module "sabre-ngv-app/app/widgets/layer/views/LayerOptions" {
    /// <ngv scope="public" />
    import {OverlayOptions} from "sabre-ngv-app/app/widgets/layer/views/OverlayOptions";
    export interface LayerOptions {
        display?: 'areaView' | 'areaOut';
        replace?: boolean;
        overlay?: OverlayOptions[];
        position?: number;
    }
}

declare module "sabre-ngv-app/app/widgets/layer/views/ModalOptions" {
    /// <ngv scope="public" />
    import {AbstractAction} from "sabre-ngv-app/app/common/views/AbstractAction";
    import {Descriptor} from "sabre-ngv-app/_types";
    export interface ModalOptions {
        title?: string;
        cssClass?: string;
        maximized?: boolean;
        actions?: Descriptor<AbstractAction>[];
        destroyOtherPopovers?: boolean;
    }
}

declare module "sabre-ngv-app/app/widgets/layer/views/OverlayOptions" {
    /// <ngv scope="public" />
    import {KeyValueMap} from "sabre-ngv-app/_types";
    import {LayoutElement} from "sabre-ngv-app/app/services/impl/LayoutElement";
    export interface OverlayOptions {
        /**
         * A layout element alias to be covered by an overlay.
         */
        layoutElement: LayoutElement;
        /**
         * An object of property-value pairs to set to overlay element.
         */
        css?: KeyValueMap<string | number>;
        /**
         * A class or set of classes separated by space.
         */
        cssClass?: string;
    }
}

declare module "sabre-ngv-app/app/widgets/panel/views/ModalPanel" {
    /// <ngv scope="public" />
    import {Panel} from "sabre-ngv-app/app/widgets/panel/views/Panel";
    /**
     * Modal generic panel view class.
     */
    export class ModalPanel extends Panel {
    }
}

declare module "sabre-ngv-app/app/widgets/panel/views/Panel" {
    /// <ngv scope="public" />
    import {ContainerView} from "sabre-ngv-app/app/widgets/container/ContainerView";
    /**
     * Generic panel view class.
     */
    export class Panel extends ContainerView {
        close(): void;
    }
    /**
    * @singleton
    * Factory class used to create {@link app.widgets.panel.views.Panel Panel} instances.
    */
    export class PanelFactory {
    }
}

declare module "sabre-ngv-app/app/responses/shopping/_types" {
    /// <ngv scope="public" />
    export type ShoppingSortName = 'TotalFare' | 'Time' | 'Departure';
}

declare module "sabre-ngv-app/app/responses/shopping/models/ShoppingData" {
    /// <ngv scope="public" />
    import {EnhancedResponseData} from "sabre-ngv-app/app/common/data/dto/EnhancedResponseData";
    import {WithRemoteQuerySupport} from "sabre-ngv-app/app/common/query/mixins/WithRemoteQuerySupport";
    import {ShoppingItinerary} from "sabre-ngv-app/app/responses/shopping/models/ShoppingItinerary";
    import {ShoppingDataRequest} from "sabre-ngv-app/app/responses/shopping/models/ShoppingDataRequest";
    import {IATACode} from "sabre-ngv-app/app/common/data/flight/_types";
    import {Query} from "sabre-ngv-app/app/common/query/Query";
    import {NgvPromise} from "sabre-ngv-app/_types";
    import {FlightSegment} from "sabre-ngv-app/app/common/data/flight/FlightSegment";
    /**
     * Class
     * holds Shopping Data(request and response).
     */
    export class ShoppingData extends EnhancedResponseData implements WithRemoteQuerySupport<ShoppingItinerary> {
        /**
         * Returns Departure airport IATA Code.
         */
        getDepartureAirportIata(): IATACode;
        /**
         * Returns Arriaval airport IATA Code.
         */
        getArrivalAirportIata(): IATACode;
        /**
         * Returns Origin IATA Code.
         */
        getOriginIata(): IATACode;
        /**
         * Returns Destination IATA code.
         */
        getDestinationIata(): IATACode;
        queryItineraries(query?: Query): NgvPromise<ShoppingItinerary[]>;
        /**
         * Returns Departure date.
         */
        getDepartureDate(): string;
        /**
         * Return Arrival date.
         */
        getReturnDate(): string;
        /**
         * Returns Itineraries returned.
         */
        queryLocalItineraries(query?: Query): ShoppingItinerary[];
        /**
         * Returns ShoppingDateRequest
         */
        getShoppingDataRequest(): ShoppingDataRequest;
        /**
         * Returns FlightSegment array
         */
        getLegs(): FlightSegment[];
    }
}

declare module "sabre-ngv-app/app/responses/shopping/models/ShoppingDataRequest" {
    /// <ngv scope="public" />
    import {FlightPassengerType} from "sabre-ngv-app/app/common/data/flight/FlightPassengerType";
    export class ShoppingDataRequest {
        /**
         * Returns array of Flight Passenger Types.
         */
        getPassengerTypes(): FlightPassengerType[];
        /**
         * Returns Cabin array.
         */
        getCabins(): string[];
    }
}

declare module "sabre-ngv-app/app/responses/shopping/models/ShoppingItinerary" {
    /// <ngv scope="public" />
    import {AbstractModel} from "sabre-ngv-app/app/AbstractModel";
    import {FlightConnection} from "sabre-ngv-app/app/common/data/flight/FlightConnection";
    import {FlightSegment} from "sabre-ngv-app/app/common/data/flight/FlightSegment";
    import {FlightPassengerType} from "sabre-ngv-app/app/common/data/flight/FlightPassengerType";
    import {JsonObject} from 'sabre-ngv-app/_types';
    /**
     *
     */
    export class ShoppingItinerary extends AbstractModel {
        /**
         * Returns price of Itinerary.
         */
        getPrice(): number;
        /**
         * Returns currency code.
         */
        getCurrencyCode(): string;
        /**
         * Returns Flight Connection details.
         */
        getFlightConnections(): FlightConnection[];
        /**
         * Returns Flight Segment Details.
         */
        getFlightSegments(): FlightSegment[];
        /**
         * Returns Flight Passenger types.
         */
        getPassengerTypes(): FlightPassengerType[];
        /**
         * Returns Passenger Types Count.
         */
        getPassengerTypesCount(): number;
        hasMultipleTickets(): boolean;
        getPricedItineraryStructure(): JsonObject;
        /**
         * Returns if Itinerary is from WPNI command.
         */
        isWPNI(): boolean;
        /**
         * Returns if Name Selection qualifier was used for WPNI.
         */
        isWpniWithNameSelectionQualifier: boolean;
        getSequenceNumber(): number;
        isFirstWpniAndLowestFareAvailable: boolean;
        isLowerAvail: boolean;
        index: number;
        isProposalVisible(): boolean;
    }
}

declare module "sabre-ngv-app/app/responses/wpa/views/WpaExpertSingle" {
    /// <ngv scope="public" />
    export class WpaExpertSingle {
    }
}

declare module "sabre-ngv-app/app/responses/wpa/views/WpaNoviceSingle" {
    /// <ngv scope="public" />
    export class WpaNoviceSingle {
    }
}

declare module "sabre-ngv-app/app/services/impl/_types" {
    /// <ngv scope="public" />
    export type DrawerGroup = string;
    export type DrawerGroups = DrawerGroup[] | DrawerGroup;
}

declare module "sabre-ngv-app/app/services/impl/DrawerConfig" {
    /// <ngv scope="public" />
    export interface DrawerConfig {
    }
}

declare module "sabre-ngv-app/app/services/impl/DrawerService" {
    /// <ngv scope="public" />
    import {AbstractService} from "sabre-ngv-app/app/services/impl/AbstractService";
    import {IDrawerService} from "sabre-ngv-app/app/services/impl/IDrawerService";
    import {DrawerGroups} from "sabre-ngv-app/app/services/impl/_types";
    import {DrawerConfig} from "sabre-ngv-app/app/services/impl/DrawerConfig";
    /**
     */
    export class DrawerService extends AbstractService implements IDrawerService {
        addConfig<T extends DrawerConfig>(drawerGroups: DrawerGroups, config: T): void;
        getConfigs<T extends DrawerConfig>(drawerGroups: DrawerGroups): T[];
    }
}

declare module "sabre-ngv-app/app/services/impl/IDrawerService" {
    /// <ngv scope="public" />
    import {AbstractService} from "sabre-ngv-app/app/services/impl/AbstractService";
    import {DrawerConfig} from "sabre-ngv-app/app/services/impl/DrawerConfig";
    import {DrawerGroups} from "sabre-ngv-app/app/services/impl/_types";
    export interface IDrawerService extends AbstractService {
        addConfig<T extends DrawerConfig>(drawerGroups: DrawerGroups, config: T): void;
    }
}

declare module "sabre-ngv-app/app/services/impl/ILargeWidgetDrawerConfig" {
    /// <ngv scope="public" />
    import {DrawerConfig} from "sabre-ngv-app/app/services/impl/DrawerConfig";
    import {ViewDescriptor} from "sabre-ngv-app/_types";
    import {ModalOptions} from "sabre-ngv-app/app/widgets/layer/views/ModalOptions";
    import {AbstractView} from "sabre-ngv-app/app/AbstractView";
    export type LargeWidgetDrawerConfigType = 'large-widget';
    export interface ILargeWidgetDrawerConfig<T extends AbstractView, U extends AbstractView> extends DrawerConfig {
        type: LargeWidgetDrawerConfigType;
        tile: ViewDescriptor<T>;
        widget: ViewDescriptor<U>;
        modalOptions?: ModalOptions;
    }
}

declare module "sabre-ngv-app/app/services/impl/ISmallWidgetDrawerConfig" {
    /// <ngv scope="public" />
    import {DrawerConfig} from "sabre-ngv-app/app/services/impl/DrawerConfig";
    import {ViewDescriptor} from "sabre-ngv-app/_types";
    import {AbstractView} from "sabre-ngv-app/app/AbstractView";
    export type SmallWidgetDrawerConfigType = 'small-widget';
    export interface ISmallWidgetDrawerConfig<T extends AbstractView, U extends AbstractView> extends DrawerConfig {
        type: SmallWidgetDrawerConfigType;
        tile: ViewDescriptor<T>;
        widget: ViewDescriptor<U>;
    }
}

declare module "sabre-ngv-app/app/services/impl/ITileWidgetDrawerConfig" {
    /// <ngv scope="public" />
    import {DrawerConfig} from "sabre-ngv-app/app/services/impl/DrawerConfig";
    import {ViewDescriptor} from "sabre-ngv-app/_types";
    import {AbstractView} from "sabre-ngv-app/app/AbstractView";
    export type TileWidgetDrawerConfigType = 'tile-widget';
    export interface ITileWidgetDrawerConfig<T extends AbstractView> extends DrawerConfig {
        type: TileWidgetDrawerConfigType;
        tile: ViewDescriptor<T>;
    }
}

declare module "sabre-ngv-app/app/widgets/drawer/mixins/WithDrawer" {
    /// <ngv scope="public" />
    import {Drawer} from "sabre-ngv-app/app/widgets/drawer/views/Drawer";
    import {WithDrawerPhantomBase} from "sabre-ngv-app/app/widgets/drawer/mixins/WithDrawerPhantomBase";
    import {WithDrawerOptions} from "sabre-ngv-app/app/widgets/drawer/mixins/WithDrawerOptions";
    /**
     * Mixin for adding drawer to other widgets.
     *
     * It sticks drawer after parent widget.
     *
     * Please refer to [Drawer Guide](#!/guide/drawer_guides_overview)
     */
    export class WithDrawer<TDrawer extends Drawer> extends WithDrawerPhantomBase<TDrawer> implements WithDrawerOptions {
    }
}

declare module "sabre-ngv-app/app/widgets/drawer/mixins/WithDrawerOptions" {
    /// <ngv scope="public" />
    import {WithDrawerPhantomBaseOptions} from "sabre-ngv-app/app/widgets/drawer/mixins/WithDrawerPhantomBaseOptions";
    import {Drawer} from "sabre-ngv-app/app/widgets/drawer/views/Drawer";
    export interface WithDrawerOptions extends WithDrawerPhantomBaseOptions<Drawer> {
    }
}

declare module "sabre-ngv-app/app/widgets/drawer/mixins/WithDrawerPhantomBase" {
    /// <ngv scope="public" />
    import {WithDrawerPhantomBaseOptions} from "sabre-ngv-app/app/widgets/drawer/mixins/WithDrawerPhantomBaseOptions";
    import {ViewDescriptor} from "sabre-ngv-app/_types";
    import {Drawer} from "sabre-ngv-app/app/widgets/drawer/views/Drawer";
    import {MultiContextDrawer} from "sabre-ngv-app/app/widgets/drawer/views/MultiContextDrawer";
    export abstract class WithDrawerPhantomBase<TDrawer extends Drawer | MultiContextDrawer> implements WithDrawerPhantomBaseOptions<TDrawer> {
        drawerDescriptor: ViewDescriptor<TDrawer>;
        drawerModelPath?: string;
        openDrawer(): void;
        closeDrawer(): void;
        toggleDrawer(): void;
        getDrawer(): TDrawer;
    }
}

declare module "sabre-ngv-app/app/widgets/drawer/mixins/WithDrawerPhantomBaseOptions" {
    /// <ngv scope="public" />
    import {ViewDescriptor} from "sabre-ngv-app/_types";
    import {Drawer} from "sabre-ngv-app/app/widgets/drawer/views/Drawer";
    import {MultiContextDrawer} from "sabre-ngv-app/app/widgets/drawer/views/MultiContextDrawer";
    export interface WithDrawerPhantomBaseOptions<TDrawer extends Drawer | MultiContextDrawer> {
        drawerDescriptor: ViewDescriptor<TDrawer>;
        drawerModelPath?: string;
    }
}

declare module "sabre-ngv-app/app/widgets/drawer/mixins/WithMultiContextDrawer" {
    /// <ngv scope="public" />
    import {MultiContextDrawer} from "sabre-ngv-app/app/widgets/drawer/views/MultiContextDrawer";
    import {WithDrawerPhantomBase} from "sabre-ngv-app/app/widgets/drawer/mixins/WithDrawerPhantomBase";
    import {WithMultiContextDrawerOptions} from "sabre-ngv-app/app/widgets/drawer/mixins/WithMultiContextDrawerOptions";
    /**
     */
    export class WithMultiContextDrawer<TMultiContextDrawer extends MultiContextDrawer = MultiContextDrawer> extends WithDrawerPhantomBase<TMultiContextDrawer> implements WithMultiContextDrawerOptions {
    }
}

declare module "sabre-ngv-app/app/widgets/drawer/mixins/WithMultiContextDrawerOptions" {
    /// <ngv scope="public" />
    import {WithDrawerPhantomBaseOptions} from "sabre-ngv-app/app/widgets/drawer/mixins/WithDrawerPhantomBaseOptions";
    import {MultiContextDrawer} from "sabre-ngv-app/app/widgets/drawer/views/MultiContextDrawer";
    export interface WithMultiContextDrawerOptions extends WithDrawerPhantomBaseOptions<MultiContextDrawer> {
    }
}

declare module "sabre-ngv-app/app/widgets/drawer/views/AbstractDrawer" {
    /// <ngv scope="public" />
    import {AbstractModel} from "sabre-ngv-app/app/AbstractModel";
    import {ContainerView} from "sabre-ngv-app/app/widgets/container/ContainerView";
    import {AbstractSection} from "sabre-ngv-app/app/widgets/drawer/views/sections/AbstractSection";
    import {AbstractDrawerOptions} from "sabre-ngv-app/app/widgets/drawer/views/AbstractDrawerOptions";
    /**
     *
     * Drawer widget class.
     *
     * Please refer to [Drawer Guide](#!/guide/drawer_guides_overview)
     *
     */
    export abstract class AbstractDrawer<TModel extends AbstractModel = AbstractModel> extends ContainerView<AbstractSection<TModel>> implements AbstractDrawerOptions {
        drawerGroups: string[];
        getDrawerContextModel(): TModel;
    }
}

declare module "sabre-ngv-app/app/widgets/drawer/views/AbstractDrawerOptions" {
    /// <ngv scope="public" />
    export interface AbstractDrawerOptions {
        drawerGroups: string[];
    }
}

declare module "sabre-ngv-app/app/widgets/drawer/views/CollapsibleDrawer" {
    /// <ngv scope="public" />
    import {AbstractModel} from "sabre-ngv-app/app/AbstractModel";
    import {AbstractDrawer} from "sabre-ngv-app/app/widgets/drawer/views/AbstractDrawer";
    import {CollapsibleDrawerOptions} from "sabre-ngv-app/app/widgets/drawer/views/CollapsibleDrawerOptions";
    import {JsonObject} from "sabre-ngv-app/_types";
    /**
     * Collapsible drawer
     */
    export class CollapsibleDrawer<TModel extends AbstractModel = AbstractModel> extends AbstractDrawer<TModel> {
        initialize(data?: JsonObject, options?: CollapsibleDrawerOptions): void;
        /**
         */
        protected _toggleWidgetsVisibility(e?: Event): void
        synchronizeArrowWithVisibility(): void
        getModel(): TModel
    }
}

declare module "sabre-ngv-app/app/widgets/drawer/views/CollapsibleDrawerOptions" {
    /// <ngv scope="public" />
    import {AbstractDrawerOptions} from "sabre-ngv-app/app/widgets/drawer/views/AbstractDrawerOptions";
    export interface CollapsibleDrawerOptions extends AbstractDrawerOptions {
        onOutputScrolled?: boolean,
        matrixOpenedByDefault?: boolean
    }
}

declare module "sabre-ngv-app/app/widgets/drawer/views/Drawer" {
    /// <ngv scope="public" />
    import {AbstractModel} from "sabre-ngv-app/app/AbstractModel";
    import {AbstractDrawer} from "sabre-ngv-app/app/widgets/drawer/views/AbstractDrawer";
    import {Closable} from "sabre-ngv-app/app/common/mixins/Closable";
    import {DrawerOptions} from "sabre-ngv-app/app/widgets/drawer/views/DrawerOptions";
    import {AbstractSection} from "sabre-ngv-app/app/widgets/drawer/views/sections/AbstractSection";
    /**
     */
    export class Drawer<TModel extends AbstractModel = AbstractModel> extends AbstractDrawer<TModel> implements Closable, DrawerOptions {
        /**
         * Opens drawer.
         * @fires drawer-open
         */
        open(): void
        /**
         * Closes drawer.
         * @fires drawer-closed
         */
        close(): void
        toggle(): void
        getActionSection(): AbstractSection<TModel>;
    }
}

declare module "sabre-ngv-app/app/widgets/drawer/views/DrawerOptions" {
    /// <ngv scope="public" />
    import {AbstractDrawerOptions} from "sabre-ngv-app/app/widgets/drawer/views/AbstractDrawerOptions";
    export interface DrawerOptions extends AbstractDrawerOptions {
    }
}

declare module "sabre-ngv-app/app/widgets/drawer/views/DrawerWithFilteredContextModel" {
    /// <ngv scope="public" />
    import {AbstractModel} from "sabre-ngv-app/app/AbstractModel";
    import {Drawer} from "sabre-ngv-app/app/widgets/drawer/views/Drawer";
    /**
     *
     * Drawer widget class with filtered context model.
     * Allows to filter out data model for tile widgets added to specific drawer group.
     *
     */
    export abstract class DrawerWithFilteredContextModel<TModel extends AbstractModel = AbstractModel> extends Drawer<TModel> {
        private filteredExtensions: string[];
        protected addDrawerGroupToFilter(drawerGroup: string);
    }
}

declare module "sabre-ngv-app/app/widgets/drawer/views/elements/Tile" {
    /// <ngv scope="public" />
    import {AbstractModel} from "sabre-ngv-app/app/AbstractModel";
    import {AbstractAction} from "sabre-ngv-app/app/common/views/AbstractAction";
    import {StringTileContent, TileContent} from "sabre-ngv-app/app/widgets/drawer/views/elements/TileContent";
    /**
     *
     * Generic Tile widget
     */
    export class Tile<TModel extends AbstractModel = AbstractModel> extends AbstractAction<TModel> {
        /**
         * Set data to be displayed in tile.
         * @param model - Data to be displayed.
         */
        setDataContent(model: StringTileContent | TileContent): void;
        /**
         * Set content to be displayed in tile when
         * data can not be obtained from model
         * @param model - obtained object with no data available.
         */
        setNoDataContent(model: StringTileContent | TileContent): void;
    }
}

declare module "sabre-ngv-app/app/widgets/drawer/views/elements/TileContent" {
    /// <ngv scope="public" />
    export type StringTileContent = string;
    export interface TileContent {
        caption?: string;
        contentTitle?: string;
        footer?: string;
        contents: Array<{
            title?: string;
            content: string;
        }>
    }
}

declare module "sabre-ngv-app/app/widgets/drawer/views/elements/TileOptions" {
    /// <ngv scope="public" />
    import {AbstractActionOptions} from "sabre-ngv-app/app/common/views/AbstractActionOptions";
    export interface TileOptions extends AbstractActionOptions {
    }
}

declare module "sabre-ngv-app/app/widgets/drawer/views/MultiContextDrawer" {
    /// <ngv scope="public" />
    import {AbstractModel} from "sabre-ngv-app/app/AbstractModel";
    import {Drawer} from "sabre-ngv-app/app/widgets/drawer/views/Drawer";
    import {AbstractView} from "sabre-ngv-app/app/AbstractView";
    import {Closable} from "sabre-ngv-app/app/common/mixins/Closable";
    import {MultiContextDrawerOptions} from "sabre-ngv-app/app/widgets/drawer/views/MultiContextDrawerOptions";
    import {SearchPath, ViewDescriptor} from "sabre-ngv-app/_types";
    /**
     */
    export class MultiContextDrawer<TModel extends AbstractModel = AbstractModel, TDrawer extends Drawer = Drawer> extends AbstractView<TModel> implements Closable, MultiContextDrawerOptions {
        contextModelsPath: SearchPath;
        contextModelAttribute: string;
        drawerDescriptor: ViewDescriptor<TDrawer>;
        drawerGroups: string[];
        /**
         * Opens drawer.
         * @fires drawer-open
         */
        open(): void
        /**
         * Closes drawer.
         * @fires drawer-closed
         */
        close(): void
        toggle(): void
    }
}

declare module "sabre-ngv-app/app/widgets/drawer/views/MultiContextDrawerOptions" {
    /// <ngv scope="public" />
    import {AbstractDrawerOptions} from "sabre-ngv-app/app/widgets/drawer/views/AbstractDrawerOptions";
    import {Drawer} from "sabre-ngv-app/app/widgets/drawer/views/Drawer";
    import {ViewDescriptor, SearchPath} from "sabre-ngv-app/_types";
    export interface MultiContextDrawerOptions extends AbstractDrawerOptions {
        contextModelsPath: SearchPath;
        contextModelAttribute: string;
        drawerDescriptor: ViewDescriptor<Drawer>;
        placeholderHeight?: number;
    }
}

declare module "sabre-ngv-app/app/widgets/drawer/views/sections/AbstractSection" {
    /// <ngv scope="public" />
    import {AbstractModel} from "sabre-ngv-app/app/AbstractModel";
    import {ContainerView} from "sabre-ngv-app/app/widgets/container/ContainerView";
    import {AbstractView} from "sabre-ngv-app/app/AbstractView";
    import {Class} from "sabre-ngv-app/_types";
    export abstract class AbstractSection<TModel extends AbstractModel = AbstractModel> extends ContainerView<AbstractView<TModel>> {
        apiEvents: {
            MODELS_PROPAGATED: 'models-propagated'
        };
        getItemByClassName<T>(className: Class<T>): T;
    }
}

declare module "sabre-ngv-app/app/widgets/pnrAdd/models/PnrAddSubmitter" {
    /// <ngv scope="public" />
    import {AbstractModel} from 'sabre-ngv-app/app/AbstractModel';
    export class PnrAddSubmitter extends AbstractModel {
        constructor(options: any)
        submit(): any;
    }
}

declare module "sabre-ngv-app/app/widgets/pnrAdd/views/PnrAdd" {
    /// <ngv scope="public" />
    import {AbstractView} from 'sabre-ngv-app/app/AbstractView';
    import {CommandFlow} from 'sabre-ngv-app/app/common/data/dto/CommandFlow';
    import {PnrAddSecureFlightViewOptions} from 'sabre-ngv-app/app/widgets/pnrAdd/views/securityViews/PnrAddSecureFlightViewOptions';
    export class PnrAdd extends AbstractView {
        constructor(options?: PnrAddSecureFlightViewOptions);
        _validateForm(): boolean;
    }
}

declare module "sabre-ngv-app/app/widgets/pnrAdd/views/securityViews/PnrAddSecureFlightViewOptions" {
    /// <ngv scope="public" />
    import {CommandFlow} from 'sabre-ngv-app/app/common/data/dto/CommandFlow';
    import {AbstractViewOptions} from 'sabre-ngv-app/app/AbstractViewOptions';
    import {NgvPromise} from 'sabre-ngv-app/_types';
    export interface PnrAddSecureFlightViewOptions extends AbstractViewOptions {
        afterSecureFlightAdded(): NgvPromise<CommandFlow>;
        [key: string]: any;
    }
}

declare module "sabre-ngv-app/_types" {
    /// <reference path="./_underscore.d.ts" />
    /// <ngv scope="public" />
    import {AbstractViewOptions} from "sabre-ngv-app/app/AbstractViewOptions";
    import {AbstractModelOptions} from "sabre-ngv-app/app/AbstractModelOptions";
    import {AbstractCollectionOptions} from "sabre-ngv-app/app/AbstractCollectionOptions";
    import {AbstractActionOptions} from "sabre-ngv-app/app/common/views/AbstractActionOptions";
    import {AbstractView} from "sabre-ngv-app/app/AbstractView";
    import {AbstractModel} from "sabre-ngv-app/app/AbstractModel";
    import {AbstractObjectOptions} from "sabre-ngv-app/app/AbstractObjectOptions";
    import {AbstractObject} from "sabre-ngv-app/app/AbstractObject";
    import {AbstractService} from "sabre-ngv-app/app/services/impl/AbstractService";
    import {AbstractServiceOptions} from "sabre-ngv-app/app/services/impl/AbstractServiceOptions";
    import {AbstractCollection} from "sabre-ngv-app/app/AbstractCollection";
    import * as JQuery from "jquery";
    import * as moment from "moment";
    import * as React from "react";
    import {EnhancedResponseData} from "sabre-ngv-app/app/common/data/dto/EnhancedResponseData";
    /* DESCRIPTOR */
    export interface AnyDescriptor {
        mixins?: ClassName[];
    }
    export interface LazyDescriptor extends AnyDescriptor {
        className: ShortLazyDescriptor;
    }
    export type ShortLazyDescriptor = ClassName;
    export interface DirectDescriptor<TClass> extends AnyDescriptor {
        class: ShortDirectDescriptor<TClass>;
    }
    export type ShortDirectDescriptor<TClass> = Class<TClass>;
    export type Descriptor<TClass, TOptions = {}> =
        | (LazyDescriptor & TOptions)
        | ShortLazyDescriptor
        | (DirectDescriptor<TClass> & TOptions)
        | ShortDirectDescriptor<TClass>
    export type ViewDescriptor<TClass extends AbstractView = AbstractView, TOptions extends AbstractViewOptions = AbstractViewOptions> = Descriptor<TClass, TOptions>;
    export type ModelDescriptor<TClass extends AbstractModel = AbstractModel, TOptions extends AbstractModelOptions = AbstractModelOptions> = Descriptor<TClass, TOptions>;
    export type PlainWidget = AbstractView<AbstractModel>;
    /* NGV TYPES */
    /**
     * Base type for React's props used in SRW3.0
     */
    export interface NgvProps extends KeyValueMap {
    }
    export interface NgvResponseProps extends NgvProps {
        model: EnhancedResponseData
    }
    export type NgvComponent<TProps extends NgvProps = NgvProps> =
        | React.ComponentType<TProps>
        | React.ClassicComponentClass<TProps>
    export type NgvResponseComponent<TProps extends NgvResponseProps = NgvResponseProps> = NgvComponent<TProps>;
    export type ModelData = JsonObject;
    export type ModelDataList = ModelData[];
    export type NgvInitOptions =
        | AbstractViewOptions
        | AbstractModelOptions
        | AbstractCollectionOptions
        | AbstractActionOptions
    export interface NgvViewClass extends Class<AbstractView> {
        new(options?: AbstractViewOptions): AbstractView;
    }
    export interface NgvModelClass extends Class<AbstractModel> {
        new(data?: ModelData, options?: AbstractModelOptions): AbstractModel;
    }
    export interface NgvObjectClass extends NgvModelClass {
        new(options?: AbstractObjectOptions): AbstractObject;
    }
    export interface NgvServiceClass<T extends AbstractService = AbstractService> extends NgvObjectClass {
        new(options?: AbstractServiceOptions): T;
        SERVICE_NAME: string;
    }
    export interface NgvServiceInterface<T extends AbstractService = AbstractService> extends AbstractClass {
        SERVICE_NAME: string;
    }
    export type NgvServiceType<T extends AbstractService = AbstractService> =
        | NgvServiceClass<T>
        | (Class<T> & { SERVICE_NAME: string })
        | NgvServiceInterface<T>
    export interface NgvCollectionClass extends Class<AbstractCollection> {
        new(data?: ModelDataList, options?: AbstractCollectionOptions): AbstractCollection;
    }
    export type NgvClass =
        | NgvViewClass
        | NgvModelClass
        | NgvObjectClass
        | NgvServiceClass
        | NgvCollectionClass
    export type TimezoneLiteral = string;
    export type ClassName = string;
    export type SearchPath = string;
    export type EventName = string;
    export type CssClassName = string;
    export interface NgvPromise<T> extends JQueryPromise<T> {
    }
    export type Promisable<T> =
        | Promise<T>
        | NgvPromise<T>
        | T
    // listing modes exposed in ModeService only
    export type NgvMode =
        | 'standard'
        | 'layer'
        | 'multi-response-display'
        | 'pf-key'
        | 'pf-key-edit'
        | 'mask'
        | 'memo-area'
        | 'novice-input'
        | 'expert-input'
        | 'novice-output'
        | 'expert-output'
        | 'sabre-keys'
        | string
    /* JSON TYPES */
    export type JsonType =
        | JsonPrimitive
        | JsonArray
        | JsonObject
    export type JsonPrimitive =
        | string
        | number
        | boolean
        | null
    export interface JsonObject {
        [key: string]: JsonType
    }
    export interface JsonArray {
        [key: number]: JsonType
    }
    export interface KeyValueMap<V = any> {
        [key: string]: V;
    }
    /* JQUERY */
    export type JQuerySource = string | JQuery | Element;
    /* MOMENT */
    export type MomentSource = Date | moment.Moment | string;
    /* JS */
    export interface Map<T> {
        [key: string]: T
    }
    export interface AbstractClass extends Function {
    }
    export interface Class<T> extends AbstractClass {
        new(...args: any[]): T;
    }
    export type TimeoutID = number;
    export interface Function0<TResult> extends Function {
        (): TResult;
    }
    export interface Function1<T1, TResult> extends Function {
        (arg1: T1): TResult;
    }
    export interface Function2<T1, T2, TResult> extends Function {
        (arg1: T1, arg2: T2): TResult;
    }
    export interface Function3<T1, T2, T3, TResult> extends Function {
        (arg1: T1, arg2: T2, arg3: T3): TResult;
    }
    export interface Function4<T1, T2, T3, T4, TResult> extends Function {
        (arg1: T1, arg2: T2, arg3: T3, arg4: T4): TResult;
    }
    export interface Function5<T1, T2, T3, T4, T5, TResult> extends Function {
        (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5): TResult;
    }
    export interface Function6<T1, T2, T3, T4, T5, T6, TResult> extends Function {
        (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6): TResult;
    }
    export interface Function7<T1, T2, T3, T4, T5, T6, T7, TResult> extends Function {
        (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7): TResult;
    }
    export interface Function8<T1, T2, T3, T4, T5, T6, T7, T8, TResult> extends Function {
        (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8): TResult;
    }
    export type AnyFunction<TResult = any> = (...args: any[]) => TResult
        | Function
        | Function0<TResult>
        | Function1<any, TResult>
        | Function2<any, any, TResult>
        | Function3<any, any, any, TResult>
        | Function4<any, any, any, any, TResult>
        | Function5<any, any, any, any, any, TResult>
        | Function6<any, any, any, any, any, any, TResult>
        | Function7<any, any, any, any, any, any, any, TResult>
        | Function8<any, any, any, any, any, any, any, any, TResult>;
    export type Digit =
        | 0
        | 1
        | 2
        | 3
        | 4
        | 5
        | 6
        | 7
        | 8
        | 9
    export type DigitCharacter =
        | '0'
        | '1'
        | '2'
        | '3'
        | '4'
        | '5'
        | '6'
        | '7'
        | '8'
        | '9'
    export type Letter =
        | 'a'
        | 'b'
        | 'c'
        | 'd'
        | 'e'
        | 'f'
        | 'g'
        | 'h'
        | 'i'
        | 'j'
        | 'k'
        | 'l'
        | 'm'
        | 'n'
        | 'o'
        | 'p'
        | 'q'
        | 'r'
        | 's'
        | 't'
        | 'u'
        | 'v'
        | 'w'
        | 'x'
        | 'y'
        | 'z'
    export type AlphaNumeric =
        | Letter
        | DigitCharacter
    export type FnKey =
        | 'f1'
        | 'f2'
        | 'f3'
        | 'f4'
        | 'f5'
        | 'f6'
        | 'f7'
        | 'f8'
        | 'f9'
        | 'f10'
        | 'f11'
        | 'f12'
        | 'f13'
        | 'f14'
        | 'f15'
        | 'f16'
        | 'f17'
        | 'f18'
        | 'f19'
        | 'f20'
        | 'f21'
        | 'f22'
        | 'f23'
        | 'f24'
    /* BOOTSTRAP CSS TYPES */
    export type AlertCssType =
        | 'danger'
        | 'info'
        | 'success'
        | 'warning';
    export type LayerWidget =
        | ViewDescriptor
        | AbstractView
        | React.ComponentType
}

/// <ngv scope="public" />

// Type definitions for Underscore 1.8
// Project: http://underscorejs.org/
// Definitions by: Boris Yankov <https://github.com/borisyankov/>, Josh Baldwin <https://github.com/jbaldwin/>, Christopher Currens <https://github.com/ccurrens/>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

/* MODIFIED FOR NGV EXTENSIONS */

declare const _: _.UnderscoreStatic;

declare module "underscore" {
    export = _;
}

declare module _ {
    /**
     * underscore.js _.throttle options.
     **/
    interface ThrottleSettings {

        /**
         * If you'd like to disable the leading-edge call, pass this as false.
         **/
        leading?: boolean;

        /**
         * If you'd like to disable the execution on the trailing-edge, pass false.
         **/
        trailing?: boolean;
    }

    /**
     * underscore.js template settings, set templateSettings or pass as an argument
     * to 'template()' to override defaults.
     **/
    interface TemplateSettings {
        /**
         * Default value is '/<%([\s\S]+?)%>/g'.
         **/
        evaluate?: RegExp;

        /**
         * Default value is '/<%=([\s\S]+?)%>/g'.
         **/
        interpolate?: RegExp;

        /**
         * Default value is '/<%-([\s\S]+?)%>/g'.
         **/
        escape?: RegExp;

        /**
         * By default, 'template()' places the values from your data in the local scope via the 'with' statement.
         * However, you can specify a single variable name with this setting.
         **/
        variable?: string;
    }

    interface Collection<T> {
    }

    // Common interface between Arrays and jQuery objects
    interface List<T> extends Collection<T> {
        [index: number]: T;
        length: number;
    }

    interface Dictionary<T> extends Collection<T> {
        [index: string]: T;
    }

    interface ListIterator<T, TResult> {
        (value: T, index: number, list: List<T>): TResult;
    }

    interface ObjectIterator<T, TResult> {
        (element: T, key: string, list: Dictionary<T>): TResult;
    }

    type IterateePropertyShorthand = string | number;

    type IterateeMatcherShorthand<T> = Dictionary<T>;

    interface MemoIterator<T, TResult> {
        (prev: TResult, curr: T, index: number, list: List<T>): TResult;
    }

    interface MemoObjectIterator<T, TResult> {
        (prev: TResult, curr: T, key: string, list: Dictionary<T>): TResult;
    }

    interface Cancelable {
        cancel(): void;
    }

    interface UnderscoreStatic {
        /**
         * Underscore OOP Wrapper, all Underscore functions that take an object
         * as the first parameter can be invoked through this function.
         * @param key First argument to Underscore object functions.
         **/
        <T>(value: _.Dictionary<T>): Underscore<T>;
        <T>(value: Array<T>): Underscore<T>;
        <T>(value: T): Underscore<T>;

        /* *************
         * Collections *
         ************* */

        /**
         * Iterates over a list of elements, yielding each in turn to an iterator function. The iterator is
         * bound to the context object, if one is passed. Each invocation of iterator is called with three
         * arguments: (element, index, list). If list is a JavaScript object, iterator's arguments will be
         * (value, key, object). Delegates to the native forEach function if it exists.
         * @param list Iterates over this list of elements.
         * @param iterator Iterator function for each element `list`.
         * @param context 'this' object in `iterator`, optional.
         **/
        each<T>(list: _.List<T>,
                iterator: _.ListIterator<T, void>,
                context?: any): _.List<T>;

        /**
         * @see _.each
         * @param object Iterates over properties of this object.
         * @param iterator Iterator function for each property on `object`.
         * @param context 'this' object in `iterator`, optional.
         **/
        each<T>(object: _.Dictionary<T>,
                iterator: _.ObjectIterator<T, void>,
                context?: any): _.Dictionary<T>;

        /**
         * @see _.each
         **/
        forEach<T>(list: _.List<T>,
                   iterator: _.ListIterator<T, void>,
                   context?: any): _.List<T>;

        /**
         * @see _.each
         **/
        forEach<T>(object: _.Dictionary<T>,
                   iterator: _.ObjectIterator<T, void>,
                   context?: any): _.Dictionary<T>;

        /**
         * Produces a new array of values by mapping each value in list through a transformation function
         * (iterator). If the native map method exists, it will be used instead. If list is a JavaScript
         * object, iterator's arguments will be (value, key, object).
         * @param list Maps the elements of this array.
         * @param iterator Map iterator function for each element in `list`.
         * @param context `this` object in `iterator`, optional.
         * @return The mapped array result.
         **/
        map<T, TResult>(list: _.List<T>,
                        iterator: _.ListIterator<T, TResult>,
                        context?: any): TResult[];

        map<T>(list: _.List<T>,
               iterator: _.IterateePropertyShorthand,
               context?: any): T[];

        map<T>(list: _.List<T>,
               iterator: _.IterateeMatcherShorthand<any>,
               context?: any): boolean[];

        /**
         * @see _.map
         * @param object Maps the properties of this object.
         * @param iterator Map iterator function for each property on `object`.
         * @param context `this` object in `iterator`, optional.
         * @return The mapped object result.
         **/
        map<T, TResult>(object: _.Dictionary<T>,
                        iterator: _.ObjectIterator<T, TResult>,
                        context?: any): TResult[];

        /**
         * @see _.map
         **/
        collect: typeof _.map;

        /**
         * Also known as inject and foldl, reduce boils down a list of values into a single value.
         * Memo is the initial state of the reduction, and each successive step of it should be
         * returned by iterator. The iterator is passed four arguments: the memo, then the value
         * and index (or key) of the iteration, and finally a reference to the entire list.
         * @param list Reduces the elements of this array.
         * @param iterator Reduce iterator function for each element in `list`.
         * @param memo Initial reduce state.
         * @param context `this` object in `iterator`, optional.
         * @return Reduced object result.
         **/
        reduce<T, TResult>(list: _.List<T>,
                           iterator: _.MemoIterator<T, TResult>,
                           memo?: TResult,
                           context?: any): TResult;

        reduce<T, TResult>(list: _.Dictionary<T>,
                           iterator: _.MemoObjectIterator<T, TResult>,
                           memo?: TResult,
                           context?: any): TResult;

        /**
         * @see _.reduce
         **/
        inject<T, TResult>(list: _.List<T>,
                           iterator: _.MemoIterator<T, TResult>,
                           memo?: TResult,
                           context?: any): TResult;

        inject<T, TResult>(list: _.Dictionary<T>,
                           iterator: _.MemoObjectIterator<T, TResult>,
                           memo?: TResult,
                           context?: any): TResult;

        /**
         * @see _.reduce
         **/
        foldl<T, TResult>(list: _.Collection<T>,
                          iterator: _.MemoIterator<T, TResult>,
                          memo?: TResult,
                          context?: any): TResult;

        /**
         * The right-associative version of reduce. Delegates to the JavaScript 1.8 version of
         * reduceRight, if it exists. `foldr` is not as useful in JavaScript as it would be in a
         * language with lazy evaluation.
         * @param list Reduces the elements of this array.
         * @param iterator Reduce iterator function for each element in `list`.
         * @param memo Initial reduce state.
         * @param context `this` object in `iterator`, optional.
         * @return Reduced object result.
         **/
        reduceRight<T, TResult>(list: _.Collection<T>,
                                iterator: _.MemoIterator<T, TResult>,
                                memo?: TResult,
                                context?: any): TResult;

        /**
         * @see _.reduceRight
         **/
        foldr<T, TResult>(list: _.Collection<T>,
                          iterator: _.MemoIterator<T, TResult>,
                          memo?: TResult,
                          context?: any): TResult;

        /**
         * Looks through each value in the list, returning the first one that passes a truth
         * test (iterator). The function returns as soon as it finds an acceptable element,
         * and doesn't traverse the entire list.
         * @param list Searches for a value in this list.
         * @param iterator Search iterator function for each element in `list`.
         * @param context `this` object in `iterator`, optional.
         * @return The first acceptable found element in `list`, if nothing is found undefined/null is returned.
         **/
        find<T>(list: _.List<T>,
                iterator: _.ListIterator<T, boolean>,
                context?: any): T | undefined;

        /**
         * @see _.find
         **/
        find<T>(object: _.Dictionary<T>,
                iterator: _.ObjectIterator<T, boolean>,
                context?: any): T | undefined;

        /**
         * @see _.find
         **/
        find<T, U extends {}>(object: _.List<T> | _.Dictionary<T>,
                              iterator: U): T | undefined;

        /**
         * @see _.find
         **/
        find<T>(object: _.List<T> | _.Dictionary<T>,
                iterator: string): T | undefined;

        /**
         * @see _.find
         **/
        detect<T>(list: _.List<T>,
                  iterator: _.ListIterator<T, boolean>,
                  context?: any): T | undefined;

        /**
         * @see _.find
         **/
        detect<T>(object: _.Dictionary<T>,
                  iterator: _.ObjectIterator<T, boolean>,
                  context?: any): T | undefined;

        /**
         * @see _.find
         **/
        detect<T, U extends {}>(object: _.List<T> | _.Dictionary<T>,
                                iterator: U): T | undefined;

        /**
         * @see _.find
         **/
        detect<T>(object: _.List<T> | _.Dictionary<T>,
                  iterator: string): T | undefined;

        /**
         * Looks through each value in the list, returning an array of all the values that pass a truth
         * test (iterator). Delegates to the native filter method, if it exists.
         * @param list Filter elements out of this list.
         * @param iterator Filter iterator function for each element in `list`.
         * @param context `this` object in `iterator`, optional.
         * @return The filtered list of elements.
         **/
        filter<T>(list: _.List<T>,
                  iterator: _.ListIterator<T, boolean>,
                  context?: any): T[];

        /**
         * @see _.filter
         **/
        filter<T>(object: _.Dictionary<T>,
                  iterator: _.ObjectIterator<T, boolean>,
                  context?: any): T[];

        /**
         * @see _.filter
         **/
        select<T>(list: _.List<T>,
                  iterator: _.ListIterator<T, boolean>,
                  context?: any): T[];

        /**
         * @see _.filter
         **/
        select<T>(object: _.Dictionary<T>,
                  iterator: _.ObjectIterator<T, boolean>,
                  context?: any): T[];

        /**
         * Looks through each value in the list, returning an array of all the values that contain all
         * of the key-value pairs listed in properties.
         * @param list List to match elements again `properties`.
         * @param properties The properties to check for on each element within `list`.
         * @return The elements within `list` that contain the required `properties`.
         **/
        where<T, U extends {}>(list: _.List<T>,
                               properties: U): T[];

        /**
         * Looks through the list and returns the first value that matches all of the key-value pairs listed in properties.
         * @param list Search through this list's elements for the first object with all `properties`.
         * @param properties Properties to look for on the elements within `list`.
         * @return The first element in `list` that has all `properties`.
         **/
        findWhere<T, U extends {}>(list: _.List<T>,
                                   properties: U): T | undefined;

        /**
         * Returns the values in list without the elements that the truth test (iterator) passes.
         * The opposite of filter.
         * Return all the elements for which a truth test fails.
         * @param list Reject elements within this list.
         * @param iterator Reject iterator function for each element in `list`.
         * @param context `this` object in `iterator`, optional.
         * @return The rejected list of elements.
         **/
        reject<T>(list: _.List<T>,
                  iterator: _.ListIterator<T, boolean>,
                  context?: any): T[];

        /**
         * @see _.reject
         **/
        reject<T>(object: _.Dictionary<T>,
                  iterator: _.ObjectIterator<T, boolean>,
                  context?: any): T[];

        /**
         * Returns true if all of the values in the list pass the iterator truth test. Delegates to the
         * native method every, if present.
         * @param list Truth test against all elements within this list.
         * @param iterator Trust test iterator function for each element in `list`.
         * @param context `this` object in `iterator`, optional.
         * @return True if all elements passed the truth test, otherwise false.
         **/
        every<T>(list: _.List<T>,
                 iterator?: _.ListIterator<T, boolean>,
                 context?: any): boolean;

        /**
         * @see _.every
         **/
        every<T>(list: _.Dictionary<T>,
                 iterator?: _.ObjectIterator<T, boolean>,
                 context?: any): boolean;

        /**
         * @see _.every
         **/
        all<T>(list: _.List<T>,
               iterator?: _.ListIterator<T, boolean>,
               context?: any): boolean;

        /**
         * @see _.every
         **/
        all<T>(list: _.Dictionary<T>,
               iterator?: _.ObjectIterator<T, boolean>,
               context?: any): boolean;

        /**
         * Returns true if any of the values in the list pass the iterator truth test. Short-circuits and
         * stops traversing the list if a true element is found. Delegates to the native method some, if present.
         * @param list Truth test against all elements within this list.
         * @param iterator Trust test iterator function for each element in `list`.
         * @param context `this` object in `iterator`, optional.
         * @return True if any elements passed the truth test, otherwise false.
         **/
        some<T>(list: _.List<T>,
                iterator?: _.ListIterator<T, boolean>,
                context?: any): boolean;

        /**
         * @see _.some
         **/
        some<T>(object: _.Dictionary<T>,
                iterator?: _.ObjectIterator<T, boolean>,
                context?: any): boolean;

        /**
         * @see _.some
         **/
        any<T>(list: _.List<T>,
               iterator?: _.ListIterator<T, boolean>,
               context?: any): boolean;

        /**
         * @see _.some
         **/
        any<T>(object: _.Dictionary<T>,
               iterator?: _.ObjectIterator<T, boolean>,
               context?: any): boolean;

        any<T>(list: _.List<T>,
               value: T): boolean;

        /**
         * Returns true if the value is present in the list. Uses indexOf internally,
         * if list is an Array.
         * @param list Checks each element to see if `value` is present.
         * @param value The value to check for within `list`.
         * @return True if `value` is present in `list`, otherwise false.
         **/
        contains<T>(list: _.List<T>,
                    value: T,
                    fromIndex?: number): boolean;

        /**
         * @see _.contains
         **/
        contains<T>(object: _.Dictionary<T>,
                    value: T): boolean;

        /**
         * @see _.contains
         **/
        include<T>(list: _.Collection<T>,
                   value: T,
                   fromIndex?: number): boolean;

        /**
         * @see _.contains
         **/
        include<T>(object: _.Dictionary<T>,
                   value: T): boolean;

        /**
         * @see _.contains
         **/
        includes<T>(list: _.Collection<T>,
                    value: T,
                    fromIndex?: number): boolean;

        /**
         * @see _.contains
         **/
        includes<T>(object: _.Dictionary<T>,
                    value: T): boolean;

        /**
         * Calls the method named by methodName on each value in the list. Any extra arguments passed to
         * invoke will be forwarded on to the method invocation.
         * @param list The element's in this list will each have the method `methodName` invoked.
         * @param methodName The method's name to call on each element within `list`.
         * @param arguments Additional arguments to pass to the method `methodName`.
         **/
        invoke<T extends {}>(list: _.List<T>,
                             methodName: string,
                             ...args: any[]): any;

        /**
         * A convenient version of what is perhaps the most common use-case for map: extracting a list of
         * property values.
         * @param list The list to pluck elements out of that have the property `propertyName`.
         * @param propertyName The property to look for on each element within `list`.
         * @return The list of elements within `list` that have the property `propertyName`.
         **/
        pluck<T extends {}>(list: _.List<T>,
                            propertyName: string): any[];

        /**
         * Returns the maximum value in list.
         * @param list Finds the maximum value in this list.
         * @return Maximum value in `list`.
         **/
        max(list: _.List<number>): number;

        /**
         * @see _.max
         */
        max(object: _.Dictionary<number>): number;

        /**
         * Returns the maximum value in list. If iterator is passed, it will be used on each value to generate
         * the criterion by which the value is ranked.
         * @param list Finds the maximum value in this list.
         * @param iterator Compares each element in `list` to find the maximum value.
         * @param context `this` object in `iterator`, optional.
         * @return The maximum element within `list`.
         **/
        max<T>(list: _.List<T>,
               iterator?: _.ListIterator<T, any>,
               context?: any): T;

        /**
         * @see _.max
         */
        max<T>(list: _.Dictionary<T>,
               iterator?: _.ObjectIterator<T, any>,
               context?: any): T;

        /**
         * Returns the minimum value in list.
         * @param list Finds the minimum value in this list.
         * @return Minimum value in `list`.
         **/
        min(list: _.List<number>): number;

        /**
         * @see _.min
         */
        min(o: _.Dictionary<number>): number;

        /**
         * Returns the minimum value in list. If iterator is passed, it will be used on each value to generate
         * the criterion by which the value is ranked.
         * @param list Finds the minimum value in this list.
         * @param iterator Compares each element in `list` to find the minimum value.
         * @param context `this` object in `iterator`, optional.
         * @return The minimum element within `list`.
         **/
        min<T>(list: _.List<T>,
               iterator?: _.ListIterator<T, any>,
               context?: any): T;

        /**
         * @see _.min
         */
        min<T>(list: _.Dictionary<T>,
               iterator?: _.ObjectIterator<T, any>,
               context?: any): T;

        /**
         * Returns a sorted copy of list, ranked in ascending order by the results of running each value
         * through iterator. Iterator may also be the string name of the property to sort by (eg. length).
         * @param list Sorts this list.
         * @param iterator Sort iterator for each element within `list`.
         * @param context `this` object in `iterator`, optional.
         * @return A sorted copy of `list`.
         **/
        sortBy<T, TSort>(list: _.List<T>,
                         iterator?: _.ListIterator<T, TSort>,
                         context?: any): T[];

        /**
         * @see _.sortBy
         * @param iterator Sort iterator for each element within `list`.
         **/
        sortBy<T>(list: _.List<T>,
                  iterator: string,
                  context?: any): T[];

        /**
         * Splits a collection into sets, grouped by the result of running each value through iterator.
         * If iterator is a string instead of a function, groups by the property named by iterator on
         * each of the values.
         * @param list Groups this list.
         * @param iterator Group iterator for each element within `list`, return the key to group the element by.
         * @param context `this` object in `iterator`, optional.
         * @return An object with the group names as properties where each property contains the grouped elements from `list`.
         **/
        groupBy<T>(list: _.List<T>,
                   iterator?: _.ListIterator<T, any>,
                   context?: any): _.Dictionary<T[]>;

        /**
         * @see _.groupBy
         * @param iterator Property on each object to group them by.
         **/
        groupBy<T>(list: _.List<T>,
                   iterator: string,
                   context?: any): _.Dictionary<T[]>;

        /**
         * Given a `list`, and an `iterator` function that returns a key for each element in the list (or a property name),
         * returns an object with an index of each item.  Just like _.groupBy, but for when you know your keys are unique.
         **/
        indexBy<T>(list: _.List<T>,
                   iterator: _.ListIterator<T, any>,
                   context?: any): _.Dictionary<T>;

        /**
         * @see _.indexBy
         * @param iterator Property on each object to index them by.
         **/
        indexBy<T>(list: _.List<T>,
                   iterator: string,
                   context?: any): _.Dictionary<T>;

        /**
         * Sorts a list into groups and returns a count for the number of objects in each group. Similar
         * to groupBy, but instead of returning a list of values, returns a count for the number of values
         * in that group.
         * @param list Group elements in this list and then count the number of elements in each group.
         * @param iterator Group iterator for each element within `list`, return the key to group the element by.
         * @param context `this` object in `iterator`, optional.
         * @return An object with the group names as properties where each property contains the number of elements in that group.
         **/
        countBy<T>(list: _.List<T>,
                   iterator?: _.ListIterator<T, any>,
                   context?: any): _.Dictionary<number>;

        /**
         * @see _.countBy
         * @param iterator Function name
         **/
        countBy<T>(list: _.List<T>,
                   iterator: string,
                   context?: any): _.Dictionary<number>;

        /**
         * Returns a shuffled copy of the list, using a version of the Fisher-Yates shuffle.
         * @param list List to shuffle.
         * @return Shuffled copy of `list`.
         **/
        shuffle<T>(list: _.Collection<T>): T[];

        /**
         * Produce a random sample from the `list`.  Pass a number to return `n` random elements from the list.  Otherwise a single random item will be returned.
         * @param list List to sample.
         * @return Random sample of `n` elements in `list`.
         **/
        sample<T>(list: _.Collection<T>, n: number): T[];

        /**
         * @see _.sample
         **/
        sample<T>(list: _.Collection<T>): T;

        /**
         * Converts the list (anything that can be iterated over), into a real Array. Useful for transmuting
         * the arguments object.
         * @param list object to transform into an array.
         * @return `list` as an array.
         **/
        toArray<T>(list: _.Collection<T>): T[];

        /**
         * Return the number of values in the list.
         * @param list Count the number of values/elements in this list.
         * @return Number of values in `list`.
         **/
        size<T>(list: _.Collection<T>): number;

        /**
         * Split array into two arrays:
         * one whose elements all satisfy predicate and one whose elements all do not satisfy predicate.
         * @param array Array to split in two.
         * @param iterator Filter iterator function for each element in `array`.
         * @param context `this` object in `iterator`, optional.
         * @return Array where Array[0] are the elements in `array` that satisfies the predicate, and Array[1] the elements that did not.
         **/
        partition<T>(array: Array<T>,
                     iterator: _.ListIterator<T, boolean>,
                     context?: any): T[][];

        /*********
         * Arrays *
         **********/

        /**
         * Returns the first element of an array. Passing n will return the first n elements of the array.
         * @param array Retrieves the first element of this array.
         * @return Returns the first element of `array`.
         **/
        first<T>(array: _.List<T>): T | undefined;

        /**
         * @see _.first
         * @param n Return more than one element from `array`.
         **/
        first<T>(array: _.List<T>,
                 n: number): T[];

        /**
         * @see _.first
         **/
        head<T>(array: _.List<T>): T | undefined;

        /**
         * @see _.first
         **/
        head<T>(array: _.List<T>,
                n: number): T[];

        /**
         * @see _.first
         **/
        take<T>(array: _.List<T>): T;

        /**
         * @see _.first
         **/
        take<T>(array: _.List<T>,
                n: number): T[];

        /**
         * Returns everything but the last entry of the array. Especially useful on the arguments object.
         * Pass n to exclude the last n elements from the result.
         * @param array Retrieve all elements except the last `n`.
         * @param n Leaves this many elements behind, optional.
         * @return Returns everything but the last `n` elements of `array`.
         **/
        initial<T>(array: _.List<T>,
                   n?: number): T[];

        /**
         * Returns the last element of an array. Passing n will return the last n elements of the array.
         * @param array Retrieves the last element of this array.
         * @return Returns the last element of `array`.
         **/
        last<T>(array: _.List<T>): T | undefined;

        /**
         * @see _.last
         * @param n Return more than one element from `array`.
         **/
        last<T>(array: _.List<T>,
                n: number): T[];

        /**
         * Returns the rest of the elements in an array. Pass an index to return the values of the array
         * from that index onward.
         * @param array The array to retrieve all but the first `index` elements.
         * @param n The index to start retrieving elements forward from, optional, default = 1.
         * @return Returns the elements of `array` from `index` to the end of `array`.
         **/
        rest<T>(array: _.List<T>,
                n?: number): T[];

        /**
         * @see _.rest
         **/
        tail<T>(array: _.List<T>,
                n?: number): T[];

        /**
         * @see _.rest
         **/
        drop<T>(array: _.List<T>,
                n?: number): T[];

        /**
         * Returns a copy of the array with all falsy values removed. In JavaScript, false, null, 0, "",
         * undefined and NaN are all falsy.
         * @param array Array to compact.
         * @return Copy of `array` without false values.
         **/
        compact<T>(array: _.List<T>): T[];

        /**
         * Flattens a nested array (the nesting can be to any depth). If you pass shallow, the array will
         * only be flattened a single level.
         * @param array The array to flatten.
         * @param shallow If true then only flatten one level, optional, default = false.
         * @return `array` flattened.
         **/
        flatten(array: _.List<any>,
                shallow?: boolean): any[];

        /**
         * Returns a copy of the array with all instances of the values removed.
         * @param array The array to remove `values` from.
         * @param values The values to remove from `array`.
         * @return Copy of `array` without `values`.
         **/
        without<T>(array: _.List<T>,
                   ...values: T[]): T[];

        /**
         * Computes the union of the passed-in arrays: the list of unique items, in order, that are
         * present in one or more of the arrays.
         * @param arrays Array of arrays to compute the union of.
         * @return The union of elements within `arrays`.
         **/
        union<T>(...arrays: _.List<T>[]): T[];

        /**
         * Computes the list of values that are the intersection of all the arrays. Each value in the result
         * is present in each of the arrays.
         * @param arrays Array of arrays to compute the intersection of.
         * @return The intersection of elements within `arrays`.
         **/
        intersection<T>(...arrays: _.List<T>[]): T[];

        /**
         * Similar to without, but returns the values from array that are not present in the other arrays.
         * @param array Keeps values that are within `others`.
         * @param others The values to keep within `array`.
         * @return Copy of `array` with only `others` values.
         **/
        difference<T>(array: _.List<T>,
                      ...others: _.List<T>[]): T[];

        /**
         * Produces a duplicate-free version of the array, using === to test object equality. If you know in
         * advance that the array is sorted, passing true for isSorted will run a much faster algorithm. If
         * you want to compute unique items based on a transformation, pass an iterator function.
         * @param array Array to remove duplicates from.
         * @param isSorted True if `array` is already sorted, optional, default = false.
         * @param iterator Transform the elements of `array` before comparisons for uniqueness.
         * @param context 'this' object in `iterator`, optional.
         * @return Copy of `array` where all elements are unique.
         **/
        uniq<T, TSort>(array: _.List<T>,
                       isSorted?: boolean,
                       iterator?: _.ListIterator<T, TSort> | _.IterateePropertyShorthand,
                       context?: any): T[];

        /**
         * @see _.uniq
         **/
        uniq<T, TSort>(array: _.List<T>,
                       iterator?: _.ListIterator<T, TSort>,
                       context?: any): T[];

        /**
         * @see _.uniq
         **/
        unique<T, TSort>(array: _.List<T>,
                         iterator?: _.ListIterator<T, TSort> | _.IterateePropertyShorthand,
                         context?: any): T[];

        /**
         * @see _.uniq
         **/
        unique<T, TSort>(array: _.List<T>,
                         isSorted?: boolean,
                         iterator?: _.ListIterator<T, TSort>,
                         context?: any): T[];


        /**
         * Merges together the values of each of the arrays with the values at the corresponding position.
         * Useful when you have separate data sources that are coordinated through matching array indexes.
         * If you're working with a matrix of nested arrays, zip.apply can transpose the matrix in a similar fashion.
         * @param arrays The arrays to merge/zip.
         * @return Zipped version of `arrays`.
         **/
        zip(...arrays: any[][]): any[][];

        /**
         * @see _.zip
         **/
        zip(...arrays: any[]): any[];

        /**
         * The opposite of zip. Given a number of arrays, returns a series of new arrays, the first
         * of which contains all of the first elements in the input arrays, the second of which
         * contains all of the second elements, and so on. Use with apply to pass in an array
         * of arrays
         * @param arrays The arrays to unzip.
         * @return Unzipped version of `arrays`.
         **/
        unzip(...arrays: any[][]): any[][];

        /**
         * Converts arrays into objects. Pass either a single list of [key, value] pairs, or a
         * list of keys, and a list of values.
         * @param keys Key array.
         * @param values Value array.
         * @return An object containing the `keys` as properties and `values` as the property values.
         **/
        object<TResult extends {}>(keys: _.List<string>,
                                   values: _.List<any>): TResult;

        /**
         * Converts arrays into objects. Pass either a single list of [key, value] pairs, or a
         * list of keys, and a list of values.
         * @param keyValuePairs Array of [key, value] pairs.
         * @return An object containing the `keys` as properties and `values` as the property values.
         **/
        object<TResult extends {}>(...keyValuePairs: any[][]): TResult;

        /**
         * @see _.object
         **/
        object<TResult extends {}>(list: _.List<any>,
                                   values?: any): TResult;

        /**
         * Returns the index at which value can be found in the array, or -1 if value is not present in the array.
         * Uses the native indexOf function unless it's missing. If you're working with a large array, and you know
         * that the array is already sorted, pass true for isSorted to use a faster binary search ... or, pass a number
         * as the third argument in order to look for the first matching value in the array after the given index.
         * @param array The array to search for the index of `value`.
         * @param value The value to search for within `array`.
         * @param isSorted True if the array is already sorted, optional, default = false.
         * @return The index of `value` within `array`.
         **/
        indexOf<T>(array: _.List<T>,
                   value: T,
                   isSorted?: boolean): number;

        /**
         * @see _indexof
         **/
        indexOf<T>(array: _.List<T>,
                   value: T,
                   startFrom: number): number;

        /**
         * Returns the index of the last occurrence of value in the array, or -1 if value is not present. Uses the
         * native lastIndexOf function if possible. Pass fromIndex to start your search at a given index.
         * @param array The array to search for the last index of `value`.
         * @param value The value to search for within `array`.
         * @param from The starting index for the search, optional.
         * @return The index of the last occurrence of `value` within `array`.
         **/
        lastIndexOf<T>(array: _.List<T>,
                       value: T,
                       from?: number): number;

        /**
         * Returns the first index of an element in `array` where the predicate truth test passes
         * @param array The array to search for the index of the first element where the predicate truth test passes.
         * @param predicate Predicate function.
         * @param context `this` object in `predicate`, optional.
         * @return Returns the index of an element in `array` where the predicate truth test passes or -1.`
         **/
        findIndex<T>(array: _.List<T>,
                     predicate: _.ListIterator<T, boolean> | {},
                     context?: any): number;

        /**
         * Returns the last index of an element in `array` where the predicate truth test passes
         * @param array The array to search for the index of the last element where the predicate truth test passes.
         * @param predicate Predicate function.
         * @param context `this` object in `predicate`, optional.
         * @return Returns the index of an element in `array` where the predicate truth test passes or -1.`
         **/
        findLastIndex<T>(array: _.List<T>,
                         predicate: _.ListIterator<T, boolean> | {},
                         context?: any): number;

        /**
         * Uses a binary search to determine the index at which the value should be inserted into the list in order
         * to maintain the list's sorted order. If an iterator is passed, it will be used to compute the sort ranking
         * of each value, including the value you pass.
         * @param list The sorted list.
         * @param value The value to determine its index within `list`.
         * @param iterator Iterator to compute the sort ranking of each value, optional.
         * @return The index where `value` should be inserted into `list`.
         **/
        sortedIndex<T, TSort>(list: _.List<T>,
                              value: T,
                              iterator?: (x: T) => TSort, context?: any): number;

        /**
         * A function to create flexibly-numbered lists of integers, handy for each and map loops. start, if omitted,
         * defaults to 0; step defaults to 1. Returns a list of integers from start to stop, incremented (or decremented)
         * by step, exclusive.
         * @param start Start here.
         * @param stop Stop here.
         * @param step The number to count up by each iteration, optional, default = 1.
         * @return Array of numbers from `start` to `stop` with increments of `step`.
         **/

        range(start: number,
              stop: number,
              step?: number): number[];

        /**
         * @see _.range
         * @param stop Stop here.
         * @return Array of numbers from 0 to `stop` with increments of 1.
         * @note If start is not specified the implementation will never pull the step (step = arguments[2] || 0)
         **/
        range(stop: number): number[];

        /**
         * Split an **array** into several arrays containing **count** or less elements
         * of initial array.
         * @param array The array to split
         * @param count The maximum size of the inner arrays.
         */
        chunk<T>(array: _.Collection<T>, count: number): (_.Collection<T>)[]

        /*************
         * Functions *
         *************/

        /**
         * Bind a function to an object, meaning that whenever the function is called, the value of this will
         * be the object. Optionally, bind arguments to the function to pre-fill them, also known as partial application.
         * @param func The function to bind `this` to `object`.
         * @param context The `this` pointer whenever `fn` is called.
         * @param arguments Additional arguments to pass to `fn` when called.
         * @return `fn` with `this` bound to `object`.
         **/
        bind(func: Function,
             context: any,
             ...args: any[]): () => any;

        /**
         * Binds a number of methods on the object, specified by methodNames, to be run in the context of that object
         * whenever they are invoked. Very handy for binding functions that are going to be used as event handlers,
         * which would otherwise be invoked with a fairly useless this. If no methodNames are provided, all of the
         * object's function properties will be bound to it.
         * @param object The object to bind the methods `methodName` to.
         * @param methodNames The methods to bind to `object`, optional and if not provided all of `object`'s
         * methods are bound.
         **/
        bindAll(object: any,
                ...methodNames: string[]): any;

        /**
         * Partially apply a function by filling in any number of its arguments, without changing its dynamic this value.
         * A close cousin of bind.  You may pass _ in your list of arguments to specify an argument that should not be
         * pre-filled, but left open to supply at call-time.
         * @param fn Function to partially fill in arguments.
         * @param arguments The partial arguments.
         * @return `fn` with partially filled in arguments.
         **/

        partial<T1, T2>(fn: { (p1: T1): T2 },
                        p1: T1): { (): T2 };

        partial<T1, T2, T3>(fn: { (p1: T1, p2: T2): T3 },
                            p1: T1): { (p2: T2): T3 };

        partial<T1, T2, T3>(fn: { (p1: T1, p2: T2): T3 },
                            p1: T1,
                            p2: T2): { (): T3 };

        partial<T1, T2, T3>(fn: { (p1: T1, p2: T2): T3 },
                            stub1: UnderscoreStatic,
                            p2: T2): { (p1: T1): T3 };

        partial<T1, T2, T3, T4>(fn: { (p1: T1, p2: T2, p3: T3): T4 },
                                p1: T1): { (p2: T2, p3: T3): T4 };

        partial<T1, T2, T3, T4>(fn: { (p1: T1, p2: T2, p3: T3): T4 },
                                p1: T1,
                                p2: T2): { (p3: T3): T4 };

        partial<T1, T2, T3, T4>(fn: { (p1: T1, p2: T2, p3: T3): T4 },
                                stub1: UnderscoreStatic,
                                p2: T2): { (p1: T1, p3: T3): T4 };

        partial<T1, T2, T3, T4>(fn: { (p1: T1, p2: T2, p3: T3): T4 },
                                p1: T1,
                                p2: T2,
                                p3: T3): { (): T4 };

        partial<T1, T2, T3, T4>(fn: { (p1: T1, p2: T2, p3: T3): T4 },
                                stub1: UnderscoreStatic,
                                p2: T2,
                                p3: T3): { (p1: T1): T4 };

        partial<T1, T2, T3, T4>(fn: { (p1: T1, p2: T2, p3: T3): T4 },
                                p1: T1,
                                stub2: UnderscoreStatic,
                                p3: T3): { (p2: T2): T4 };

        partial<T1, T2, T3, T4>(fn: { (p1: T1, p2: T2, p3: T3): T4 },
                                stub1: UnderscoreStatic,
                                stub2: UnderscoreStatic,
                                p3: T3): { (p1: T1, p2: T2): T4 };

        partial<T1, T2, T3, T4, T5>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4): T5 },
                                    p1: T1): { (p2: T2, p3: T3, p4: T4): T5 };

        partial<T1, T2, T3, T4, T5>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4): T5 },
                                    p1: T1,
                                    p2: T2): { (p3: T3, p4: T4): T5 };

        partial<T1, T2, T3, T4, T5>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4): T5 },
                                    stub1: UnderscoreStatic,
                                    p2: T2): { (p1: T1, p3: T3, p4: T4): T5 };

        partial<T1, T2, T3, T4, T5>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4): T5 },
                                    p1: T1,
                                    p2: T2,
                                    p3: T3): { (p4: T4): T5 };

        partial<T1, T2, T3, T4, T5>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4): T5 },
                                    stub1: UnderscoreStatic,
                                    p2: T2,
                                    p3: T3): { (p1: T1, p4: T4): T5 };

        partial<T1, T2, T3, T4, T5>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4): T5 },
                                    p1: T1,
                                    stub2: UnderscoreStatic,
                                    p3: T3): { (p2: T2, p4: T4): T5 };

        partial<T1, T2, T3, T4, T5>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4): T5 },
                                    stub1: UnderscoreStatic,
                                    stub2: UnderscoreStatic,
                                    p3: T3): { (p1: T1, p2: T2, p4: T4): T5 };

        partial<T1, T2, T3, T4, T5>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4): T5 },
                                    p1: T1,
                                    p2: T2,
                                    p3: T3,
                                    p4: T4): { (): T5 };

        partial<T1, T2, T3, T4, T5>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4): T5 },
                                    stub1: UnderscoreStatic,
                                    p2: T2,
                                    p3: T3,
                                    p4: T4): { (p1: T1): T5 };

        partial<T1, T2, T3, T4, T5>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4): T5 },
                                    p1: T1,
                                    stub2: UnderscoreStatic,
                                    p3: T3,
                                    p4: T4): { (p2: T2): T5 };

        partial<T1, T2, T3, T4, T5>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4): T5 },
                                    stub1: UnderscoreStatic,
                                    stub2: UnderscoreStatic,
                                    p3: T3,
                                    p4: T4): { (p1: T1, p2: T2): T5 };

        partial<T1, T2, T3, T4, T5>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4): T5 },
                                    p1: T1,
                                    p2: T2,
                                    stub3: UnderscoreStatic,
                                    p4: T4): { (p3: T3): T5 };

        partial<T1, T2, T3, T4, T5>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4): T5 },
                                    stub1: UnderscoreStatic,
                                    p2: T2,
                                    stub3: UnderscoreStatic,
                                    p4: T4): { (p1: T1, p3: T3): T5 };

        partial<T1, T2, T3, T4, T5>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4): T5 },
                                    p1: T1,
                                    stub2: UnderscoreStatic,
                                    stub3: UnderscoreStatic,
                                    p4: T4): { (p2: T2, p3: T3): T5 };

        partial<T1, T2, T3, T4, T5>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4): T5 },
                                    stub1: UnderscoreStatic,
                                    stub2: UnderscoreStatic,
                                    stub3: UnderscoreStatic,
                                    p4: T4): { (p1: T1, p2: T2, p3: T3): T5 };

        partial<T1, T2, T3, T4, T5, T6>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5): T6 },
                                        p1: T1): { (p2: T2, p3: T3, p4: T4, p5: T5): T6 };

        partial<T1, T2, T3, T4, T5, T6>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5): T6 },
                                        p1: T1,
                                        p2: T2): { (p3: T3, p4: T4, p5: T5): T6 };

        partial<T1, T2, T3, T4, T5, T6>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5): T6 },
                                        stub1: UnderscoreStatic,
                                        p2: T2): { (p1: T1, p3: T3, p4: T4, p5: T5): T6 };

        partial<T1, T2, T3, T4, T5, T6>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5): T6 },
                                        p1: T1,
                                        p2: T2,
                                        p3: T3): { (p4: T4, p5: T5): T6 };

        partial<T1, T2, T3, T4, T5, T6>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5): T6 },
                                        stub1: UnderscoreStatic,
                                        p2: T2,
                                        p3: T3): { (p1: T1, p4: T4, p5: T5): T6 };

        partial<T1, T2, T3, T4, T5, T6>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5): T6 },
                                        p1: T1,
                                        stub2: UnderscoreStatic,
                                        p3: T3): { (p2: T2, p4: T4, p5: T5): T6 };

        partial<T1, T2, T3, T4, T5, T6>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5): T6 },
                                        stub1: UnderscoreStatic,
                                        stub2: UnderscoreStatic,
                                        p3: T3): { (p1: T1, p2: T2, p4: T4, p5: T5): T6 };

        partial<T1, T2, T3, T4, T5, T6>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5): T6 },
                                        p1: T1,
                                        p2: T2,
                                        p3: T3,
                                        p4: T4): { (p5: T5): T6 };

        partial<T1, T2, T3, T4, T5, T6>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5): T6 },
                                        stub1: UnderscoreStatic,
                                        p2: T2,
                                        p3: T3,
                                        p4: T4): { (p1: T1, p5: T5): T6 };

        partial<T1, T2, T3, T4, T5, T6>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5): T6 },
                                        p1: T1,
                                        stub2: UnderscoreStatic,
                                        p3: T3,
                                        p4: T4): { (p2: T2, p5: T5): T6 };

        partial<T1, T2, T3, T4, T5, T6>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5): T6 },
                                        stub1: UnderscoreStatic,
                                        stub2: UnderscoreStatic,
                                        p3: T3,
                                        p4: T4): { (p1: T1, p2: T2, p5: T5): T6 };

        partial<T1, T2, T3, T4, T5, T6>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5): T6 },
                                        p1: T1,
                                        p2: T2,
                                        stub3: UnderscoreStatic,
                                        p4: T4): { (p3: T3, p5: T5): T6 };

        partial<T1, T2, T3, T4, T5, T6>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5): T6 },
                                        stub1: UnderscoreStatic,
                                        p2: T2,
                                        stub3: UnderscoreStatic,
                                        p4: T4): { (p1: T1, p3: T3, p5: T5): T6 };

        partial<T1, T2, T3, T4, T5, T6>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5): T6 },
                                        p1: T1,
                                        stub2: UnderscoreStatic,
                                        stub3: UnderscoreStatic,
                                        p4: T4): { (p2: T2, p3: T3, p5: T5): T6 };

        partial<T1, T2, T3, T4, T5, T6>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5): T6 },
                                        stub1: UnderscoreStatic,
                                        stub2: UnderscoreStatic,
                                        stub3: UnderscoreStatic,
                                        p4: T4): { (p1: T1, p2: T2, p3: T3, p5: T5): T6 };

        partial<T1, T2, T3, T4, T5, T6>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5): T6 },
                                        p1: T1,
                                        p2: T2,
                                        p3: T3,
                                        p4: T4,
                                        p5: T5): { (): T6 };

        partial<T1, T2, T3, T4, T5, T6>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5): T6 },
                                        stub1: UnderscoreStatic,
                                        p2: T2,
                                        p3: T3,
                                        p4: T4,
                                        p5: T5): { (p1: T1): T6 };

        partial<T1, T2, T3, T4, T5, T6>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5): T6 },
                                        p1: T1,
                                        stub2: UnderscoreStatic,
                                        p3: T3,
                                        p4: T4,
                                        p5: T5): { (p2: T2): T6 };

        partial<T1, T2, T3, T4, T5, T6>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5): T6 },
                                        stub1: UnderscoreStatic,
                                        stub2: UnderscoreStatic,
                                        p3: T3,
                                        p4: T4,
                                        p5: T5): { (p1: T1, p2: T2): T6 };

        partial<T1, T2, T3, T4, T5, T6>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5): T6 },
                                        p1: T1,
                                        p2: T2,
                                        stub3: UnderscoreStatic,
                                        p4: T4,
                                        p5: T5): { (p3: T3): T6 };

        partial<T1, T2, T3, T4, T5, T6>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5): T6 },
                                        stub1: UnderscoreStatic,
                                        p2: T2,
                                        stub3: UnderscoreStatic,
                                        p4: T4,
                                        p5: T5): { (p1: T1, p3: T3): T6 };

        partial<T1, T2, T3, T4, T5, T6>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5): T6 },
                                        p1: T1,
                                        stub2: UnderscoreStatic,
                                        stub3: UnderscoreStatic,
                                        p4: T4,
                                        p5: T5): { (p2: T2, p3: T3): T6 };

        partial<T1, T2, T3, T4, T5, T6>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5): T6 },
                                        stub1: UnderscoreStatic,
                                        stub2: UnderscoreStatic,
                                        stub3: UnderscoreStatic,
                                        p4: T4,
                                        p5: T5): { (p1: T1, p2: T2, p3: T3): T6 };

        partial<T1, T2, T3, T4, T5, T6>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5): T6 },
                                        p1: T1,
                                        p2: T2,
                                        p3: T3,
                                        stub4: UnderscoreStatic,
                                        p5: T5): { (p4: T4): T6 };

        partial<T1, T2, T3, T4, T5, T6>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5): T6 },
                                        stub1: UnderscoreStatic,
                                        p2: T2,
                                        p3: T3,
                                        stub4: UnderscoreStatic,
                                        p5: T5): { (p1: T1, p4: T4): T6 };

        partial<T1, T2, T3, T4, T5, T6>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5): T6 },
                                        p1: T1,
                                        stub2: UnderscoreStatic,
                                        p3: T3,
                                        stub4: UnderscoreStatic,
                                        p5: T5): { (p2: T2, p4: T4): T6 };

        partial<T1, T2, T3, T4, T5, T6>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5): T6 },
                                        stub1: UnderscoreStatic,
                                        stub2: UnderscoreStatic,
                                        p3: T3,
                                        stub4: UnderscoreStatic,
                                        p5: T5): { (p1: T1, p2: T2, p4: T4): T6 };

        partial<T1, T2, T3, T4, T5, T6>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5): T6 },
                                        p1: T1,
                                        p2: T2,
                                        stub3: UnderscoreStatic,
                                        stub4: UnderscoreStatic,
                                        p5: T5): { (p3: T3, p4: T4): T6 };

        partial<T1, T2, T3, T4, T5, T6>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5): T6 },
                                        stub1: UnderscoreStatic,
                                        p2: T2,
                                        stub3: UnderscoreStatic,
                                        stub4: UnderscoreStatic,
                                        p5: T5): { (p1: T1, p3: T3, p4: T4): T6 };

        partial<T1, T2, T3, T4, T5, T6>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5): T6 },
                                        p1: T1,
                                        stub2: UnderscoreStatic,
                                        stub3: UnderscoreStatic,
                                        stub4: UnderscoreStatic,
                                        p5: T5): { (p2: T2, p3: T3, p4: T4): T6 };

        partial<T1, T2, T3, T4, T5, T6>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5): T6 },
                                        stub1: UnderscoreStatic,
                                        stub2: UnderscoreStatic,
                                        stub3: UnderscoreStatic,
                                        stub4: UnderscoreStatic,
                                        p5: T5): { (p1: T1, p2: T2, p3: T3, p4: T4): T6 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            p1: T1): { (p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            p1: T1,
                                            p2: T2): { (p3: T3, p4: T4, p5: T5, p6: T6): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            stub1: UnderscoreStatic,
                                            p2: T2): { (p1: T1, p3: T3, p4: T4, p5: T5, p6: T6): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            p1: T1,
                                            p2: T2,
                                            p3: T3): { (p4: T4, p5: T5, p6: T6): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            stub1: UnderscoreStatic,
                                            p2: T2,
                                            p3: T3): { (p1: T1, p4: T4, p5: T5, p6: T6): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            p1: T1,
                                            stub2: UnderscoreStatic,
                                            p3: T3): { (p2: T2, p4: T4, p5: T5, p6: T6): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            stub1: UnderscoreStatic,
                                            stub2: UnderscoreStatic,
                                            p3: T3): { (p1: T1, p2: T2, p4: T4, p5: T5, p6: T6): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            p1: T1,
                                            p2: T2,
                                            p3: T3,
                                            p4: T4): { (p5: T5, p6: T6): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            stub1: UnderscoreStatic,
                                            p2: T2,
                                            p3: T3,
                                            p4: T4): { (p1: T1, p5: T5, p6: T6): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            p1: T1,
                                            stub2: UnderscoreStatic,
                                            p3: T3,
                                            p4: T4): { (p2: T2, p5: T5, p6: T6): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            stub1: UnderscoreStatic,
                                            stub2: UnderscoreStatic,
                                            p3: T3,
                                            p4: T4): { (p1: T1, p2: T2, p5: T5, p6: T6): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            p1: T1,
                                            p2: T2,
                                            stub3: UnderscoreStatic,
                                            p4: T4): { (p3: T3, p5: T5, p6: T6): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            stub1: UnderscoreStatic,
                                            p2: T2,
                                            stub3: UnderscoreStatic,
                                            p4: T4): { (p1: T1, p3: T3, p5: T5, p6: T6): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            p1: T1,
                                            stub2: UnderscoreStatic,
                                            stub3: UnderscoreStatic,
                                            p4: T4): { (p2: T2, p3: T3, p5: T5, p6: T6): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            stub1: UnderscoreStatic,
                                            stub2: UnderscoreStatic,
                                            stub3: UnderscoreStatic,
                                            p4: T4): { (p1: T1, p2: T2, p3: T3, p5: T5, p6: T6): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            p1: T1,
                                            p2: T2,
                                            p3: T3,
                                            p4: T4,
                                            p5: T5): { (p6: T6): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            stub1: UnderscoreStatic,
                                            p2: T2,
                                            p3: T3,
                                            p4: T4,
                                            p5: T5): { (p1: T1, p6: T6): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            p1: T1,
                                            stub2: UnderscoreStatic,
                                            p3: T3,
                                            p4: T4,
                                            p5: T5): { (p2: T2, p6: T6): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            stub1: UnderscoreStatic,
                                            stub2: UnderscoreStatic,
                                            p3: T3,
                                            p4: T4,
                                            p5: T5): { (p1: T1, p2: T2, p6: T6): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            p1: T1,
                                            p2: T2,
                                            stub3: UnderscoreStatic,
                                            p4: T4,
                                            p5: T5): { (p3: T3, p6: T6): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            stub1: UnderscoreStatic,
                                            p2: T2,
                                            stub3: UnderscoreStatic,
                                            p4: T4,
                                            p5: T5): { (p1: T1, p3: T3, p6: T6): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            p1: T1,
                                            stub2: UnderscoreStatic,
                                            stub3: UnderscoreStatic,
                                            p4: T4,
                                            p5: T5): { (p2: T2, p3: T3, p6: T6): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            stub1: UnderscoreStatic,
                                            stub2: UnderscoreStatic,
                                            stub3: UnderscoreStatic,
                                            p4: T4,
                                            p5: T5): { (p1: T1, p2: T2, p3: T3, p6: T6): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            p1: T1,
                                            p2: T2,
                                            p3: T3,
                                            stub4: UnderscoreStatic,
                                            p5: T5): { (p4: T4, p6: T6): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            stub1: UnderscoreStatic,
                                            p2: T2,
                                            p3: T3,
                                            stub4: UnderscoreStatic,
                                            p5: T5): { (p1: T1, p4: T4, p6: T6): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            p1: T1,
                                            stub2: UnderscoreStatic,
                                            p3: T3,
                                            stub4: UnderscoreStatic,
                                            p5: T5): { (p2: T2, p4: T4, p6: T6): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            stub1: UnderscoreStatic,
                                            stub2: UnderscoreStatic,
                                            p3: T3,
                                            stub4: UnderscoreStatic,
                                            p5: T5): { (p1: T1, p2: T2, p4: T4, p6: T6): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            p1: T1,
                                            p2: T2,
                                            stub3: UnderscoreStatic,
                                            stub4: UnderscoreStatic,
                                            p5: T5): { (p3: T3, p4: T4, p6: T6): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            stub1: UnderscoreStatic,
                                            p2: T2,
                                            stub3: UnderscoreStatic,
                                            stub4: UnderscoreStatic,
                                            p5: T5): { (p1: T1, p3: T3, p4: T4, p6: T6): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            p1: T1,
                                            stub2: UnderscoreStatic,
                                            stub3: UnderscoreStatic,
                                            stub4: UnderscoreStatic,
                                            p5: T5): { (p2: T2, p3: T3, p4: T4, p6: T6): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            stub1: UnderscoreStatic,
                                            stub2: UnderscoreStatic,
                                            stub3: UnderscoreStatic,
                                            stub4: UnderscoreStatic,
                                            p5: T5): { (p1: T1, p2: T2, p3: T3, p4: T4, p6: T6): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            p1: T1,
                                            p2: T2,
                                            p3: T3,
                                            p4: T4,
                                            p5: T5,
                                            p6: T6): { (): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            stub1: UnderscoreStatic,
                                            p2: T2,
                                            p3: T3,
                                            p4: T4,
                                            p5: T5,
                                            p6: T6): { (p1: T1): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            p1: T1,
                                            stub2: UnderscoreStatic,
                                            p3: T3,
                                            p4: T4,
                                            p5: T5,
                                            p6: T6): { (p2: T2): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            stub1: UnderscoreStatic,
                                            stub2: UnderscoreStatic,
                                            p3: T3,
                                            p4: T4,
                                            p5: T5,
                                            p6: T6): { (p1: T1, p2: T2): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            p1: T1,
                                            p2: T2,
                                            stub3: UnderscoreStatic,
                                            p4: T4,
                                            p5: T5,
                                            p6: T6): { (p3: T3): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            stub1: UnderscoreStatic,
                                            p2: T2,
                                            stub3: UnderscoreStatic,
                                            p4: T4,
                                            p5: T5,
                                            p6: T6): { (p1: T1, p3: T3): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            p1: T1,
                                            stub2: UnderscoreStatic,
                                            stub3: UnderscoreStatic,
                                            p4: T4,
                                            p5: T5,
                                            p6: T6): { (p2: T2, p3: T3): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            stub1: UnderscoreStatic,
                                            stub2: UnderscoreStatic,
                                            stub3: UnderscoreStatic,
                                            p4: T4,
                                            p5: T5,
                                            p6: T6): { (p1: T1, p2: T2, p3: T3): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            p1: T1,
                                            p2: T2,
                                            p3: T3,
                                            stub4: UnderscoreStatic,
                                            p5: T5,
                                            p6: T6): { (p4: T4): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            stub1: UnderscoreStatic,
                                            p2: T2,
                                            p3: T3,
                                            stub4: UnderscoreStatic,
                                            p5: T5,
                                            p6: T6): { (p1: T1, p4: T4): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            p1: T1,
                                            stub2: UnderscoreStatic,
                                            p3: T3,
                                            stub4: UnderscoreStatic,
                                            p5: T5,
                                            p6: T6): { (p2: T2, p4: T4): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            stub1: UnderscoreStatic,
                                            stub2: UnderscoreStatic,
                                            p3: T3,
                                            stub4: UnderscoreStatic,
                                            p5: T5,
                                            p6: T6): { (p1: T1, p2: T2, p4: T4): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            p1: T1,
                                            p2: T2,
                                            stub3: UnderscoreStatic,
                                            stub4: UnderscoreStatic,
                                            p5: T5,
                                            p6: T6): { (p3: T3, p4: T4): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            stub1: UnderscoreStatic,
                                            p2: T2,
                                            stub3: UnderscoreStatic,
                                            stub4: UnderscoreStatic,
                                            p5: T5,
                                            p6: T6): { (p1: T1, p3: T3, p4: T4): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            p1: T1,
                                            stub2: UnderscoreStatic,
                                            stub3: UnderscoreStatic,
                                            stub4: UnderscoreStatic,
                                            p5: T5,
                                            p6: T6): { (p2: T2, p3: T3, p4: T4): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            stub1: UnderscoreStatic,
                                            stub2: UnderscoreStatic,
                                            stub3: UnderscoreStatic,
                                            stub4: UnderscoreStatic,
                                            p5: T5,
                                            p6: T6): { (p1: T1, p2: T2, p3: T3, p4: T4): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            p1: T1,
                                            p2: T2,
                                            p3: T3,
                                            p4: T4,
                                            stub5: UnderscoreStatic,
                                            p6: T6): { (p5: T5): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            stub1: UnderscoreStatic,
                                            p2: T2,
                                            p3: T3,
                                            p4: T4,
                                            stub5: UnderscoreStatic,
                                            p6: T6): { (p1: T1, p5: T5): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            p1: T1,
                                            stub2: UnderscoreStatic,
                                            p3: T3,
                                            p4: T4,
                                            stub5: UnderscoreStatic,
                                            p6: T6): { (p2: T2, p5: T5): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            stub1: UnderscoreStatic,
                                            stub2: UnderscoreStatic,
                                            p3: T3,
                                            p4: T4,
                                            stub5: UnderscoreStatic,
                                            p6: T6): { (p1: T1, p2: T2, p5: T5): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            p1: T1,
                                            p2: T2,
                                            stub3: UnderscoreStatic,
                                            p4: T4,
                                            stub5: UnderscoreStatic,
                                            p6: T6): { (p3: T3, p5: T5): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            stub1: UnderscoreStatic,
                                            p2: T2,
                                            stub3: UnderscoreStatic,
                                            p4: T4,
                                            stub5: UnderscoreStatic,
                                            p6: T6): { (p1: T1, p3: T3, p5: T5): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            p1: T1,
                                            stub2: UnderscoreStatic,
                                            stub3: UnderscoreStatic,
                                            p4: T4,
                                            stub5: UnderscoreStatic,
                                            p6: T6): { (p2: T2, p3: T3, p5: T5): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            stub1: UnderscoreStatic,
                                            stub2: UnderscoreStatic,
                                            stub3: UnderscoreStatic,
                                            p4: T4,
                                            stub5: UnderscoreStatic,
                                            p6: T6): { (p1: T1, p2: T2, p3: T3, p5: T5): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            p1: T1,
                                            p2: T2,
                                            p3: T3,
                                            stub4: UnderscoreStatic,
                                            stub5: UnderscoreStatic,
                                            p6: T6): { (p4: T4, p5: T5): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            stub1: UnderscoreStatic,
                                            p2: T2,
                                            p3: T3,
                                            stub4: UnderscoreStatic,
                                            stub5: UnderscoreStatic,
                                            p6: T6): { (p1: T1, p4: T4, p5: T5): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            p1: T1,
                                            stub2: UnderscoreStatic,
                                            p3: T3,
                                            stub4: UnderscoreStatic,
                                            stub5: UnderscoreStatic,
                                            p6: T6): { (p2: T2, p4: T4, p5: T5): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            stub1: UnderscoreStatic,
                                            stub2: UnderscoreStatic,
                                            p3: T3,
                                            stub4: UnderscoreStatic,
                                            stub5: UnderscoreStatic,
                                            p6: T6): { (p1: T1, p2: T2, p4: T4, p5: T5): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            p1: T1,
                                            p2: T2,
                                            stub3: UnderscoreStatic,
                                            stub4: UnderscoreStatic,
                                            stub5: UnderscoreStatic,
                                            p6: T6): { (p3: T3, p4: T4, p5: T5): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            stub1: UnderscoreStatic,
                                            p2: T2,
                                            stub3: UnderscoreStatic,
                                            stub4: UnderscoreStatic,
                                            stub5: UnderscoreStatic,
                                            p6: T6): { (p1: T1, p3: T3, p4: T4, p5: T5): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            p1: T1,
                                            stub2: UnderscoreStatic,
                                            stub3: UnderscoreStatic,
                                            stub4: UnderscoreStatic,
                                            stub5: UnderscoreStatic,
                                            p6: T6): { (p2: T2, p3: T3, p4: T4, p5: T5): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T7 },
                                            stub1: UnderscoreStatic,
                                            stub2: UnderscoreStatic,
                                            stub3: UnderscoreStatic,
                                            stub4: UnderscoreStatic,
                                            stub5: UnderscoreStatic,
                                            p6: T6): { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5): T7 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1): { (p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                p2: T2): { (p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                p2: T2): { (p1: T1, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                p2: T2,
                                                p3: T3): { (p4: T4, p5: T5, p6: T6, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                p2: T2,
                                                p3: T3): { (p1: T1, p4: T4, p5: T5, p6: T6, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                stub2: UnderscoreStatic,
                                                p3: T3): { (p2: T2, p4: T4, p5: T5, p6: T6, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                stub2: UnderscoreStatic,
                                                p3: T3): { (p1: T1, p2: T2, p4: T4, p5: T5, p6: T6, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                p2: T2,
                                                p3: T3,
                                                p4: T4): { (p5: T5, p6: T6, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                p2: T2,
                                                p3: T3,
                                                p4: T4): { (p1: T1, p5: T5, p6: T6, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                stub2: UnderscoreStatic,
                                                p3: T3,
                                                p4: T4): { (p2: T2, p5: T5, p6: T6, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                stub2: UnderscoreStatic,
                                                p3: T3,
                                                p4: T4): { (p1: T1, p2: T2, p5: T5, p6: T6, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                p2: T2,
                                                stub3: UnderscoreStatic,
                                                p4: T4): { (p3: T3, p5: T5, p6: T6, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                p2: T2,
                                                stub3: UnderscoreStatic,
                                                p4: T4): { (p1: T1, p3: T3, p5: T5, p6: T6, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                stub2: UnderscoreStatic,
                                                stub3: UnderscoreStatic,
                                                p4: T4): { (p2: T2, p3: T3, p5: T5, p6: T6, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                stub2: UnderscoreStatic,
                                                stub3: UnderscoreStatic,
                                                p4: T4): { (p1: T1, p2: T2, p3: T3, p5: T5, p6: T6, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                p2: T2,
                                                p3: T3,
                                                p4: T4,
                                                p5: T5): { (p6: T6, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                p2: T2,
                                                p3: T3,
                                                p4: T4,
                                                p5: T5): { (p1: T1, p6: T6, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                stub2: UnderscoreStatic,
                                                p3: T3,
                                                p4: T4,
                                                p5: T5): { (p2: T2, p6: T6, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                stub2: UnderscoreStatic,
                                                p3: T3,
                                                p4: T4,
                                                p5: T5): { (p1: T1, p2: T2, p6: T6, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                p2: T2,
                                                stub3: UnderscoreStatic,
                                                p4: T4,
                                                p5: T5): { (p3: T3, p6: T6, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                p2: T2,
                                                stub3: UnderscoreStatic,
                                                p4: T4,
                                                p5: T5): { (p1: T1, p3: T3, p6: T6, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                stub2: UnderscoreStatic,
                                                stub3: UnderscoreStatic,
                                                p4: T4,
                                                p5: T5): { (p2: T2, p3: T3, p6: T6, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                stub2: UnderscoreStatic,
                                                stub3: UnderscoreStatic,
                                                p4: T4,
                                                p5: T5): { (p1: T1, p2: T2, p3: T3, p6: T6, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                p2: T2,
                                                p3: T3,
                                                stub4: UnderscoreStatic,
                                                p5: T5): { (p4: T4, p6: T6, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                p2: T2,
                                                p3: T3,
                                                stub4: UnderscoreStatic,
                                                p5: T5): { (p1: T1, p4: T4, p6: T6, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                stub2: UnderscoreStatic,
                                                p3: T3,
                                                stub4: UnderscoreStatic,
                                                p5: T5): { (p2: T2, p4: T4, p6: T6, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                stub2: UnderscoreStatic,
                                                p3: T3,
                                                stub4: UnderscoreStatic,
                                                p5: T5): { (p1: T1, p2: T2, p4: T4, p6: T6, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                p2: T2,
                                                stub3: UnderscoreStatic,
                                                stub4: UnderscoreStatic,
                                                p5: T5): { (p3: T3, p4: T4, p6: T6, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                p2: T2,
                                                stub3: UnderscoreStatic,
                                                stub4: UnderscoreStatic,
                                                p5: T5): { (p1: T1, p3: T3, p4: T4, p6: T6, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                stub2: UnderscoreStatic,
                                                stub3: UnderscoreStatic,
                                                stub4: UnderscoreStatic,
                                                p5: T5): { (p2: T2, p3: T3, p4: T4, p6: T6, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                stub2: UnderscoreStatic,
                                                stub3: UnderscoreStatic,
                                                stub4: UnderscoreStatic,
                                                p5: T5): { (p1: T1, p2: T2, p3: T3, p4: T4, p6: T6, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                p2: T2,
                                                p3: T3,
                                                p4: T4,
                                                p5: T5,
                                                p6: T6): { (p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                p2: T2,
                                                p3: T3,
                                                p4: T4,
                                                p5: T5,
                                                p6: T6): { (p1: T1, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                stub2: UnderscoreStatic,
                                                p3: T3,
                                                p4: T4,
                                                p5: T5,
                                                p6: T6): { (p2: T2, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                stub2: UnderscoreStatic,
                                                p3: T3,
                                                p4: T4,
                                                p5: T5,
                                                p6: T6): { (p1: T1, p2: T2, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                p2: T2,
                                                stub3: UnderscoreStatic,
                                                p4: T4,
                                                p5: T5,
                                                p6: T6): { (p3: T3, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                p2: T2,
                                                stub3: UnderscoreStatic,
                                                p4: T4,
                                                p5: T5,
                                                p6: T6): { (p1: T1, p3: T3, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                stub2: UnderscoreStatic,
                                                stub3: UnderscoreStatic,
                                                p4: T4,
                                                p5: T5,
                                                p6: T6): { (p2: T2, p3: T3, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                stub2: UnderscoreStatic,
                                                stub3: UnderscoreStatic,
                                                p4: T4,
                                                p5: T5,
                                                p6: T6): { (p1: T1, p2: T2, p3: T3, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                p2: T2,
                                                p3: T3,
                                                stub4: UnderscoreStatic,
                                                p5: T5,
                                                p6: T6): { (p4: T4, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                p2: T2,
                                                p3: T3,
                                                stub4: UnderscoreStatic,
                                                p5: T5,
                                                p6: T6): { (p1: T1, p4: T4, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                stub2: UnderscoreStatic,
                                                p3: T3,
                                                stub4: UnderscoreStatic,
                                                p5: T5,
                                                p6: T6): { (p2: T2, p4: T4, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                stub2: UnderscoreStatic,
                                                p3: T3,
                                                stub4: UnderscoreStatic,
                                                p5: T5,
                                                p6: T6): { (p1: T1, p2: T2, p4: T4, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                p2: T2,
                                                stub3: UnderscoreStatic,
                                                stub4: UnderscoreStatic,
                                                p5: T5,
                                                p6: T6): { (p3: T3, p4: T4, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                p2: T2,
                                                stub3: UnderscoreStatic,
                                                stub4: UnderscoreStatic,
                                                p5: T5,
                                                p6: T6): { (p1: T1, p3: T3, p4: T4, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                stub2: UnderscoreStatic,
                                                stub3: UnderscoreStatic,
                                                stub4: UnderscoreStatic,
                                                p5: T5,
                                                p6: T6): { (p2: T2, p3: T3, p4: T4, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                stub2: UnderscoreStatic,
                                                stub3: UnderscoreStatic,
                                                stub4: UnderscoreStatic,
                                                p5: T5,
                                                p6: T6): { (p1: T1, p2: T2, p3: T3, p4: T4, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                p2: T2,
                                                p3: T3,
                                                p4: T4,
                                                stub5: UnderscoreStatic,
                                                p6: T6): { (p5: T5, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                p2: T2,
                                                p3: T3,
                                                p4: T4,
                                                stub5: UnderscoreStatic,
                                                p6: T6): { (p1: T1, p5: T5, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                stub2: UnderscoreStatic,
                                                p3: T3,
                                                p4: T4,
                                                stub5: UnderscoreStatic,
                                                p6: T6): { (p2: T2, p5: T5, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                stub2: UnderscoreStatic,
                                                p3: T3,
                                                p4: T4,
                                                stub5: UnderscoreStatic,
                                                p6: T6): { (p1: T1, p2: T2, p5: T5, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                p2: T2,
                                                stub3: UnderscoreStatic,
                                                p4: T4,
                                                stub5: UnderscoreStatic,
                                                p6: T6): { (p3: T3, p5: T5, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                p2: T2,
                                                stub3: UnderscoreStatic,
                                                p4: T4,
                                                stub5: UnderscoreStatic,
                                                p6: T6): { (p1: T1, p3: T3, p5: T5, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                stub2: UnderscoreStatic,
                                                stub3: UnderscoreStatic,
                                                p4: T4,
                                                stub5: UnderscoreStatic,
                                                p6: T6): { (p2: T2, p3: T3, p5: T5, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                stub2: UnderscoreStatic,
                                                stub3: UnderscoreStatic,
                                                p4: T4,
                                                stub5: UnderscoreStatic,
                                                p6: T6): { (p1: T1, p2: T2, p3: T3, p5: T5, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                p2: T2,
                                                p3: T3,
                                                stub4: UnderscoreStatic,
                                                stub5: UnderscoreStatic,
                                                p6: T6): { (p4: T4, p5: T5, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                p2: T2,
                                                p3: T3,
                                                stub4: UnderscoreStatic,
                                                stub5: UnderscoreStatic,
                                                p6: T6): { (p1: T1, p4: T4, p5: T5, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                stub2: UnderscoreStatic,
                                                p3: T3,
                                                stub4: UnderscoreStatic,
                                                stub5: UnderscoreStatic,
                                                p6: T6): { (p2: T2, p4: T4, p5: T5, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                stub2: UnderscoreStatic,
                                                p3: T3,
                                                stub4: UnderscoreStatic,
                                                stub5: UnderscoreStatic,
                                                p6: T6): { (p1: T1, p2: T2, p4: T4, p5: T5, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                p2: T2,
                                                stub3: UnderscoreStatic,
                                                stub4: UnderscoreStatic,
                                                stub5: UnderscoreStatic,
                                                p6: T6): { (p3: T3, p4: T4, p5: T5, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                p2: T2,
                                                stub3: UnderscoreStatic,
                                                stub4: UnderscoreStatic,
                                                stub5: UnderscoreStatic,
                                                p6: T6): { (p1: T1, p3: T3, p4: T4, p5: T5, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                stub2: UnderscoreStatic,
                                                stub3: UnderscoreStatic,
                                                stub4: UnderscoreStatic,
                                                stub5: UnderscoreStatic,
                                                p6: T6): { (p2: T2, p3: T3, p4: T4, p5: T5, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                stub2: UnderscoreStatic,
                                                stub3: UnderscoreStatic,
                                                stub4: UnderscoreStatic,
                                                stub5: UnderscoreStatic,
                                                p6: T6): { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p7: T7): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                p2: T2,
                                                p3: T3,
                                                p4: T4,
                                                p5: T5,
                                                p6: T6,
                                                p7: T7): { (): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                p2: T2,
                                                p3: T3,
                                                p4: T4,
                                                p5: T5,
                                                p6: T6,
                                                p7: T7): { (p1: T1): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                stub2: UnderscoreStatic,
                                                p3: T3,
                                                p4: T4,
                                                p5: T5,
                                                p6: T6,
                                                p7: T7): { (p2: T2): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                stub2: UnderscoreStatic,
                                                p3: T3,
                                                p4: T4,
                                                p5: T5,
                                                p6: T6,
                                                p7: T7): { (p1: T1, p2: T2): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                p2: T2,
                                                stub3: UnderscoreStatic,
                                                p4: T4,
                                                p5: T5,
                                                p6: T6,
                                                p7: T7): { (p3: T3): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                p2: T2,
                                                stub3: UnderscoreStatic,
                                                p4: T4,
                                                p5: T5,
                                                p6: T6,
                                                p7: T7): { (p1: T1, p3: T3): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                stub2: UnderscoreStatic,
                                                stub3: UnderscoreStatic,
                                                p4: T4,
                                                p5: T5,
                                                p6: T6,
                                                p7: T7): { (p2: T2, p3: T3): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                stub2: UnderscoreStatic,
                                                stub3: UnderscoreStatic,
                                                p4: T4,
                                                p5: T5,
                                                p6: T6,
                                                p7: T7): { (p1: T1, p2: T2, p3: T3): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                p2: T2,
                                                p3: T3,
                                                stub4: UnderscoreStatic,
                                                p5: T5,
                                                p6: T6,
                                                p7: T7): { (p4: T4): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                p2: T2,
                                                p3: T3,
                                                stub4: UnderscoreStatic,
                                                p5: T5,
                                                p6: T6,
                                                p7: T7): { (p1: T1, p4: T4): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                stub2: UnderscoreStatic,
                                                p3: T3,
                                                stub4: UnderscoreStatic,
                                                p5: T5,
                                                p6: T6,
                                                p7: T7): { (p2: T2, p4: T4): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                stub2: UnderscoreStatic,
                                                p3: T3,
                                                stub4: UnderscoreStatic,
                                                p5: T5,
                                                p6: T6,
                                                p7: T7): { (p1: T1, p2: T2, p4: T4): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                p2: T2,
                                                stub3: UnderscoreStatic,
                                                stub4: UnderscoreStatic,
                                                p5: T5,
                                                p6: T6,
                                                p7: T7): { (p3: T3, p4: T4): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                p2: T2,
                                                stub3: UnderscoreStatic,
                                                stub4: UnderscoreStatic,
                                                p5: T5,
                                                p6: T6,
                                                p7: T7): { (p1: T1, p3: T3, p4: T4): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                stub2: UnderscoreStatic,
                                                stub3: UnderscoreStatic,
                                                stub4: UnderscoreStatic,
                                                p5: T5,
                                                p6: T6,
                                                p7: T7): { (p2: T2, p3: T3, p4: T4): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                stub2: UnderscoreStatic,
                                                stub3: UnderscoreStatic,
                                                stub4: UnderscoreStatic,
                                                p5: T5,
                                                p6: T6,
                                                p7: T7): { (p1: T1, p2: T2, p3: T3, p4: T4): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                p2: T2,
                                                p3: T3,
                                                p4: T4,
                                                stub5: UnderscoreStatic,
                                                p6: T6,
                                                p7: T7): { (p5: T5): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                p2: T2,
                                                p3: T3,
                                                p4: T4,
                                                stub5: UnderscoreStatic,
                                                p6: T6,
                                                p7: T7): { (p1: T1, p5: T5): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                stub2: UnderscoreStatic,
                                                p3: T3,
                                                p4: T4,
                                                stub5: UnderscoreStatic,
                                                p6: T6,
                                                p7: T7): { (p2: T2, p5: T5): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                stub2: UnderscoreStatic,
                                                p3: T3,
                                                p4: T4,
                                                stub5: UnderscoreStatic,
                                                p6: T6,
                                                p7: T7): { (p1: T1, p2: T2, p5: T5): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                p2: T2,
                                                stub3: UnderscoreStatic,
                                                p4: T4,
                                                stub5: UnderscoreStatic,
                                                p6: T6,
                                                p7: T7): { (p3: T3, p5: T5): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                p2: T2,
                                                stub3: UnderscoreStatic,
                                                p4: T4,
                                                stub5: UnderscoreStatic,
                                                p6: T6,
                                                p7: T7): { (p1: T1, p3: T3, p5: T5): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                stub2: UnderscoreStatic,
                                                stub3: UnderscoreStatic,
                                                p4: T4,
                                                stub5: UnderscoreStatic,
                                                p6: T6,
                                                p7: T7): { (p2: T2, p3: T3, p5: T5): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                stub2: UnderscoreStatic,
                                                stub3: UnderscoreStatic,
                                                p4: T4,
                                                stub5: UnderscoreStatic,
                                                p6: T6,
                                                p7: T7): { (p1: T1, p2: T2, p3: T3, p5: T5): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                p2: T2,
                                                p3: T3,
                                                stub4: UnderscoreStatic,
                                                stub5: UnderscoreStatic,
                                                p6: T6,
                                                p7: T7): { (p4: T4, p5: T5): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                p2: T2,
                                                p3: T3,
                                                stub4: UnderscoreStatic,
                                                stub5: UnderscoreStatic,
                                                p6: T6,
                                                p7: T7): { (p1: T1, p4: T4, p5: T5): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                stub2: UnderscoreStatic,
                                                p3: T3,
                                                stub4: UnderscoreStatic,
                                                stub5: UnderscoreStatic,
                                                p6: T6,
                                                p7: T7): { (p2: T2, p4: T4, p5: T5): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                stub2: UnderscoreStatic,
                                                p3: T3,
                                                stub4: UnderscoreStatic,
                                                stub5: UnderscoreStatic,
                                                p6: T6,
                                                p7: T7): { (p1: T1, p2: T2, p4: T4, p5: T5): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                p2: T2,
                                                stub3: UnderscoreStatic,
                                                stub4: UnderscoreStatic,
                                                stub5: UnderscoreStatic,
                                                p6: T6,
                                                p7: T7): { (p3: T3, p4: T4, p5: T5): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                p2: T2,
                                                stub3: UnderscoreStatic,
                                                stub4: UnderscoreStatic,
                                                stub5: UnderscoreStatic,
                                                p6: T6,
                                                p7: T7): { (p1: T1, p3: T3, p4: T4, p5: T5): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                stub2: UnderscoreStatic,
                                                stub3: UnderscoreStatic,
                                                stub4: UnderscoreStatic,
                                                stub5: UnderscoreStatic,
                                                p6: T6,
                                                p7: T7): { (p2: T2, p3: T3, p4: T4, p5: T5): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                stub2: UnderscoreStatic,
                                                stub3: UnderscoreStatic,
                                                stub4: UnderscoreStatic,
                                                stub5: UnderscoreStatic,
                                                p6: T6,
                                                p7: T7): { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                p2: T2,
                                                p3: T3,
                                                p4: T4,
                                                p5: T5,
                                                stub6: UnderscoreStatic,
                                                p7: T7): { (p6: T6): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                p2: T2,
                                                p3: T3,
                                                p4: T4,
                                                p5: T5,
                                                stub6: UnderscoreStatic,
                                                p7: T7): { (p1: T1, p6: T6): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                stub2: UnderscoreStatic,
                                                p3: T3,
                                                p4: T4,
                                                p5: T5,
                                                stub6: UnderscoreStatic,
                                                p7: T7): { (p2: T2, p6: T6): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                stub2: UnderscoreStatic,
                                                p3: T3,
                                                p4: T4,
                                                p5: T5,
                                                stub6: UnderscoreStatic,
                                                p7: T7): { (p1: T1, p2: T2, p6: T6): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                p2: T2,
                                                stub3: UnderscoreStatic,
                                                p4: T4,
                                                p5: T5,
                                                stub6: UnderscoreStatic,
                                                p7: T7): { (p3: T3, p6: T6): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                p2: T2,
                                                stub3: UnderscoreStatic,
                                                p4: T4,
                                                p5: T5,
                                                stub6: UnderscoreStatic,
                                                p7: T7): { (p1: T1, p3: T3, p6: T6): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                stub2: UnderscoreStatic,
                                                stub3: UnderscoreStatic,
                                                p4: T4,
                                                p5: T5,
                                                stub6: UnderscoreStatic,
                                                p7: T7): { (p2: T2, p3: T3, p6: T6): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                stub2: UnderscoreStatic,
                                                stub3: UnderscoreStatic,
                                                p4: T4,
                                                p5: T5,
                                                stub6: UnderscoreStatic,
                                                p7: T7): { (p1: T1, p2: T2, p3: T3, p6: T6): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                p2: T2,
                                                p3: T3,
                                                stub4: UnderscoreStatic,
                                                p5: T5,
                                                stub6: UnderscoreStatic,
                                                p7: T7): { (p4: T4, p6: T6): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                p2: T2,
                                                p3: T3,
                                                stub4: UnderscoreStatic,
                                                p5: T5,
                                                stub6: UnderscoreStatic,
                                                p7: T7): { (p1: T1, p4: T4, p6: T6): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                stub2: UnderscoreStatic,
                                                p3: T3,
                                                stub4: UnderscoreStatic,
                                                p5: T5,
                                                stub6: UnderscoreStatic,
                                                p7: T7): { (p2: T2, p4: T4, p6: T6): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                stub2: UnderscoreStatic,
                                                p3: T3,
                                                stub4: UnderscoreStatic,
                                                p5: T5,
                                                stub6: UnderscoreStatic,
                                                p7: T7): { (p1: T1, p2: T2, p4: T4, p6: T6): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                p2: T2,
                                                stub3: UnderscoreStatic,
                                                stub4: UnderscoreStatic,
                                                p5: T5,
                                                stub6: UnderscoreStatic,
                                                p7: T7): { (p3: T3, p4: T4, p6: T6): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                p2: T2,
                                                stub3: UnderscoreStatic,
                                                stub4: UnderscoreStatic,
                                                p5: T5,
                                                stub6: UnderscoreStatic,
                                                p7: T7): { (p1: T1, p3: T3, p4: T4, p6: T6): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                stub2: UnderscoreStatic,
                                                stub3: UnderscoreStatic,
                                                stub4: UnderscoreStatic,
                                                p5: T5,
                                                stub6: UnderscoreStatic,
                                                p7: T7): { (p2: T2, p3: T3, p4: T4, p6: T6): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                stub2: UnderscoreStatic,
                                                stub3: UnderscoreStatic,
                                                stub4: UnderscoreStatic,
                                                p5: T5,
                                                stub6: UnderscoreStatic,
                                                p7: T7): { (p1: T1, p2: T2, p3: T3, p4: T4, p6: T6): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                p2: T2,
                                                p3: T3,
                                                p4: T4,
                                                stub5: UnderscoreStatic,
                                                stub6: UnderscoreStatic,
                                                p7: T7): { (p5: T5, p6: T6): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                p2: T2,
                                                p3: T3,
                                                p4: T4,
                                                stub5: UnderscoreStatic,
                                                stub6: UnderscoreStatic,
                                                p7: T7): { (p1: T1, p5: T5, p6: T6): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                stub2: UnderscoreStatic,
                                                p3: T3,
                                                p4: T4,
                                                stub5: UnderscoreStatic,
                                                stub6: UnderscoreStatic,
                                                p7: T7): { (p2: T2, p5: T5, p6: T6): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                stub2: UnderscoreStatic,
                                                p3: T3,
                                                p4: T4,
                                                stub5: UnderscoreStatic,
                                                stub6: UnderscoreStatic,
                                                p7: T7): { (p1: T1, p2: T2, p5: T5, p6: T6): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                p2: T2,
                                                stub3: UnderscoreStatic,
                                                p4: T4,
                                                stub5: UnderscoreStatic,
                                                stub6: UnderscoreStatic,
                                                p7: T7): { (p3: T3, p5: T5, p6: T6): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                p2: T2,
                                                stub3: UnderscoreStatic,
                                                p4: T4,
                                                stub5: UnderscoreStatic,
                                                stub6: UnderscoreStatic,
                                                p7: T7): { (p1: T1, p3: T3, p5: T5, p6: T6): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                stub2: UnderscoreStatic,
                                                stub3: UnderscoreStatic,
                                                p4: T4,
                                                stub5: UnderscoreStatic,
                                                stub6: UnderscoreStatic,
                                                p7: T7): { (p2: T2, p3: T3, p5: T5, p6: T6): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                stub2: UnderscoreStatic,
                                                stub3: UnderscoreStatic,
                                                p4: T4,
                                                stub5: UnderscoreStatic,
                                                stub6: UnderscoreStatic,
                                                p7: T7): { (p1: T1, p2: T2, p3: T3, p5: T5, p6: T6): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                p2: T2,
                                                p3: T3,
                                                stub4: UnderscoreStatic,
                                                stub5: UnderscoreStatic,
                                                stub6: UnderscoreStatic,
                                                p7: T7): { (p4: T4, p5: T5, p6: T6): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                p2: T2,
                                                p3: T3,
                                                stub4: UnderscoreStatic,
                                                stub5: UnderscoreStatic,
                                                stub6: UnderscoreStatic,
                                                p7: T7): { (p1: T1, p4: T4, p5: T5, p6: T6): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                stub2: UnderscoreStatic,
                                                p3: T3,
                                                stub4: UnderscoreStatic,
                                                stub5: UnderscoreStatic,
                                                stub6: UnderscoreStatic,
                                                p7: T7): { (p2: T2, p4: T4, p5: T5, p6: T6): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                stub2: UnderscoreStatic,
                                                p3: T3,
                                                stub4: UnderscoreStatic,
                                                stub5: UnderscoreStatic,
                                                stub6: UnderscoreStatic,
                                                p7: T7): { (p1: T1, p2: T2, p4: T4, p5: T5, p6: T6): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                p2: T2,
                                                stub3: UnderscoreStatic,
                                                stub4: UnderscoreStatic,
                                                stub5: UnderscoreStatic,
                                                stub6: UnderscoreStatic,
                                                p7: T7): { (p3: T3, p4: T4, p5: T5, p6: T6): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                p2: T2,
                                                stub3: UnderscoreStatic,
                                                stub4: UnderscoreStatic,
                                                stub5: UnderscoreStatic,
                                                stub6: UnderscoreStatic,
                                                p7: T7): { (p1: T1, p3: T3, p4: T4, p5: T5, p6: T6): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                p1: T1,
                                                stub2: UnderscoreStatic,
                                                stub3: UnderscoreStatic,
                                                stub4: UnderscoreStatic,
                                                stub5: UnderscoreStatic,
                                                stub6: UnderscoreStatic,
                                                p7: T7): { (p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T8 };

        partial<T1, T2, T3, T4, T5, T6, T7, T8>(fn: { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): T8 },
                                                stub1: UnderscoreStatic,
                                                stub2: UnderscoreStatic,
                                                stub3: UnderscoreStatic,
                                                stub4: UnderscoreStatic,
                                                stub5: UnderscoreStatic,
                                                stub6: UnderscoreStatic,
                                                p7: T7): { (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): T8 };

        /**
         * Memoizes a given function by caching the computed result. Useful for speeding up slow-running computations.
         * If passed an optional hashFunction, it will be used to compute the hash key for storing the result, based
         * on the arguments to the original function. The default hashFunction just uses the first argument to the
         * memoized function as the key.
         * @param fn Computationally expensive function that will now memoized results.
         * @param hashFn Hash function for storing the result of `fn`.
         * @return Memoized version of `fn`.
         **/
        memoize(fn: Function,
                hashFn?: (...args: any[]) => string): Function;

        /**
         * Much like setTimeout, invokes function after wait milliseconds. If you pass the optional arguments,
         * they will be forwarded on to the function when it is invoked.
         * @param func Function to delay `waitMS` amount of ms.
         * @param wait The amount of milliseconds to delay `fn`.
         * @arguments Additional arguments to pass to `fn`.
         **/
        delay(func: Function,
              wait: number,
              ...args: any[]): any;

        /**
         * @see _delay
         **/
        delay(func: Function,
              ...args: any[]): any;

        /**
         * Defers invoking the function until the current call stack has cleared, similar to using setTimeout
         * with a delay of 0. Useful for performing expensive computations or HTML rendering in chunks without
         * blocking the UI thread from updating. If you pass the optional arguments, they will be forwarded on
         * to the function when it is invoked.
         * @param fn The function to defer.
         * @param arguments Additional arguments to pass to `fn`.
         **/
        defer(fn: Function,
              ...args: any[]): void;

        /**
         * Creates and returns a new, throttled version of the passed function, that, when invoked repeatedly,
         * will only actually call the original function at most once per every wait milliseconds. Useful for
         * rate-limiting events that occur faster than you can keep up with.
         * By default, throttle will execute the function as soon as you call it for the first time, and,
         * if you call it again any number of times during the wait period, as soon as that period is over.
         * If you'd like to disable the leading-edge call, pass {leading: false}, and if you'd like to disable
         * the execution on the trailing-edge, pass {trailing: false}.
         * @param func Function to throttle `waitMS` ms.
         * @param wait The number of milliseconds to wait before `fn` can be invoked again.
         * @param options Allows for disabling execution of the throttled function on either the leading or trailing edge.
         * @return `fn` with a throttle of `wait`.
         **/
        throttle<T extends Function>(func: T,
                                     wait: number,
                                     options?: _.ThrottleSettings): T & _.Cancelable;

        /**
         * Creates and returns a new debounced version of the passed function that will postpone its execution
         * until after wait milliseconds have elapsed since the last time it was invoked. Useful for implementing
         * behavior that should only happen after the input has stopped arriving. For example: rendering a preview
         * of a Markdown comment, recalculating a layout after the window has stopped being resized, and so on.
         *
         * Pass true for the immediate parameter to cause debounce to trigger the function on the leading instead
         * of the trailing edge of the wait interval. Useful in circumstances like preventing accidental double
         *-clicks on a "submit" button from firing a second time.
         * @param fn Function to debounce `waitMS` ms.
         * @param wait The number of milliseconds to wait before `fn` can be invoked again.
         * @param immediate True if `fn` should be invoked on the leading edge of `waitMS` instead of the trailing edge.
         * @return Debounced version of `fn` that waits `wait` ms when invoked.
         **/
        debounce<T extends Function>(fn: T,
                                     wait: number,
                                     immediate?: boolean): T & _.Cancelable;

        /**
         * Creates a version of the function that can only be called one time. Repeated calls to the modified
         * function will have no effect, returning the value from the original call. Useful for initialization
         * functions, instead of having to set a boolean flag and then check it later.
         * @param fn Function to only execute once.
         * @return Copy of `fn` that can only be invoked once.
         **/
        once<T extends Function>(fn: T): T;

        /**
         * Similar to ES6's rest param (http://ariya.ofilabs.com/2013/03/es6-and-rest-parameter.html)
         * This accumulates the arguments passed into an array, after a given index.
         **/
        restArgs(func: Function, starIndex?: number): Function;

        /**
         * Creates a version of the function that will only be run after first being called count times. Useful
         * for grouping asynchronous responses, where you want to be sure that all the async calls have finished,
         * before proceeding.
         * @param number count Number of times to be called before actually executing.
         * @param Function fn The function to defer execution `count` times.
         * @return Copy of `fn` that will not execute until it is invoked `count` times.
         **/
        after(count: number,
              fn: Function): Function;

        /**
         * Creates a version of the function that can be called no more than count times.  The result of
         * the last function call is memoized and returned when count has been reached.
         * @param number count  The maxmimum number of times the function can be called.
         * @param Function fn The function to limit the number of times it can be called.
         * @return Copy of `fn` that can only be called `count` times.
         **/
        before(count: number,
               fn: Function): Function;

        /**
         * Wraps the first function inside of the wrapper function, passing it as the first argument. This allows
         * the wrapper to execute code before and after the function runs, adjust the arguments, and execute it
         * conditionally.
         * @param fn Function to wrap.
         * @param wrapper The function that will wrap `fn`.
         * @return Wrapped version of `fn.
         **/
        wrap(fn: Function,
             wrapper: (fn: Function, ...args: any[]) => any): Function;

        /**
         * Returns a negated version of the pass-in predicate.
         * @param (...args: any[]) => boolean predicate
         * @return (...args: any[]) => boolean
         **/
        negate(predicate: (...args: any[]) => boolean): (...args: any[]) => boolean;

        /**
         * Returns the composition of a list of functions, where each function consumes the return value of the
         * function that follows. In math terms, composing the functions f(), g(), and h() produces f(g(h())).
         * @param functions List of functions to compose.
         * @return Composition of `functions`.
         **/
        compose(...functions: Function[]): Function;

        /**********
         * Objects *
         ***********/

        /**
         * Retrieve all the names of the object's properties.
         * @param object Retrieve the key or property names from this object.
         * @return List of all the property names on `object`.
         **/
        keys(object: any): string[];

        /**
         * Retrieve all the names of object's own and inherited properties.
         * @param object Retrieve the key or property names from this object.
         * @return List of all the property names on `object`.
         **/
        allKeys(object: any): string[];

        /**
         * Return all of the values of the object's properties.
         * @param object Retrieve the values of all the properties on this object.
         * @return List of all the values on `object`.
         **/
        values<T>(object: _.Dictionary<T>): T[];

        /**
         * Return all of the values of the object's properties.
         * @param object Retrieve the values of all the properties on this object.
         * @return List of all the values on `object`.
         **/
        values(object: any): any[];

        /**
         * Like map, but for objects. Transform the value of each property in turn.
         * @param object The object to transform
         * @param iteratee The function that transforms property values
         * @param context The optional context (value of `this`) to bind to
         * @return a new _.Dictionary of property values
         */
        mapObject<T, U>(object: _.Dictionary<T>, iteratee: (val: T, key: string, object: _.Dictionary<T>) => U, context?: any): _.Dictionary<U>;

        /**
         * Like map, but for objects. Transform the value of each property in turn.
         * @param object The object to transform
         * @param iteratee The function that tranforms property values
         * @param context The optional context (value of `this`) to bind to
         */
        mapObject<T>(object: any, iteratee: (val: any, key: string, object: any) => T, context?: any): _.Dictionary<T>;

        /**
         * Like map, but for objects. Retrieves a property from each entry in the object, as if by _.property
         * @param object The object to transform
         * @param iteratee The property name to retrieve
         * @param context The optional context (value of `this`) to bind to
         */
        mapObject(object: any, iteratee: string, context?: any): _.Dictionary<any>;

        /**
         * Convert an object into a list of [key, value] pairs.
         * @param object Convert this object to a list of [key, value] pairs.
         * @return List of [key, value] pairs on `object`.
         **/
        pairs(object: any): any[][];

        /**
         * Returns a copy of the object where the keys have become the values and the values the keys.
         * For this to work, all of your object's values should be unique and string serializable.
         * @param object Object to invert key/value pairs.
         * @return An inverted key/value paired version of `object`.
         **/
        invert(object: any): any;

        /**
         * Returns a sorted list of the names of every method in an object - that is to say,
         * the name of every function property of the object.
         * @param object Object to pluck all function property names from.
         * @return List of all the function names on `object`.
         **/
        functions(object: any): string[];

        /**
         * @see _functions
         **/
        methods(object: any): string[];

        /**
         * Copy all of the properties in the source objects over to the destination object, and return
         * the destination object. It's in-order, so the last source will override properties of the
         * same name in previous arguments.
         * @param destination Object to extend all the properties from `sources`.
         * @param sources Extends `destination` with all properties from these source objects.
         * @return `destination` extended with all the properties from the `sources` objects.
         **/
        extend(destination: any,
               ...sources: any[]): any;

        /**
         * Like extend, but only copies own properties over to the destination object. (alias: assign)
         */
        extendOwn(destination: any,
                  ...source: any[]): any;

        /**
         * Like extend, but only copies own properties over to the destination object. (alias: extendOwn)
         */
        assign(destination: any,
               ...source: any[]): any;

        /**
         * Returns the first key on an object that passes a predicate test.
         * @param obj the object to search in
         * @param predicate Predicate function.
         * @param context `this` object in `iterator`, optional.
         */
        findKey<T>(obj: _.Dictionary<T>, predicate: _.ObjectIterator<T, boolean>, context?: any): string;

        /**
         * Return a copy of the object, filtered to only have values for the whitelisted keys
         * (or array of valid keys).
         * @param object Object to strip unwanted key/value pairs.
         * @keys The key/value pairs to keep on `object`.
         * @return Copy of `object` with only the `keys` properties.
         **/
        pick(object: any,
             ...keys: any[]): any;

        /**
         * @see _.pick
         **/
        pick(object: any,
             fn: (value: any, key: any, object: any) => any): any;

        /**
         * Return a copy of the object, filtered to omit the blacklisted keys (or array of keys).
         * @param object Object to strip unwanted key/value pairs.
         * @param keys The key/value pairs to remove on `object`.
         * @return Copy of `object` without the `keys` properties.
         **/
        omit(object: any,
             ...keys: string[]): any;

        /**
         * @see _.omit
         **/
        omit(object: any,
             keys: string[]): any;

        /**
         * @see _.omit
         **/
        omit(object: any,
             iteratee: Function): any;

        /**
         * Fill in null and undefined properties in object with values from the defaults objects,
         * and return the object. As soon as the property is filled, further defaults will have no effect.
         * @param object Fill this object with default values.
         * @param defaults The default values to add to `object`.
         * @return `object` with added `defaults` values.
         **/
        defaults(object: any,
                 ...defaults: any[]): any;


        /**
         * Creates an object that inherits from the given prototype object.
         * If additional properties are provided then they will be added to the
         * created object.
         * @param prototype The prototype that the returned object will inherit from.
         * @param props Additional props added to the returned object.
         **/
        create(prototype: any, props?: Object): any;

        /**
         * Create a shallow-copied clone of the object.
         * Any nested objects or arrays will be copied by reference, not duplicated.
         * @param object Object to clone.
         * @return Copy of `object`.
         **/
        clone<T>(object: T): T;

        /**
         * Invokes interceptor with the object, and then returns object. The primary purpose of this method
         * is to "tap into" a method chain, in order to perform operations on intermediate results within the chain.
         * @param object Argument to `interceptor`.
         * @param intercepter The function to modify `object` before continuing the method chain.
         * @return Modified `object`.
         **/
        tap<T>(object: T, intercepter: Function): T;

        /**
         * Does the object contain the given key? Identical to object.hasOwnProperty(key), but uses a safe
         * reference to the hasOwnProperty function, in case it's been overridden accidentally.
         * @param object Object to check for `key`.
         * @param key The key to check for on `object`.
         * @return True if `key` is a property on `object`, otherwise false.
         **/
        has(object: any, key: string): boolean;

        /**
         * Returns a predicate function that will tell you if a passed in object contains all of the key/value properties present in attrs.
         * @param attrs Object with key values pair
         * @return Predicate function
         **/
        matches<T>(attrs: T): _.ListIterator<T, boolean>;

        /**
         * Returns a predicate function that will tell you if a passed in object contains all of the key/value properties present in attrs.
         * @see _.matches
         * @param attrs Object with key values pair
         * @return Predicate function
         **/
        matcher<T>(attrs: T): _.ListIterator<T, boolean>;

        /**
         * Returns a function that will itself return the key property of any passed-in object.
         * @param key Property of the object.
         *  @return Function which accept an object an returns the value of key in that object.
         **/
        property(key: string): (object: Object) => any;

        /**
         * Returns a function that will itself return the value of a object key property.
         * @param key The object to get the property value from.
         * @return Function which accept a key property in `object` and returns its value.
         **/
        propertyOf(object: Object): (key: string) => any;

        /**
         * Performs an optimized deep comparison between the two objects,
         * to determine if they should be considered equal.
         * @param object Compare to `other`.
         * @param other Compare to `object`.
         * @return True if `object` is equal to `other`.
         **/
        isEqual(object: any, other: any): boolean;

        /**
         * Returns true if object contains no values.
         * @param object Check if this object has no properties or values.
         * @return True if `object` is empty.
         **/
        isEmpty(object: any): boolean;

        /**
         * Returns true if the keys and values in `properties` matches with the `object` properties.
         * @param object Object to be compared with `properties`.
         * @param properties Properties be compared with `object`
         * @return True if `object` has matching keys and values, otherwise false.
         **/
        isMatch(object: any, properties: any): boolean;

        /**
         * Returns true if object is a DOM element.
         * @param _object Check if this object is a DOM element.
         * @return True if `object` is a DOM element, otherwise false.
         **/
        isElement(_object: any): _object is Element;

        /**
         * Returns true if object is an Array.
         * @param _object Check if this object is an Array.
         * @return True if `object` is an Array, otherwise false.
         **/
        isArray(_object: any): _object is any[];

        /**
         * Returns true if object is an Array.
         * @param _object Check if this object is an Array.
         * @return True if `object` is an Array, otherwise false.
         **/
        isArray<T>(_object: any): _object is T[];

        /**
         * Returns true if object is a Symbol.
         * @param _object Check if this object is a Symbol.
         * @return True if `object` is a Symbol, otherwise false.
         **/
        isSymbol(_object: any): _object is symbol;

        /**
         * Returns true if value is an Object. Note that JavaScript arrays and functions are objects,
         * while (normal) strings and numbers are not.
         * @param _object Check if this object is an Object.
         * @return True of `object` is an Object, otherwise false.
         **/
        isObject(_object: any): boolean;

        /**
         * Returns true if object is an Arguments object.
         * @param _object Check if this object is an Arguments object.
         * @return True if `object` is an Arguments object, otherwise false.
         **/
        isArguments(_object: any): _object is IArguments;

        /**
         * Returns true if object is a Function.
         * @param _object Check if this object is a Function.
         * @return True if `object` is a Function, otherwise false.
         **/
        isFunction(_object: any): _object is Function;

        /**
         * Returns true if object inherits from an Error.
         * @param _object Check if this object is an Error.
         * @return True if `object` is a Error, otherwise false.
         **/
        isError(_object: any): _object is Error;

        /**
         * Returns true if object is a String.
         * @param _object Check if this object is a String.
         * @return True if `object` is a String, otherwise false.
         **/
        isString(_object: any): _object is string;

        /**
         * Returns true if object is a Number (including NaN).
         * @param _object Check if this object is a Number.
         * @return True if `object` is a Number, otherwise false.
         **/
        isNumber(_object: any): _object is number;

        /**
         * Returns true if object is a finite Number.
         * @param _object Check if this object is a finite Number.
         * @return True if `object` is a finite Number.
         **/
        isFinite(_object: any): boolean;

        /**
         * Returns true if object is either true or false.
         * @param _object Check if this object is a bool.
         * @return True if `object` is a bool, otherwise false.
         **/
        isBoolean(_object: any): _object is boolean;

        /**
         * Returns true if object is a Date.
         * @param _object Check if this object is a Date.
         * @return True if `object` is a Date, otherwise false.
         **/
        isDate(_object: any): _object is Date;

        /**
         * Returns true if object is a RegExp.
         * @param _object Check if this object is a RegExp.
         * @return True if `object` is a RegExp, otherwise false.
         **/
        isRegExp(_object: any): _object is RegExp;

        /**
         * Returns true if object is NaN.
         * Note: this is not the same as the native isNaN function,
         * which will also return true if the variable is undefined.
         * @param object Check if this object is NaN.
         * @return True if `object` is NaN, otherwise false.
         **/
        isNaN(object: any): boolean;

        /**
         * Returns true if the value of object is null.
         * @param object Check if this object is null.
         * @return True if `object` is null, otherwise false.
         **/
        isNull(object: any): boolean;

        /**
         * Returns true if value is undefined.
         * @param object Check if this object is undefined.
         * @return True if `object` is undefined, otherwise false.
         **/
        isUndefined(value: any): boolean;

        /* *********
         * Utility *
         ********** */

        /**
         * Give control of the "_" variable back to its previous owner.
         * Returns a reference to the Underscore object.
         * @return Underscore object reference.
         **/
        noConflict(): any;

        /**
         * Returns the same value that is used as the argument. In math: f(x) = x
         * This function looks useless, but is used throughout Underscore as a default iterator.
         * @param value Identity of this object.
         * @return `value`.
         **/
        identity<T>(value: T): T;

        /**
         * Creates a function that returns the same value that is used as the argument of _.constant
         * @param value Identity of this object.
         * @return Function that return value.
         **/
        constant<T>(value: T): () => T;

        /**
         * Returns undefined irrespective of the arguments passed to it.  Useful as the default
         * for optional callback arguments.
         * Note there is no way to indicate a 'undefined' return, so it is currently typed as void.
         * @return undefined
         **/
        noop(): void;

        /**
         * Invokes the given iterator function n times.
         * Each invocation of iterator is called with an index argument
         * @param n Number of times to invoke `iterator`.
         * @param iterator Function iterator to invoke `n` times.
         * @param context `this` object in `iterator`, optional.
         **/
        times<TResult>(n: number, iterator: (n: number) => TResult, context?: any): TResult[];

        /**
         * Returns a random integer between min and max, inclusive. If you only pass one argument,
         * it will return a number between 0 and that number.
         * @param max The maximum random number.
         * @return A random number between 0 and `max`.
         **/
        random(max: number): number;

        /**
         * @see _.random
         * @param min The minimum random number.
         * @return A random number between `min` and `max`.
         **/
        random(min: number, max: number): number;

        /**
         * Allows you to extend Underscore with your own utility functions. Pass a hash of
         * {name: function} definitions to have your functions added to the Underscore object,
         * as well as the OOP wrapper.
         * @param object Mixin object containing key/function pairs to add to the Underscore object.
         **/
        mixin(object: any): void;

        /**
         * A mostly-internal function to generate callbacks that can be applied to each element
         * in a collection, returning the desired result -- either identity, an arbitrary callback,
         * a property matcher, or a propetery accessor.
         * @param string|Function|Object value The value to iterate over, usually the key.
         * @param any context
         * @return Callback that can be applied to each element in a collection.
         **/
        iteratee(value: string): Function;
        iteratee(value: Function, context?: any): Function;
        iteratee(value: Object): Function;

        /**
         * Generate a globally-unique id for client-side models or DOM elements that need one.
         * If prefix is passed, the id will be appended to it. Without prefix, returns an integer.
         * @param prefix A prefix string to start the unique ID with.
         * @return Unique string ID beginning with `prefix`.
         **/
        uniqueId(prefix?: string): string;

        /**
         * Escapes a string for insertion into HTML, replacing &, <, >, ", ', and / characters.
         * @param str Raw string to escape.
         * @return `str` HTML escaped.
         **/
        escape(str: string): string;

        /**
         * The opposite of escape, replaces &amp;, &lt;, &gt;, &quot;, and &#x27; with their unescaped counterparts.
         * @param str HTML escaped string.
         * @return `str` Raw string.
         **/
        unescape(str: string): string;

        /**
         * If the value of the named property is a function then invoke it; otherwise, return it.
         * @param object Object to maybe invoke function `property` on.
         * @param property The function by name to invoke on `object`.
         * @param defaultValue The value to be returned in case `property` doesn't exist or is undefined.
         * @return The result of invoking the function `property` on `object.
         **/
        result(object: any, property: string, defaultValue?: any): any;

        /**
         * Compiles JavaScript templates into functions that can be evaluated for rendering. Useful
         * for rendering complicated bits of HTML from JSON data sources. Template functions can both
         * interpolate variables, using <%= ... %>, as well as execute arbitrary JavaScript code, with
         * <% ... %>. If you wish to interpolate a value, and have it be HTML-escaped, use <%- ... %> When
         * you evaluate a template function, pass in a data object that has properties corresponding to
         * the template's free variables. If you're writing a one-off, you can pass the data object as
         * the second parameter to template in order to render immediately instead of returning a template
         * function. The settings argument should be a hash containing any _.templateSettings that should
         * be overridden.
         * @param templateString Underscore HTML template.
         * @param data Data to use when compiling `templateString`.
         * @param settings Settings to use while compiling.
         * @return Returns the compiled Underscore HTML template.
         **/
        template(templateString: string, settings?: _.TemplateSettings): (...data: any[]) => string;

        /**
         * By default, Underscore uses ERB-style template delimiters, change the
         * following template settings to use alternative delimiters.
         **/
        templateSettings: _.TemplateSettings;

        /**
         * Returns an integer timestamp for the current time, using the fastest method available in the runtime. Useful for implementing timing/animation functions.
         **/
        now(): number;

        /* **********
         * Chaining *
         *********** */

        /**
         * Returns a wrapped object. Calling methods on this object will continue to return wrapped objects
         * until value() is used.
         * @param obj Object to chain.
         * @return Wrapped `obj`.
         **/
        chain<T>(obj: T[]): _Chain<T>;
        chain<T>(obj: _.Dictionary<T>): _Chain<T>;
        chain<T extends {}>(obj: T): _Chain<T>;
    }

    interface Underscore<T> {

        /* *************
         * Collections *
         ************* */

        /**
         * Wrapped type `any[]`.
         * @see _.each
         **/
        each(iterator: _.ListIterator<T, void>, context?: any): _.List<T>;

        /**
         * @see _.each
         **/
        each(iterator: _.ObjectIterator<T, void>, context?: any): _.List<T>;

        /**
         * @see _.each
         **/
        forEach(iterator: _.ListIterator<T, void>, context?: any): _.List<T>;

        /**
         * @see _.each
         **/
        forEach(iterator: _.ObjectIterator<T, void>, context?: any): _.List<T>;

        /**
         * Wrapped type `any[]`.
         * @see _.map
         **/
        map<TResult>(iterator: _.ListIterator<T, TResult>, context?: any): TResult[];

        /**
         * Wrapped type `any[]`.
         * @see _.map
         **/
        map<TResult>(iterator: _.ObjectIterator<T, TResult>, context?: any): TResult[];

        /**
         * @see _.map
         **/
        collect<TResult>(iterator: _.ListIterator<T, TResult>, context?: any): TResult[];

        /**
         * @see _.map
         **/
        collect<TResult>(iterator: _.ObjectIterator<T, TResult>, context?: any): TResult[];

        /**
         * Wrapped type `any[]`.
         * @see _.reduce
         **/
        reduce<TResult>(iterator: _.MemoIterator<T, TResult>, memo?: TResult, context?: any): TResult;

        /**
         * @see _.reduce
         **/
        inject<TResult>(iterator: _.MemoIterator<T, TResult>, memo?: TResult, context?: any): TResult;

        /**
         * @see _.reduce
         **/
        foldl<TResult>(iterator: _.MemoIterator<T, TResult>, memo?: TResult, context?: any): TResult;

        /**
         * Wrapped type `any[]`.
         * @see _.reduceRight
         **/
        reduceRight<TResult>(iterator: _.MemoIterator<T, TResult>, memo?: TResult, context?: any): TResult;

        /**
         * @see _.reduceRight
         **/
        foldr<TResult>(iterator: _.MemoIterator<T, TResult>, memo?: TResult, context?: any): TResult;

        /**
         * Wrapped type `any[]`.
         * @see _.find
         **/
        find<T>(iterator: _.ListIterator<T, boolean> | _.ObjectIterator<T, boolean>, context?: any): T | undefined;

        /**
         * @see _.find
         **/
        find<T, U extends {}>(interator: U): T | undefined;

        /**
         * @see _.find
         **/
        find<T>(interator: string): T | undefined;

        /**
         * @see _.find
         **/
        detect<T>(iterator: _.ListIterator<T, boolean> | _.ObjectIterator<T, boolean>, context?: any): T
            | undefined;

        /**
         * @see _.find
         **/
        detect<T, U extends {}>(interator?: U): T | undefined;

        /**
         * @see _.find
         **/
        detect<T>(interator?: string): T | undefined;

        /**
         * Wrapped type `any[]`.
         * @see _.filter
         **/
        filter(iterator: _.ListIterator<T, boolean>, context?: any): T[];

        /**
         * @see _.filter
         **/
        select(iterator: _.ListIterator<T, boolean>, context?: any): T[];

        /**
         * Wrapped type `any[]`.
         * @see _.where
         **/
        where<U extends {}>(properties: U): T[];

        /**
         * Wrapped type `any[]`.
         * @see _.findWhere
         **/
        findWhere<U extends {}>(properties: U): T | undefined;

        /**
         * Wrapped type `any[]`.
         * @see _.reject
         **/
        reject(iterator: _.ListIterator<T, boolean>, context?: any): T[];

        /**
         * Wrapped type `any[]`.
         * @see _.all
         **/
        all(iterator?: _.ListIterator<T, boolean>, context?: any): boolean;

        /**
         * @see _.all
         **/
        every(iterator?: _.ListIterator<T, boolean>, context?: any): boolean;

        /**
         * Wrapped type `any[]`.
         * @see _.any
         **/
        any(iterator?: _.ListIterator<T, boolean>, context?: any): boolean;

        /**
         * @see _.any
         **/
        some(iterator?: _.ListIterator<T, boolean>, context?: any): boolean;

        /**
         * Wrapped type `any[]`.
         * @see _.contains
         **/
        contains(value: T, fromIndex?: number): boolean;

        /**
         * Alias for 'contains'.
         * @see contains
         **/
        include(value: T, fromIndex?: number): boolean;

        /**
         * Alias for 'contains'.
         * @see contains
         **/
        includes(value: T, fromIndex?: number): boolean;

        /**
         * Wrapped type `any[]`.
         * @see _.invoke
         **/
        invoke(methodName: string, ...args: any[]): any;

        /**
         * Wrapped type `any[]`.
         * @see _.pluck
         **/
        pluck(propertyName: string): any[];

        /**
         * Wrapped type `number[]`.
         * @see _.max
         **/
        max(): number;

        /**
         * Wrapped type `any[]`.
         * @see _.max
         **/
        max(iterator: _.ListIterator<T, number>, context?: any): T;

        /**
         * Wrapped type `any[]`.
         * @see _.max
         **/
        max(iterator?: _.ListIterator<T, any>, context?: any): T;

        /**
         * Wrapped type `number[]`.
         * @see _.min
         **/
        min(): number;

        /**
         * Wrapped type `any[]`.
         * @see _.min
         **/
        min(iterator: _.ListIterator<T, number>, context?: any): T;

        /**
         * Wrapped type `any[]`.
         * @see _.min
         **/
        min(iterator?: _.ListIterator<T, any>, context?: any): T;

        /**
         * Wrapped type `any[]`.
         * @see _.sortBy
         **/
        sortBy(iterator?: _.ListIterator<T, any>, context?: any): T[];

        /**
         * Wrapped type `any[]`.
         * @see _.sortBy
         **/
        sortBy(iterator: string, context?: any): T[];

        /**
         * Wrapped type `any[]`.
         * @see _.groupBy
         **/
        groupBy(iterator?: _.ListIterator<T, any>, context?: any): _.Dictionary<_.List<T>>;

        /**
         * Wrapped type `any[]`.
         * @see _.groupBy
         **/
        groupBy(iterator: string, context?: any): _.Dictionary<T[]>;

        /**
         * Wrapped type `any[]`.
         * @see _.indexBy
         **/
        indexBy(iterator: _.ListIterator<T, any>, context?: any): _.Dictionary<T>;

        /**
         * Wrapped type `any[]`.
         * @see _.indexBy
         **/
        indexBy(iterator: string, context?: any): _.Dictionary<T>;

        /**
         * Wrapped type `any[]`.
         * @see _.countBy
         **/
        countBy(iterator?: _.ListIterator<T, any>, context?: any): _.Dictionary<number>;

        /**
         * Wrapped type `any[]`.
         * @see _.countBy
         **/
        countBy(iterator: string, context?: any): _.Dictionary<number>;

        /**
         * Wrapped type `any[]`.
         * @see _.shuffle
         **/
        shuffle(): T[];

        /**
         * Wrapped type `any[]`.
         * @see _.sample
         **/
        sample<T>(n: number): T[];

        /**
         * @see _.sample
         **/
        sample<T>(): T;

        /**
         * Wrapped type `any`.
         * @see _.toArray
         **/
        toArray(): T[];

        /**
         * Wrapped type `any`.
         * @see _.size
         **/
        size(): number;

        /*********
         * Arrays *
         **********/

        /**
         * Wrapped type `any[]`.
         * @see _.first
         **/
        first(): T | undefined;

        /**
         * Wrapped type `any[]`.
         * @see _.first
         **/
        first(n: number): T[];

        /**
         * @see _.first
         **/
        head(): T | undefined;

        /**
         * @see _.first
         **/
        head(n: number): T[];

        /**
         * @see _.first
         **/
        take(): T;

        /**
         * @see _.first
         **/
        take(n: number): T[];

        /**
         * Wrapped type `any[]`.
         * @see _.initial
         **/
        initial(n?: number): T[];

        /**
         * Wrapped type `any[]`.
         * @see _.last
         **/
        last(): T | undefined;

        /**
         * Wrapped type `any[]`.
         * @see _.last
         **/
        last(n: number): T[];

        /**
         * Wrapped type `any[]`.
         * @see _.rest
         **/
        rest(n?: number): T[];

        /**
         * @see _.rest
         **/
        tail(n?: number): T[];

        /**
         * @see _.rest
         **/
        drop(n?: number): T[];

        /**
         * Wrapped type `any[]`.
         * @see _.compact
         **/
        compact(): T[];

        /**
         * Wrapped type `any`.
         * @see _.flatten
         **/
        flatten(shallow?: boolean): any[];

        /**
         * Wrapped type `any[]`.
         * @see _.without
         **/
        without(...values: T[]): T[];

        /**
         * Wrapped type `any[]`.
         * @see _.partition
         **/
        partition(iterator: _.ListIterator<T, boolean>, context?: any): T[][];

        /**
         * Wrapped type `any[][]`.
         * @see _.union
         **/
        union(...arrays: _.List<T>[]): T[];

        /**
         * Wrapped type `any[][]`.
         * @see _.intersection
         **/
        intersection(...arrays: _.List<T>[]): T[];

        /**
         * Wrapped type `any[]`.
         * @see _.difference
         **/
        difference(...others: _.List<T>[]): T[];

        /**
         * Wrapped type `any[]`.
         * @see _.uniq
         **/
        uniq(isSorted?: boolean, iterator?: _.ListIterator<T, any>): T[];

        /**
         * Wrapped type `any[]`.
         * @see _.uniq
         **/
        uniq<TSort>(iterator?: _.ListIterator<T, TSort>, context?: any): T[];

        /**
         * @see _.uniq
         **/
        unique<TSort>(isSorted?: boolean, iterator?: _.ListIterator<T, TSort>): T[];

        /**
         * @see _.uniq
         **/
        unique<TSort>(iterator?: _.ListIterator<T, TSort>, context?: any): T[];

        /**
         * Wrapped type `any[][]`.
         * @see _.zip
         **/
        zip(...arrays: any[][]): any[][];

        /**
         * Wrapped type `any[][]`.
         * @see _.unzip
         **/
        unzip(...arrays: any[][]): any[][];

        /**
         * Wrapped type `any[][]`.
         * @see _.object
         **/
        object(...keyValuePairs: any[][]): any;

        /**
         * @see _.object
         **/
        object(values?: any): any;

        /**
         * Wrapped type `any[]`.
         * @see _.indexOf
         **/
        indexOf(value: T, isSorted?: boolean): number;

        /**
         * @see _.indexOf
         **/
        indexOf(value: T, startFrom: number): number;

        /**
         * Wrapped type `any[]`.
         * @see _.lastIndexOf
         **/
        lastIndexOf(value: T, from?: number): number;

        /**
         * @see _.findIndex
         **/
        findIndex<T>(array: _.List<T>, predicate: _.ListIterator<T, boolean> | {}, context?: any): number;

        /**
         * @see _.findLastIndex
         **/
        findLastIndex<T>(array: _.List<T>, predicate: _.ListIterator<T, boolean> | {}, context?: any): number;

        /**
         * Wrapped type `any[]`.
         * @see _.sortedIndex
         **/
        sortedIndex(value: T, iterator?: (x: T) => any, context?: any): number;

        /**
         * Wrapped type `number`.
         * @see _.range
         **/
        range(stop: number, step?: number): number[];

        /**
         * Wrapped type `number`.
         * @see _.range
         **/
        range(): number[];

        /**
         * Wrapped type any[][].
         * @see _.chunk
         **/
        chunk(): any[][];

        /* ***********
         * Functions *
         ************ */

        /**
         * Wrapped type `Function`.
         * @see _.bind
         **/
        bind(object: any, ...args: any[]): Function;

        /**
         * Wrapped type `object`.
         * @see _.bindAll
         **/
        bindAll(...methodNames: string[]): any;

        /**
         * Wrapped type `Function`.
         * @see _.partial
         **/
        partial(...args: any[]): Function;

        /**
         * Wrapped type `Function`.
         * @see _.memoize
         **/
        memoize(hashFn?: (n: any) => string): Function;

        /**
         * Wrapped type `Function`.
         * @see _.defer
         **/
        defer(...args: any[]): void;

        /**
         * Wrapped type `Function`.
         * @see _.delay
         **/
        delay(wait: number, ...args: any[]): any;

        /**
         * @see _.delay
         **/
        delay(...args: any[]): any;

        /**
         * Wrapped type `Function`.
         * @see _.throttle
         **/
        throttle(wait: number, options?: _.ThrottleSettings): Function & _.Cancelable;

        /**
         * Wrapped type `Function`.
         * @see _.debounce
         **/
        debounce(wait: number, immediate?: boolean): Function & _.Cancelable;

        /**
         * Wrapped type `Function`.
         * @see _.once
         **/
        once(): Function;

        /**
         * Wrapped type `Function`.
         * @see _.once
         **/
        restArgs(starIndex?: number): Function;

        /**
         * Wrapped type `number`.
         * @see _.after
         **/
        after(fn: Function): Function;

        /**
         * Wrapped type `number`.
         * @see _.before
         **/
        before(fn: Function): Function;

        /**
         * Wrapped type `Function`.
         * @see _.wrap
         **/
        wrap(wrapper: Function): () => Function;

        /**
         * Wrapped type `Function`.
         * @see _.negate
         **/
        negate(): (...args: any[]) => boolean;

        /**
         * Wrapped type `Function[]`.
         * @see _.compose
         **/
        compose(...functions: Function[]): Function;

        /********* *
         * Objects *
         ********** */

        /**
         * Wrapped type `object`.
         * @see _.keys
         **/
        keys(): string[];

        /**
         * Wrapped type `object`.
         * @see _.allKeys
         **/
        allKeys(): string[];

        /**
         * Wrapped type `object`.
         * @see _.values
         **/
        values(): T[];

        /**
         * Wrapped type `object`.
         * @see _.pairs
         **/
        pairs(): any[][];

        /**
         * Wrapped type `object`.
         * @see _.invert
         **/
        invert(): any;

        /**
         * Wrapped type `object`.
         * @see _.functions
         **/
        functions(): string[];

        /**
         * @see _.functions
         **/
        methods(): string[];

        /**
         * Wrapped type `object`.
         * @see _.extend
         **/
        extend(...sources: any[]): any;

        /**
         * Wrapped type `object`.
         * @see _.extend
         **/
        findKey(predicate: _.ObjectIterator<any, boolean>, context?: any): any

        /**
         * Wrapped type `object`.
         * @see _.pick
         **/
        pick(...keys: any[]): any;
        pick(keys: any[]): any;
        pick(fn: (value: any, key: any, object: any) => any): any;

        /**
         * Wrapped type `object`.
         * @see _.omit
         **/
        omit(...keys: string[]): any;
        omit(keys: string[]): any;
        omit(fn: Function): any;

        /**
         * Wrapped type `object`.
         * @see _.defaults
         **/
        defaults(...defaults: any[]): any;

        /**
         * Wrapped type `any`.
         * @see _.create
         **/
        create(props?: Object): any;

        /**
         * Wrapped type `any[]`.
         * @see _.clone
         **/
        clone(): T;

        /**
         * Wrapped type `object`.
         * @see _.tap
         **/
        tap(interceptor: (...as: any[]) => any): any;

        /**
         * Wrapped type `object`.
         * @see _.has
         **/
        has(key: string): boolean;

        /**
         * Wrapped type `any[]`.
         * @see _.matches
         **/
        matches(): _.ListIterator<T, boolean>;

        /**
         * Wrapped type `any[]`.
         * @see _.matcher
         **/
        matcher(): _.ListIterator<T, boolean>;

        /**
         * Wrapped type `string`.
         * @see _.property
         **/
        property(): (object: Object) => any;

        /**
         * Wrapped type `object`.
         * @see _.propertyOf
         **/
        propertyOf(): (key: string) => any;

        /**
         * Wrapped type `object`.
         * @see _.isEqual
         **/
        isEqual(other: any): boolean;

        /**
         * Wrapped type `object`.
         * @see _.isEmpty
         **/
        isEmpty(): boolean;

        /**
         * Wrapped type `object`.
         * @see _.isMatch
         **/
        isMatch(): boolean;

        /**
         * Wrapped type `object`.
         * @see _.isElement
         **/
        isElement(): boolean;

        /**
         * Wrapped type `object`.
         * @see _.isArray
         **/
        isArray(): boolean;

        /**
         * Wrapped type `object`.
         * @see _.isSymbol
         **/
        isSymbol(): boolean;

        /**
         * Wrapped type `object`.
         * @see _.isObject
         **/
        isObject(): boolean;

        /**
         * Wrapped type `object`.
         * @see _.isArguments
         **/
        isArguments(): boolean;

        /**
         * Wrapped type `object`.
         * @see _.isFunction
         **/
        isFunction(): boolean;

        /**
         * Wrapped type `object`.
         * @see _.isError
         **/
        isError(): boolean;

        /**
         * Wrapped type `object`.
         * @see _.isString
         **/
        isString(): boolean;

        /**
         * Wrapped type `object`.
         * @see _.isNumber
         **/
        isNumber(): boolean;

        /**
         * Wrapped type `object`.
         * @see _.isFinite
         **/
        isFinite(): boolean;

        /**
         * Wrapped type `object`.
         * @see _.isBoolean
         **/
        isBoolean(): boolean;

        /**
         * Wrapped type `object`.
         * @see _.isDate
         **/
        isDate(): boolean;

        /**
         * Wrapped type `object`.
         * @see _.isRegExp
         **/
        isRegExp(): boolean;

        /**
         * Wrapped type `object`.
         * @see _.isNaN
         **/
        isNaN(): boolean;

        /**
         * Wrapped type `object`.
         * @see _.isNull
         **/
        isNull(): boolean;

        /**
         * Wrapped type `object`.
         * @see _.isUndefined
         **/
        isUndefined(): boolean;

        /********* *
         * Utility *
         ********** */

        /**
         * Wrapped type `any`.
         * @see _.identity
         **/
        identity(): any;

        /**
         * Wrapped type `any`.
         * @see _.constant
         **/
        constant(): () => T;

        /**
         * Wrapped type `any`.
         * @see _.noop
         **/
        noop(): void;

        /**
         * Wrapped type `number`.
         * @see _.times
         **/
        times<TResult>(iterator: (n: number) => TResult, context?: any): TResult[];

        /**
         * Wrapped type `number`.
         * @see _.random
         **/
        random(): number;
        /**
         * Wrapped type `number`.
         * @see _.random
         **/
        random(max: number): number;

        /**
         * Wrapped type `object`.
         * @see _.mixin
         **/
        mixin(): void;

        /**
         * Wrapped type `string|Function|Object`.
         * @see _.iteratee
         **/
        iteratee(context?: any): Function;

        /**
         * Wrapped type `string`.
         * @see _.uniqueId
         **/
        uniqueId(): string;

        /**
         * Wrapped type `string`.
         * @see _.escape
         **/
        escape(): string;

        /**
         * Wrapped type `string`.
         * @see _.unescape
         **/
        unescape(): string;

        /**
         * Wrapped type `object`.
         * @see _.result
         **/
        result(property: string, defaultValue?: any): any;

        /**
         * Wrapped type `string`.
         * @see _.template
         **/
        template(settings?: _.TemplateSettings): (...data: any[]) => string;

        /********** *
         * Chaining *
         *********** */

        /**
         * Wrapped type `any`.
         * @see _.chain
         **/
        chain(): _Chain<T>;

        /**
         * Wrapped type `any`.
         * Extracts the value of a wrapped object.
         * @return Value of the wrapped object.
         **/
        value<TResult>(): TResult;
    }

    interface _Chain<T> {


        /* EXTENSIONS - BEGIN */
        // TODO find a way of easy and nice extending typings without modifying this file

        get<TArray extends Array<any[]>>(path: string | string[], options?: GetOptions): _ChainOfArrays<TArray[number]>;
        get<TArray extends any[]>(path: string | string[], options?: GetOptions): _Chain<TArray[number]>;
        get<TResult>(path: string | string[], options?: GetOptions): _ChainSingle<TResult>;
        get(path: string | string[], options?: GetOptions): _ChainSingle<any>;
        set(path: string | string[], value: string | number | boolean | null): _Chain<T>;

        asString(): _ChainSingle<string>;
        asInteger(): _ChainSingle<number>;

        tmap<T, TArray extends Array<any[]>>(converter: (subject: T) => TArray): _ChainOfArrays<TArray>;
        tmap<T, TResult extends any[]>(converter: (subject: T) => TResult): _Chain<TResult>;
        tmap<T, TResult>(converter: (subject: T) => TResult): _ChainSingle<TResult>;

        findStruct<TArray extends any[]>(path: string | string[], options?: GetOptions): _Chain<TArray[number]>;
        findStruct<TResult>(path: string | string[], options?: GetOptions): _ChainSingle<TResult>;

        or<TArray extends Array<any[]>>(value: TArray): _ChainOfArrays<TArray[number]>;
        or<TArray extends any[]>(value: TArray): _Chain<TArray[number]>;
        or<T>(value: T): _ChainSingle<T>;
        /* EXTENSTIONS - END */

        /* *************
         * Collections *
         ************* */

        /**
         * Wrapped type `any[]`.
         * @see _.each
         **/
        each(iterator: _.ListIterator<T, void>, context?: any): _Chain<T>;

        /**
         * @see _.each
         **/
        each(iterator: _.ObjectIterator<T, void>, context?: any): _Chain<T>;

        /**
         * @see _.each
         **/
        forEach(iterator: _.ListIterator<T, void>, context?: any): _Chain<T>;

        /**
         * @see _.each
         **/
        forEach(iterator: _.ObjectIterator<T, void>, context?: any): _Chain<T>;

        /**
         * Wrapped type `any[]`.
         * @see _.map
         **/
        map<TArray>(iterator: _.ListIterator<T, TArray[]>, context?: any): _ChainOfArrays<TArray>;

        /**
         * Wrapped type `any[]`.
         * @see _.map
         **/
        map<TResult>(iterator: _.ListIterator<T, TResult>, context?: any): _Chain<TResult>;

        /**
         * Wrapped type `any[]`.
         * @see _.map
         **/
        map<TArray>(iterator: _.ObjectIterator<T, TArray[]>, context?: any): _ChainOfArrays<TArray>;

        /**
         * Wrapped type `any[]`.
         * @see _.map
         **/
        map<TResult>(iterator: _.ObjectIterator<T, TResult>, context?: any): _Chain<TResult>;

        /**
         * @see _.map
         **/
        collect<TResult>(iterator: _.ListIterator<T, TResult>, context?: any): _Chain<TResult>;

        /**
         * @see _.map
         **/
        collect<TResult>(iterator: _.ObjectIterator<T, TResult>, context?: any): _Chain<TResult>;

        /**
         * Wrapped type `any[]`.
         * @see _.reduce
         **/
        reduce<TResult>(iterator: _.MemoIterator<T, TResult>, memo?: TResult, context?: any): _ChainSingle<TResult>;

        /**
         * @see _.reduce
         **/
        inject<TResult>(iterator: _.MemoIterator<T, TResult>, memo?: TResult, context?: any): _ChainSingle<TResult>;

        /**
         * @see _.reduce
         **/
        foldl<TResult>(iterator: _.MemoIterator<T, TResult>, memo?: TResult, context?: any): _ChainSingle<TResult>;

        /**
         * Wrapped type `any[]`.
         * @see _.reduceRight
         **/
        reduceRight<TResult>(iterator: _.MemoIterator<T, TResult>, memo?: TResult, context?: any): _ChainSingle<TResult>;

        /**
         * @see _.reduceRight
         **/
        foldr<TResult>(iterator: _.MemoIterator<T, TResult>, memo?: TResult, context?: any): _ChainSingle<TResult>;

        /**
         * Wrapped type `any[]`.
         * @see _.find
         **/
        find<T>(iterator: _.ListIterator<T, boolean> | _.ObjectIterator<T, boolean>, context?: any): _ChainSingle<T
            | undefined>;

        /**
         * @see _.find
         **/
        find<T, U extends {}>(interator: U): _ChainSingle<T | undefined>;

        /**
         * @see _.find
         **/
        find<T>(interator: string): _ChainSingle<T | undefined>;

        /**
         * @see _.find
         **/
        detect<T>(iterator: _.ListIterator<T, boolean> | _.ObjectIterator<T, boolean>, context?: any): _ChainSingle<T
            | undefined>;

        /**
         * @see _.find
         **/
        detect<T, U extends {}>(interator: U): _ChainSingle<T | undefined>;

        /**
         * @see _.find
         **/
        detect<T>(interator: string): _ChainSingle<T | undefined>;

        /**
         * Wrapped type `any[]`.
         * @see _.filter
         **/
        filter(iterator: _.ListIterator<T, boolean>, context?: any): _Chain<T>;

        /**
         * @see _.filter
         **/
        select(iterator: _.ListIterator<T, boolean>, context?: any): _Chain<T>;

        /**
         * Wrapped type `any[]`.
         * @see _.where
         **/
        where<U extends {}>(properties: U): _Chain<T>;

        /**
         * Wrapped type `any[]`.
         * @see _.findWhere
         **/
        findWhere<U extends {}>(properties: U): _ChainSingle<T>;

        /**
         * Wrapped type `any[]`.
         * @see _.reject
         **/
        reject(iterator: _.ListIterator<T, boolean>, context?: any): _Chain<T>;

        /**
         * Wrapped type `any[]`.
         * @see _.all
         **/
        all(iterator?: _.ListIterator<T, boolean>, context?: any): _ChainSingle<boolean>;

        /**
         * @see _.all
         **/
        every(iterator?: _.ListIterator<T, boolean>, context?: any): _ChainSingle<boolean>;

        /**
         * Wrapped type `any[]`.
         * @see _.any
         **/
        any(iterator?: _.ListIterator<T, boolean>, context?: any): _ChainSingle<boolean>;

        /**
         * @see _.any
         **/
        some(iterator?: _.ListIterator<T, boolean>, context?: any): _ChainSingle<boolean>;

        /**
         * Wrapped type `any[]`.
         * @see _.contains
         **/
        contains(value: T, fromIndex?: number): _ChainSingle<boolean>;

        /**
         * Alias for 'contains'.
         * @see contains
         **/
        include(value: T, fromIndex?: number): _ChainSingle<boolean>;

        /**
         * Alias for 'contains'.
         * @see contains
         **/
        includes(value: T, fromIndex?: number): _ChainSingle<boolean>;

        /**
         * Wrapped type `any[]`.
         * @see _.invoke
         **/
        invoke(methodName: string, ...args: any[]): _Chain<T>;

        /**
         * Wrapped type `any[]`.
         * @see _.pluck
         **/
        pluck(propertyName: string): _Chain<any>;

        /**
         * Wrapped type `number[]`.
         * @see _.max
         **/
        max(): _ChainSingle<T>;

        /**
         * Wrapped type `any[]`.
         * @see _.max
         **/
        max(iterator: _.ListIterator<T, number>, context?: any): _ChainSingle<T>;

        /**
         * Wrapped type `any[]`.
         * @see _.max
         **/
        max(iterator?: _.ListIterator<T, any>, context?: any): _ChainSingle<T>;

        /**
         * Wrapped type `number[]`.
         * @see _.min
         **/
        min(): _ChainSingle<T>;

        /**
         * Wrapped type `any[]`.
         * @see _.min
         **/
        min(iterator: _.ListIterator<T, number>, context?: any): _ChainSingle<T>;

        /**
         * Wrapped type `any[]`.
         * @see _.min
         **/
        min(iterator?: _.ListIterator<T, any>, context?: any): _ChainSingle<T>;

        /**
         * Wrapped type `any[]`.
         * @see _.sortBy
         **/
        sortBy(iterator?: _.ListIterator<T, any>, context?: any): _Chain<T>;

        /**
         * Wrapped type `any[]`.
         * @see _.sortBy
         **/
        sortBy(iterator: string, context?: any): _Chain<T>;

        /**
         * Wrapped type `any[]`.
         * @see _.groupBy
         **/
        groupBy(iterator?: _.ListIterator<T, any>, context?: any): _ChainOfArrays<T>;

        /**
         * Wrapped type `any[]`.
         * @see _.groupBy
         **/
        groupBy(iterator: string, context?: any): _ChainOfArrays<T>;

        /**
         * Wrapped type `any[]`.
         * @see _.indexBy
         **/
        indexBy(iterator: _.ListIterator<T, any>, context?: any): _Chain<T>;

        /**
         * Wrapped type `any[]`.
         * @see _.indexBy
         **/
        indexBy(iterator: string, context?: any): _Chain<T>;

        /**
         * Wrapped type `any[]`.
         * @see _.countBy
         **/
        countBy(iterator?: _.ListIterator<T, any>, context?: any): _Chain<T>;

        /**
         * Wrapped type `any[]`.
         * @see _.countBy
         **/
        countBy(iterator: string, context?: any): _Chain<T>;

        /**
         * Wrapped type `any[]`.
         * @see _.shuffle
         **/
        shuffle(): _Chain<T>;

        /**
         * Wrapped type `any[]`.
         * @see _.sample
         **/
        sample<T>(n: number): _Chain<T>;

        /**
         * @see _.sample
         **/
        sample<T>(): _Chain<T>;

        /**
         * Wrapped type `any`.
         * @see _.toArray
         **/
        toArray(): _Chain<T>;

        /**
         * Wrapped type `any`.
         * @see _.size
         **/
        size(): _ChainSingle<number>;

        /*********
         * Arrays *
         **********/

        /**
         * Wrapped type `any[]`.
         * @see _.first
         **/
        first(): _ChainSingle<T | undefined>;

        /**
         * Wrapped type `any[]`.
         * @see _.first
         **/
        first(n: number): _Chain<T>;

        /**
         * @see _.first
         **/
        head(): _Chain<T>;

        /**
         * @see _.first
         **/
        head(n: number): _Chain<T>;

        /**
         * @see _.first
         **/
        take(): _Chain<T>;

        /**
         * @see _.first
         **/
        take(n: number): _Chain<T>;

        /**
         * Wrapped type `any[]`.
         * @see _.initial
         **/
        initial(n?: number): _Chain<T>;

        /**
         * Wrapped type `any[]`.
         * @see _.last
         **/
        last(): _ChainSingle<T>;

        /**
         * Wrapped type `any[]`.
         * @see _.last
         **/
        last(n: number): _Chain<T>;

        /**
         * Wrapped type `any[]`.
         * @see _.rest
         **/
        rest(n?: number): _Chain<T>;

        /**
         * @see _.rest
         **/
        tail(n?: number): _Chain<T>;

        /**
         * @see _.rest
         **/
        drop(n?: number): _Chain<T>;

        /**
         * Wrapped type `any[]`.
         * @see _.compact
         **/
        compact(): _Chain<T>;

        /**
         * Wrapped type `any`.
         * @see _.flatten
         **/
        flatten(shallow?: boolean): _Chain<any>;

        /**
         * Wrapped type `any[]`.
         * @see _.without
         **/
        without(...values: T[]): _Chain<T>;

        /**
         * Wrapped type `any[]`.
         * @see _.partition
         **/
        partition(iterator: _.ListIterator<T, boolean>, context?: any): _Chain<T[]>;

        /**
         * Wrapped type `any[][]`.
         * @see _.union
         **/
        union(...arrays: _.List<T>[]): _Chain<T>;

        /**
         * Wrapped type `any[][]`.
         * @see _.intersection
         **/
        intersection(...arrays: _.List<T>[]): _Chain<T>;

        /**
         * Wrapped type `any[]`.
         * @see _.difference
         **/
        difference(...others: _.List<T>[]): _Chain<T>;

        /**
         * Wrapped type `any[]`.
         * @see _.uniq
         **/
        uniq(isSorted?: boolean, iterator?: _.ListIterator<T, any>): _Chain<T>;

        /**
         * Wrapped type `any[]`.
         * @see _.uniq
         **/
        uniq<TSort>(iterator?: _.ListIterator<T, TSort>, context?: any): _Chain<T>;

        /**
         * @see _.uniq
         **/
        unique<TSort>(isSorted?: boolean, iterator?: _.ListIterator<T, TSort>): _Chain<T>;

        /**
         * @see _.uniq
         **/
        unique<TSort>(iterator?: _.ListIterator<T, TSort>, context?: any): _Chain<T>;

        /**
         * Wrapped type `any[][]`.
         * @see _.zip
         **/
        zip(...arrays: any[][]): _Chain<T>;

        /**
         * Wrapped type `any[][]`.
         * @see _.unzip
         **/
        unzip(...arrays: any[][]): _Chain<T>;

        /**
         * Wrapped type `any[][]`.
         * @see _.object
         **/
        object(...keyValuePairs: any[][]): _Chain<T>;

        /**
         * @see _.object
         **/
        object(values?: any): _Chain<T>;

        /**
         * Wrapped type `any[]`.
         * @see _.indexOf
         **/
        indexOf(value: T, isSorted?: boolean): _ChainSingle<number>;

        /**
         * @see _.indexOf
         **/
        indexOf(value: T, startFrom: number): _ChainSingle<number>;

        /**
         * Wrapped type `any[]`.
         * @see _.lastIndexOf
         **/
        lastIndexOf(value: T, from?: number): _ChainSingle<number>;

        /**
         * @see _.findIndex
         **/
        findIndex<T>(predicate: _.ListIterator<T, boolean> | {}, context?: any): _ChainSingle<number>;

        /**
         * @see _.findLastIndex
         **/
        findLastIndex<T>(predicate: _.ListIterator<T, boolean> | {}, context?: any): _ChainSingle<number>;

        /**
         * Wrapped type `any[]`.
         * @see _.sortedIndex
         **/
        sortedIndex(value: T, iterator?: (x: T) => any, context?: any): _ChainSingle<number>;

        /**
         * Wrapped type `number`.
         * @see _.range
         **/
        range(stop: number, step?: number): _Chain<T>;

        /**
         * Wrapped type `number`.
         * @see _.range
         **/
        range(): _Chain<T>;

        /**
         * Wrapped type `any[][]`.
         * @see _.chunk
         **/
        chunk(): _Chain<T>;

        /* ***********
         * Functions *
         ************ */

        /**
         * Wrapped type `Function`.
         * @see _.bind
         **/
        bind(object: any, ...args: any[]): _Chain<T>;

        /**
         * Wrapped type `object`.
         * @see _.bindAll
         **/
        bindAll(...methodNames: string[]): _Chain<T>;

        /**
         * Wrapped type `Function`.
         * @see _.partial
         **/
        partial(...args: any[]): _Chain<T>;

        /**
         * Wrapped type `Function`.
         * @see _.memoize
         **/
        memoize(hashFn?: (n: any) => string): _Chain<T>;

        /**
         * Wrapped type `Function`.
         * @see _.defer
         **/
        defer(...args: any[]): _Chain<T>;

        /**
         * Wrapped type `Function`.
         * @see _.delay
         **/
        delay(wait: number, ...args: any[]): _Chain<T>;

        /**
         * @see _.delay
         **/
        delay(...args: any[]): _Chain<T>;

        /**
         * Wrapped type `Function`.
         * @see _.throttle
         **/
        throttle(wait: number, options?: _.ThrottleSettings): _Chain<T>;

        /**
         * Wrapped type `Function`.
         * @see _.debounce
         **/
        debounce(wait: number, immediate?: boolean): _Chain<T>;

        /**
         * Wrapped type `Function`.
         * @see _.once
         **/
        once(): _Chain<T>;

        /**
         * Wrapped type `Function`.
         * @see _.once
         **/
        restArgs(startIndex?: number): _Chain<T>;

        /**
         * Wrapped type `number`.
         * @see _.after
         **/
        after(func: Function): _Chain<T>;

        /**
         * Wrapped type `number`.
         * @see _.before
         **/
        before(fn: Function): _Chain<T>;

        /**
         * Wrapped type `Function`.
         * @see _.wrap
         **/
        wrap(wrapper: Function): () => _Chain<T>;

        /**
         * Wrapped type `Function`.
         * @see _.negate
         **/
        negate(): _Chain<T>;

        /**
         * Wrapped type `Function[]`.
         * @see _.compose
         **/
        compose(...functions: Function[]): _Chain<T>;

        /********* *
         * Objects *
         ********** */

        /**
         * Wrapped type `object`.
         * @see _.keys
         **/
        keys(): _Chain<string>;

        /**
         * Wrapped type `object`.
         * @see _.allKeys
         **/
        allKeys(): _Chain<string>;

        /**
         * Wrapped type `object`.
         * @see _.values
         **/
        values(): _Chain<T>;

        /**
         * Wrapped type `object`.
         * @see _.pairs
         **/
        pairs(): _Chain<T>;

        /**
         * Wrapped type `object`.
         * @see _.invert
         **/
        invert(): _Chain<T>;

        /**
         * Wrapped type `object`.
         * @see _.functions
         **/
        functions(): _Chain<T>;

        /**
         * @see _.functions
         **/
        methods(): _Chain<T>;

        /**
         * Wrapped type `object`.
         * @see _.extend
         **/
        extend(...sources: any[]): _Chain<T>;

        /**
         * Wrapped type `object`.
         * @see _.extend
         **/
        findKey(predicate: _.ObjectIterator<any, boolean>, context?: any): _Chain<T>

        /**
         * Wrapped type `object`.
         * @see _.pick
         **/
        pick(...keys: any[]): _Chain<T>;
        pick(keys: any[]): _Chain<T>;
        pick(fn: (value: any, key: any, object: any) => any): _Chain<T>;

        /**
         * Wrapped type `object`.
         * @see _.omit
         **/
        omit(...keys: string[]): _Chain<T>;
        omit(keys: string[]): _Chain<T>;
        omit(iteratee: Function): _Chain<T>;

        /**
         * Wrapped type `object`.
         * @see _.defaults
         **/
        defaults(...defaults: any[]): _Chain<T>;

        /**
         * Wrapped type `any`.
         * @see _.create
         **/
        create(props?: Object): _Chain<T>;

        /**
         * Wrapped type `any[]`.
         * @see _.clone
         **/
        clone(): _Chain<T>;

        /**
         * Wrapped type `object`.
         * @see _.tap
         **/
        tap(interceptor: (...as: any[]) => any): _Chain<T>;

        /**
         * Wrapped type `object`.
         * @see _.has
         **/
        has(key: string): _Chain<T>;

        /**
         * Wrapped type `any[]`.
         * @see _.matches
         **/
        matches(): _Chain<T>;

        /**
         * Wrapped type `any[]`.
         * @see _.matcher
         **/
        matcher(): _Chain<T>;

        /**
         * Wrapped type `string`.
         * @see _.property
         **/
        property(): _Chain<T>;

        /**
         * Wrapped type `object`.
         * @see _.propertyOf
         **/
        propertyOf(): _Chain<T>;

        /**
         * Wrapped type `object`.
         * @see _.isEqual
         **/
        isEqual(other: any): _Chain<T>;

        /**
         * Wrapped type `object`.
         * @see _.isEmpty
         **/
        isEmpty(): _Chain<T>;

        /**
         * Wrapped type `object`.
         * @see _.isMatch
         **/
        isMatch(): _Chain<T>;

        /**
         * Wrapped type `object`.
         * @see _.isElement
         **/
        isElement(): _Chain<T>;

        /**
         * Wrapped type `object`.
         * @see _.isArray
         **/
        isArray(): _Chain<T>;

        /**
         * Wrapped type `object`.
         * @see _.isSymbol
         **/
        isSymbol(): _Chain<T>;

        /**
         * Wrapped type `object`.
         * @see _.isObject
         **/
        isObject(): _Chain<T>;

        /**
         * Wrapped type `object`.
         * @see _.isArguments
         **/
        isArguments(): _Chain<T>;

        /**
         * Wrapped type `object`.
         * @see _.isFunction
         **/
        isFunction(): _Chain<T>;

        /**
         * Wrapped type `object`.
         * @see _.isError
         **/
        isError(): _Chain<T>;

        /**
         * Wrapped type `object`.
         * @see _.isString
         **/
        isString(): _Chain<T>;

        /**
         * Wrapped type `object`.
         * @see _.isNumber
         **/
        isNumber(): _Chain<T>;

        /**
         * Wrapped type `object`.
         * @see _.isFinite
         **/
        isFinite(): _Chain<T>;

        /**
         * Wrapped type `object`.
         * @see _.isBoolean
         **/
        isBoolean(): _Chain<T>;

        /**
         * Wrapped type `object`.
         * @see _.isDate
         **/
        isDate(): _Chain<T>;

        /**
         * Wrapped type `object`.
         * @see _.isRegExp
         **/
        isRegExp(): _Chain<T>;

        /**
         * Wrapped type `object`.
         * @see _.isNaN
         **/
        isNaN(): _Chain<T>;

        /**
         * Wrapped type `object`.
         * @see _.isNull
         **/
        isNull(): _Chain<T>;

        /**
         * Wrapped type `object`.
         * @see _.isUndefined
         **/
        isUndefined(): _Chain<T>;

        /********* *
         * Utility *
         ********** */

        /**
         * Wrapped type `any`.
         * @see _.identity
         **/
        identity(): _Chain<T>;

        /**
         * Wrapped type `any`.
         * @see _.constant
         **/
        constant(): _Chain<T>;

        /**
         * Wrapped type `any`.
         * @see _.noop
         **/
        noop(): _Chain<T>;

        /**
         * Wrapped type `number`.
         * @see _.times
         **/
        times<TResult>(iterator: (n: number) => TResult, context?: any): _Chain<T>;

        /**
         * Wrapped type `number`.
         * @see _.random
         **/
        random(): _Chain<T>;
        /**
         * Wrapped type `number`.
         * @see _.random
         **/
        random(max: number): _Chain<T>;

        /**
         * Wrapped type `object`.
         * @see _.mixin
         **/
        mixin(): _Chain<T>;

        /**
         * Wrapped type `string|Function|Object`.
         * @see _.iteratee
         **/
        iteratee(context?: any): _Chain<T>;

        /**
         * Wrapped type `string`.
         * @see _.uniqueId
         **/
        uniqueId(): _Chain<T>;

        /**
         * Wrapped type `string`.
         * @see _.escape
         **/
        escape(): _Chain<T>;

        /**
         * Wrapped type `string`.
         * @see _.unescape
         **/
        unescape(): _Chain<T>;

        /**
         * Wrapped type `object`.
         * @see _.result
         **/
        result(property: string, defaultValue?: any): _Chain<T>;

        /**
         * Wrapped type `string`.
         * @see _.template
         **/
        template(settings?: _.TemplateSettings): (...data: any[]) => _Chain<T>;

        /************* *
         * Array proxy *
         ************** */

        /**
         * Returns a new array comprised of the array on which it is called
         * joined with the array(s) and/or value(s) provided as arguments.
         * @param arr Arrays and/or values to concatenate into a new array. See the discussion below for details.
         * @return A new array comprised of the array on which it is called
         **/
        concat(...arr: Array<T[]>): _Chain<T>;

        /**
         * Join all elements of an array into a string.
         * @param separator Optional. Specifies a string to separate each element of the array. The separator is converted to a string if necessary. If omitted, the array elements are separated with a comma.
         * @return The string conversions of all array elements joined into one string.
         **/
        join(separator?: any): _ChainSingle<T>;

        /**
         * Removes the last element from an array and returns that element.
         * @return Returns the popped element.
         **/
        pop(): _ChainSingle<T>;

        /**
         * Adds one or more elements to the end of an array and returns the new length of the array.
         * @param item The elements to add to the end of the array.
         * @return The array with the element added to the end.
         **/
        push(...item: Array<T>): _Chain<T>;

        /**
         * Reverses an array in place. The first array element becomes the last and the last becomes the first.
         * @return The reversed array.
         **/
        reverse(): _Chain<T>;

        /**
         * Removes the first element from an array and returns that element. This method changes the length of the array.
         * @return The shifted element.
         **/
        shift(): _ChainSingle<T>;

        /**
         * Returns a shallow copy of a portion of an array into a new array object.
         * @param start Zero-based index at which to begin extraction.
         * @param end Optional. Zero-based index at which to end extraction. slice extracts up to but not including end.
         * @return A shallow copy of a portion of an array into a new array object.
         **/
        slice(start: number, end?: number): _Chain<T>;

        /**
         * Sorts the elements of an array in place and returns the array. The sort is not necessarily stable. The default sort order is according to string Unicode code points.
         * @param compareFn Optional. Specifies a function that defines the sort order. If omitted, the array is sorted according to each character's Unicode code point value, according to the string conversion of each element.
         * @return The sorted array.
         **/
        sort(compareFn: (a: T, b: T) => boolean): _Chain<T>;

        /**
         * Changes the content of an array by removing existing elements and/or adding new elements.
         * @param index Index at which to start changing the array. If greater than the length of the array, actual starting index will be set to the length of the array. If negative, will begin that many elements from the end.
         * @param quantity An integer indicating the number of old array elements to remove. If deleteCount is 0, no elements are removed. In this case, you should specify at least one new element. If deleteCount is greater than the number of elements left in the array starting at index, then all of the elements through the end of the array will be deleted.
         * @param items The element to add to the array. If you don't specify any elements, splice will only remove elements from the array.
         * @return An array containing the deleted elements. If only one element is removed, an array of one element is returned. If no elements are removed, an empty array is returned.
         **/
        splice(index: number, quantity: number, ...items: Array<T>): _Chain<T>;

        /**
         * A string representing the specified array and its elements.
         * @return A string representing the specified array and its elements.
         **/
        toString(): _ChainSingle<T>;

        /**
         * Adds one or more elements to the beginning of an array and returns the new length of the array.
         * @param items The elements to add to the front of the array.
         * @return The array with the element added to the beginning.
         **/
        unshift(...items: Array<T>): _Chain<T>;

        /********** *
         * Chaining *
         *********** */

        /**
         * Wrapped type `any`.
         * @see _.chain
         **/
        chain(): _Chain<T>;

        /**
         * Wrapped type `any`.
         * @see _.value
         **/
        value<TResult>(): T[];
    }
    interface _ChainSingle<T> {
        /* EXTENSIONS - BEGIN */
        or<TArray extends Array<any[]>>(value: TArray): _ChainOfArrays<TArray[number]>;
        or<TArray extends any[]>(value: TArray): _Chain<TArray[number]>;
        or<T>(value: T): _ChainSingle<T>;
        /* EXTENSIONS - END */

        value(): T;
    }
    interface _ChainOfArrays<T> extends _Chain<T[]> {
        flatten(shallow?: boolean): _Chain<T>;
        mapObject(fn: _.ListIterator<T, any>): _ChainOfArrays<T>;
    }

    /* EXTENSIONS - BEGIN */

    interface GetOptions {
        followFunctions?: boolean;
    }

    /* EXTENSIONS - END */
}

declare module "sabre-ngv-app/app/AbstractCollection" {
    /// <ngv scope="public" />
    import {AbstractModel} from "sabre-ngv-app/app/AbstractModel";
    import {AbstractMixin} from "sabre-ngv-app/app/AbstractMixin";
    import {AbstractCollectionOptions} from "sabre-ngv-app/app/AbstractCollectionOptions";
    import {Silencable} from "sabre-ngv-app/app/Silencable";
    import {ModelDataList} from "sabre-ngv-app/_types";
    /**
     * Abstract base class for Collection classes.
     * Other classes should extend this class, not Backbone's one.
     * This class can provide additional, abstract functionalities for inherited classes.
     *
     */
    export class AbstractCollection<TModel extends AbstractModel = AbstractModel> extends AbstractMixin implements AbstractCollectionOptions {
        constructor(data?: ModelDataList, options?: AbstractCollectionOptions);
        /**
         * @inheritDoc
         * @param {ModelDataList} data Array of models for backbone's collection initial setup
         * @param {AbstractCollectionOptions} options Options for collection configuration
         */
        initialize(data?: ModelDataList, options?: AbstractCollectionOptions): void;
        /* Copied and MODIFIED from Backbone typings - BEGIN */
        comparator: ((element: TModel) => number) | ((compare: TModel, to?: TModel) => number);
        add(model: {} | TModel): TModel;
        add(models: ({} | TModel)[]): TModel[];
        addBound(model: {} | TModel): TModel;
        addBound(models: ({} | TModel)[]): TModel[];
        pluck(attribute: string): any[];
        push(model: TModel): TModel;
        pop(options?: Silencable): TModel;
        remove(model: {} | TModel, options?: Silencable): TModel;
        remove(models: ({} | TModel)[], options?: Silencable): TModel[];
        reset(models?: TModel[], options?: Silencable): TModel[];
        set(models?: TModel[], options?: Silencable): TModel[];
        shift(options?: Silencable): TModel;
        sort(options?: Silencable): AbstractCollection<TModel>;
        unshift(model: TModel): TModel;
        where(properties: any): TModel[];
        findWhere(properties: any): TModel;
        all(iterator?: _.ListIterator<TModel, boolean>, context?: any): boolean;
        any(iterator?: _.ListIterator<TModel, boolean>, context?: any): boolean;
        chain(): any;
        collect<TResult>(iterator: _.ListIterator<TModel, TResult>, context?: any): TResult[];
        contains(value: TModel): boolean;
        countBy(iterator?: _.ListIterator<TModel, any>): _.Dictionary<number>;
        countBy(iterator: string): _.Dictionary<number>;
        detect(iterator: _.ListIterator<TModel, boolean>, context?: any): TModel;
        difference(others: TModel[]): TModel[];
        drop(n?: number): TModel[];
        each(iterator: _.ListIterator<TModel, void>, context?: any): TModel[];
        every(iterator: _.ListIterator<TModel, boolean>, context?: any): boolean;
        filter(iterator: _.ListIterator<TModel, boolean>, context?: any): TModel[];
        find(iterator: _.ListIterator<TModel, boolean>, context?: any): TModel;
        findIndex(predicate: _.ListIterator<TModel, boolean>, context?: any): number;
        findLastIndex(predicate: _.ListIterator<TModel, boolean>, context?: any): number;
        first(): TModel;
        first(n: number): TModel[];
        foldl<TResult>(iterator: _.MemoIterator<TModel, TResult>, memo?: TResult, context?: any): TResult;
        foldr<TResult>(iterator: _.MemoIterator<TModel, TResult>, memo?: TResult, context?: any): TResult;
        forEach(iterator: _.ListIterator<TModel, void>, context?: any): TModel[];
        groupBy(iterator: _.ListIterator<TModel, any>, context?: any): _.Dictionary<TModel[]>;
        groupBy(iterator: string, context?: any): _.Dictionary<TModel[]>;
        head(): TModel;
        head(n: number): TModel[];
        include(value: TModel): boolean;
        includes(value: TModel): boolean;
        indexBy(iterator: _.ListIterator<TModel, any>, context?: any): _.Dictionary<TModel>;
        indexBy(iterator: string, context?: any): _.Dictionary<TModel>;
        indexOf(value: TModel, isSorted?: boolean): number;
        initial(): TModel;
        initial(n: number): TModel[];
        inject<TResult>(iterator: _.MemoIterator<TModel, TResult>, memo?: TResult, context?: any): TResult;
        invoke(methodName: string, ...args: any[]): any;
        isEmpty(): boolean;
        last(): TModel;
        last(n: number): TModel[];
        lastIndexOf(value: TModel, from?: number): number;
        map<TResult>(iterator: _.ListIterator<TModel, TResult>, context?: any): TResult[];
        max(iterator?: _.ListIterator<TModel, any>, context?: any): TModel;
        min(iterator?: _.ListIterator<TModel, any>, context?: any): TModel;
        partition(iterator: _.ListIterator<TModel, boolean>): TModel[][];
        reduce<TResult>(iterator: _.MemoIterator<TModel, TResult>, memo?: TResult, context?: any): TResult;
        reduceRight<TResult>(iterator: _.MemoIterator<TModel, TResult>, memo?: TResult, context?: any): TResult;
        reject(iterator: _.ListIterator<TModel, boolean>, context?: any): TModel[];
        rest(n?: number): TModel[];
        sample(): TModel;
        sample(n: number): TModel[];
        select(iterator: _.ListIterator<TModel, boolean>, context?: any): TModel[];
        shuffle(): TModel[];
        size(): number;
        some(iterator?: _.ListIterator<TModel, boolean>, context?: any): boolean;
        sortBy<TSort>(iterator?: _.ListIterator<TModel, TSort>, context?: any): TModel[];
        sortBy(iterator: string, context?: any): TModel[];
        tail(n?: number): TModel[];
        take(): TModel;
        take(n: number): TModel[];
        toArray(): TModel[];
        models: TModel[];
        without(...values: TModel[]): TModel[];
        /* Copied and MODIFIED from Backbone typings - END */
    }
}

declare module "sabre-ngv-app/app/AbstractCollectionOptions" {
    /// <ngv scope="public" />
    import {AbstractMixinOptions} from "sabre-ngv-app/app/AbstractMixinOptions";
    export interface AbstractCollectionOptions extends AbstractMixinOptions {
    }
}

declare module "sabre-ngv-app/app/AbstractMixin" {
    /// <ngv scope="public" />
    import {LifetimeBindingOptions} from "sabre-ngv-app/app/LifetimeBindingOptions";
    import {JsonType} from "sabre-ngv-app/_types";
    import {DismissOptions} from "sabre-ngv-app/app/DismissOptions";
    import * as JQuery from "jquery";
    /**
     *
     * Mixin class that is used by all basic classes.
     *
     * Provides shared capabilities mostly related to object lifetime.
     */
    export class AbstractMixin {
        /* DOM EVENTS - BEGIN */
        /**
         * Stops event propagation and prevents its default behaviour.
         *
         * It is safe to pass null or non-event object.
         *
         * @param {Event} [e=undefined] Event to be stopped.
         */
        protected _stopEvent(event?: Event | JQueryEventObject): void;
        /**
         * Stops event's default behaviour.
         *
         * It is safe to pass null or non-event object.
         *
         * @param {Event} [e=undefined] Event which default behaviour should be stopped.
         */
        protected _preventEventDefault(event?: Event | JQueryEventObject): void;
        /* DOM EVENTS - END */
        /* NGV EVENTS - BEGIN */
        /**
         * Triggers/fires event on global event bus.
         *
         * @param {string} eventName Name of global event to be triggered
         * @param {*...} [args] Arguments to triggered event
         * @returns {*}
         */
        triggerOnEventBus(eventName: string, ...args: any[]): void;
        /**
         * Registers event handler on global event bus.
         *
         * This method should be used instead of direct event bus calls.
         *
         * @param {string} eventName Event name
         * @param {function} handler Event handler/listener
         */
        listenToEventBus(eventName: string, listener: (...args: any[]) => void): void;
        /**
         * Registers event handler which should be run once on global event bus.
         *
         * This method should be used instead of direct event bus calls.
         *
         * @param {string} eventName Event name
         * @param {function} handler Event handler/listener to be run once
         */
        listenToEventBusOnce(eventName: string, listener: (...args: any[]) => void): void;
        trigger(eventName: string, ...args: any[]): void;
        on(eventName: string, listener: (...args: any[]) => void): void;
        once(eventName: string, listener: (...args: any[]) => void): void;
        listenTo(target: AbstractMixin, eventName: string, listener: (...args: any[]) => void): void;
        listenToOnce(target: AbstractMixin, eventName: string, listener: (...args: any[]) => void): void;
        /* NGV EVENTS - END */
        /* DISMISSING - BEGIN */
        /**
         * Binds lifetime of current object with given one or with given attribute.
         *
         * Lifetime binding means basically that given object is set useful
         * and there is a trial of its dismission when parent (`this`) object is dismissed.
         *
         * If attribute name passed basically usefulness is not set.
         *
         * Lifetime binding options can vary that behaviour.
         *
         * When you bind lifetimes you have remember to dismiss bound object or attribute
         * when you do not need it anymore. Something like malloc()/free() calls but related
         * to resource management. Without `.dismiss*()` call memory leaks may appear.
         *
         * Confront related guides in manual.
         *
         * @param {*} objectOrAttributeName Object or attribute name to be bound
         * @param {struct.LifetimeBindingOptions} [options] Lifetime binding options
         */
        bindLifetime(objectOrAttributeName: any, options?: LifetimeBindingOptions): void;
        /**
         * Dismisses given object.
         *
         * Discards usefulness context on given object.
         *
         * @see AbstractMixin#bindLifetime
         *
         * @param {*} object Object to be dismissed.
         * @param {struct.DismissOptions} [options] Dismission options
         */
        dismissObject(object: any, options?: DismissOptions): void;
        /**
         * Dismiss attribute owned by object.
         *
         * Dismisses attribute on current object (or object passed as parent in options).
         * Suitable for unregistering magic listeners.
         *
         *      @example
         *      onSomeEvent: function() {
         *          // ...
         *      },
         *
         *      unregisterMagicListener: function() {
         *          this.dismissAttribute('onSomeEvent');
         *      }
         *
         * Dismisses object stored in attribute and deletes the last one.
         *
         * @see AbstractMixin#bindLifetime
         *
         * @param {string} attributeName Name of attribute to be dismissed.
         * @param {struct.DismissOptions} [options] Dismission options
         */
        dismissAttribute(attributeName: string, options?: DismissOptions): void;
        /* DISMISSING - END */
        /**
         * Returns JSON version of object.
         *
         * @returns {object} JSON version of object
         */
        toJSON(): JsonType;
        /**
         * Returns object ID (instance unique ID).
         *
         * @returns {string} Object ID
         */
        getObjectId(): string;
    }
}

declare module "sabre-ngv-app/app/AbstractMixinOptions" {
    /// <ngv scope="public" />
    export interface AbstractMixinOptions {
    }
}

declare module "sabre-ngv-app/app/AbstractModel" {
    /// <ngv scope="public" />
    import {AbstractModelProperties} from "sabre-ngv-app/app/AbstractModelProperties";
    import {AbstractMixin} from "sabre-ngv-app/app/AbstractMixin";
    import {AbstractModelOptions} from "sabre-ngv-app/app/AbstractModelOptions";
    import {ModelData} from "sabre-ngv-app/_types";
    /**
     * Abstract base class for Model classes.
     * This class can provide additional, abstract functionalities for inherited classes.
     */
    export class AbstractModel extends AbstractMixin implements AbstractModelProperties {
        /**
         * Constructor.
         *
         * @param data - Model data
         * @param options - Model options
         */
        constructor(data?: ModelData, options?: AbstractModelOptions);
        /**
         * Model initialization.
         *
         * @param data - Model data
         * @param options - Model options
         */
        initialize(data?: ModelData, options?: AbstractModelOptions): void;
        /**
         * Sets attribute.
         *
         * @param attrName - Attribute name
         * @param value - Attribute value
         */
        set(attrName: string, value: any): void;
        /**
         * Gets attribute value.
         *
         * @param attrName - Attribute name
         */
        get(attrName: string): any;
        /**
         * Propagates model data attributes to template.
         *
         * @param attrs - Array of attribute names
         * @param lazy - Boolean value
         * @param safe - Boolean value
         */
        propagateData(attrs: string[], lazy?: Boolean, safe?: Boolean): void;
    }
}

declare module "sabre-ngv-app/app/AbstractModelOptions" {
    /// <ngv scope="public" />
    import {AbstractModelProperties} from "sabre-ngv-app/app/AbstractModelProperties";
    import {AbstractMixinOptions} from "sabre-ngv-app/app/AbstractMixinOptions";
    export interface AbstractModelOptions extends AbstractModelProperties, AbstractMixinOptions {
        parse?: boolean;
    }
}

declare module "sabre-ngv-app/app/AbstractModelProperties" {
    /// <ngv scope="public" />
    export interface AbstractModelProperties {
        autoPropagateData?: boolean;
        nonLazyMembers?: string[];
        defaults?: {
            [key: string]: any
        };
    }
}

declare module "sabre-ngv-app/app/AbstractObject" {
    /// <ngv scope="public" />
    import {AbstractObjectOptions} from "sabre-ngv-app/app/AbstractObjectOptions";
    import {AbstractModel} from "sabre-ngv-app/app/AbstractModel";
    export class AbstractObject extends AbstractModel implements AbstractObjectOptions {
        constructor(options?: AbstractObjectOptions);
        initialize(options?: AbstractObjectOptions): void;
    }
}

declare module "sabre-ngv-app/app/AbstractObjectOptions" {
    /// <ngv scope="public" />
    import {AbstractModelOptions} from "sabre-ngv-app/app/AbstractModelOptions";
    export interface AbstractObjectOptions extends AbstractModelOptions {
    }
}

declare module "sabre-ngv-app/app/AbstractView" {
    /// <ngv scope="public" />
    import {AbstractMixin} from "sabre-ngv-app/app/AbstractMixin";
    import {AbstractViewOptions} from "sabre-ngv-app/app/AbstractViewOptions";
    import {AbstractModel} from "sabre-ngv-app/app/AbstractModel";
    import * as JQuery from "jquery";
    import {JQuerySource, KeyValueMap} from "sabre-ngv-app/_types";
    import {Mountable} from "sabre-ngv-app/app/Mountable";
    import {ComponentType} from "react";
    export type EventsMap = { [event: string]: string };
    /**
     * Abstract base class for View classes.
     * Other classes should extend this class, not Backbone's one.
     * This class can provide additional, abstract functionalities for inherited classes.
     *
     */
    export class AbstractView<TModel extends AbstractModel = AbstractModel> extends AbstractMixin implements AbstractViewOptions, Mountable<{}> {
        bridgeClassName: string;
        constructor(options?: AbstractViewOptions);
        /**
         * Initializes and renders widget.
         *
         * It runs initializer methods. They are called with
         * the same options. For more see: #_runInitializers
         *
         * When options are passed they can replace (or merge)
         * object attributes, so widgets can be configured with
         * standard attributes by default and reconfigured in runtime.
         *
         * @param {struct.WidgetOptions} [options={}] Widget configuration options.
         */
        initialize(options?: AbstractViewOptions): void;
        /**
         * Set attribute.
         *
         * @param attrName - Attribute name
         * @param value - Attribute value
         */
        set(attrName: string, value: any): void;
        /**
         * Set attributes using keyValuePairs.
         *
         * @param keyValuePairs - Key value pair
         */
        set(keyValuePairs: KeyValueMap): void;
        /**
         * Get attribute value.
         *
         * @param attrName - Attribute name
         */
        /* VISIBILITY - BEGIN */
        /**
         * Sets visibility in given context.
         *
         * Widget is visible if it is visible in all contexts. They might be added dynamically.
         *
         * @example
         *      this.setVisibility(true); // visible
         *      this.setVisibility(false); // invisible
         *      this.setVisibility(true, 'other-context'); // invisible because default context visibility == false
         *      this.setVisibility(false, 'other-context'); // invisible
         *      this.setVisibility(true); // invisible because other-context visibility == false
         *      this.setVisibility(true, 'other-context'); // visible because all contexts' visibility == true
         *
         * @param {boolean} visible Flag indicating if widget is visible in given context
         * @param {string} [context=''] Visibility context
         */
        setVisibility(visible: boolean, context?: string): void
        /**
         * Returns current visibility state.
         *
         * @param {boolean} context Visibility state.
         */
        getVisibility(context?: string): void;
        /* VISIBILITY - END */
        /* MODEL - BEGIN */
        /**
         * Returns model for view/widget.
         * If JS object is set to model attribute, it is enveloped by
         * app.AbstractModel class object.
         * @returns {app.AbstractModel} Model object
         */
        getModel(): TModel;
        setModel(model: TModel): void;
        /* MODEL - END */
        /* DOM - BEGIN */
        /**
         * JQuery element.
         */
        $el: JQuery;
        /**
         * JQuery selector function.
         */
        $(selector: JQuerySource): JQuery;
        /**
         * Renders view/widget.
         * It sets css class and style kept by widget in attributes.
         */
        render(): void;
        rerender(): void;
        addDomEvent(event: string, funcName: string, onlyMissing?: boolean, target?: EventsMap): void;
        addDomEvents(events: EventsMap, onlyMissing?: boolean, target?: EventsMap): void;
        /* DOM - END */
        /* CSS - BEGIN */
        setCssClass(cssClass: string): void;
        getCssClass(): string;
        addCssClass(cssClass: string): void;
        /* CSS - END */
        getAsWidget(): AbstractView;
        getAsComponent(): ComponentType<{}>;
        delegateEvents(): void;
    }
}

declare module "sabre-ngv-app/app/AbstractViewOptions" {
    /// <ngv scope="public" />
    import {AbstractMixinOptions} from "sabre-ngv-app/app/AbstractMixinOptions";
    import {AbstractModel} from "sabre-ngv-app/app/AbstractModel";
    import {JsonObject, ModelDescriptor} from "sabre-ngv-app/_types";
    export interface AbstractViewOptions extends AbstractMixinOptions {
        templateOptions?: {
            helpers?: { [helperName: string]: Function }
        },
        keyBarrier?: boolean;
        model?: AbstractModel | JsonObject;
        modelDescriptor?: ModelDescriptor;
        className?: string;
        tagName?: string;
    }
}

declare module "sabre-ngv-app/app/C2WBridge" {
    /// <ngv scope="public" />
    import {AbstractView} from "sabre-ngv-app/app/AbstractView";
    import {AbstractViewOptions} from "sabre-ngv-app/app/AbstractViewOptions";
    import {AbstractModel} from "sabre-ngv-app/app/AbstractModel";
    import {ComponentType, ReactElement} from 'react';
    import {Mountable} from "sabre-ngv-app/app/Mountable";
    import {C2WBridgeOptions} from "sabre-ngv-app/app/C2WBridgeOptions";
    export class C2WBridge<P, TModel extends AbstractModel = AbstractModel> extends AbstractView<TModel> implements AbstractViewOptions, Mountable<P> {
        constructor(options: C2WBridgeOptions<P>)
        /**
         * Renders a react element to $el.
         * @param data
         * @public
         */
        renderComponent(data: P): void;
        private selfFinalize(): void;
        protected createElement(props: P): ReactElement<P>; //TODO that might not be actually true
        /**
         * Unmounts react component from node.
         * @public
         */
        dispose(): void;
        getAsWidget(): AbstractView;
        getAsComponent(): ComponentType<P>;
    }
}

declare module "sabre-ngv-app/app/C2WBridgeOptions" {
    /// <ngv scope="public" />
    import {AbstractViewOptions} from "sabre-ngv-app/app/AbstractViewOptions";
    import {Attributes, ComponentType} from "react";
    export interface C2WBridgeOptions<P> extends AbstractViewOptions {
        componentClass: ComponentType<P>;
        componentProps?: Attributes & P
    }
}

declare module "sabre-ngv-app/app/common/data/dto/Command" {
    /// <ngv scope="public" />
    import {CommandFlow} from "sabre-ngv-app/app/common/data/dto/CommandFlow";
    export type Command = CommandFlow | string;
}

declare module "sabre-ngv-app/app/common/data/dto/CommandFlow" {
    /// <ngv scope="public" />
    import {AbstractModel} from "sabre-ngv-app/app/AbstractModel";
    import {WithRemotePreferences} from "sabre-ngv-app/app/common/data/dto/WithRemotePreferences";
    import {RequestData} from "sabre-ngv-app/app/common/data/dto/request/RequestData";
    import {RequestDataFindCondition} from "sabre-ngv-app/app/common/data/dto/request/RequestDataFindCondition";
    import {DataFindCondition} from "sabre-ngv-app/app/common/data/dto/DataFindCondition";
    import {Data} from "sabre-ngv-app/app/common/data/dto/Data";
    import {LocalPreference} from "sabre-ngv-app/app/common/data/dto/LocalPreference";
    import {RemotePreference} from "sabre-ngv-app/app/common/data/dto/RemotePreference";
    import {JsonObject, KeyValueMap, NgvPromise} from "sabre-ngv-app/_types";
    import {ErrorData} from "sabre-ngv-app/app/common/data/dto/ErrorData";
    import {FlowControl} from "sabre-ngv-app/app/common/data/dto/FlowControl";
    import {InfoData} from "sabre-ngv-app/app/common/data/dto/InfoData";
    /**
     *
     * Command Flow structure envelope.
     *
     * CF is used as DTO in communication between frontend and backend.
     * It is used both as request and response object.
     * This capability is used in application too to handle requests.
     *
     * For more information read [DTO Flow](#!/guide/core_guide_dto_flow)
     */
    export class CommandFlow extends AbstractModel implements WithRemotePreferences {
        /**
         * Sets request data object or request JSON object.
         *
         * @experimental
         * @param {app.common.data.dto.request.RequestData|JSON} requestData Request data object or request params JSON structure
         * @returns {app.common.data.dto.CommandFlow} Self
         */
        addRequestDataObject<T extends RequestData<TStruct>, TStruct>(requestDataObject: T | TStruct): this;
        /**
         * Returns one request data object, basing on condition given.
         *
         * Uses condition as in `objects.findObject()`.
         *
         * @param {*} cond Search condition
         */
        getOneRequestDataObject<T extends RequestData<TStruct>, TStruct>(condition: RequestDataFindCondition<T, TStruct>): T;
        /**
         * Sends CF as request.
         *
         * @returns {app.common.data.dto.CommandFlow} Self
         */
        send(): NgvPromise<this>;
        retrieveData<T extends Data>(condition: DataFindCondition<T>): NgvPromise<T>;
        /**
         * Create a lightweight clone of the CommandFlow which contains only request data and will not
         * be updated with response data. It can serve as a stored request.
         *
         * @returns {app.common.data.dto.CommandFlow} Self clone
         */
        cloneRequest(): this;
        /**
         * Sets one local preference.
         *
         * See #setLocalPreferences for detailed list of possible options.
         *
         * @param {string} name Preference name
         * @param {*} value Preference value
         * @returns {app.common.data.dto.CommandFlow} Self
         */
        setLocalPreference(name: LocalPreference, value: any): this;
        /**
         * Gets value of given local preference.
         *
         * @param {string} name Local preference name
         * @returns {*} Local preference value
         */
        getLocalPreference(name: LocalPreference): any;
        /**
         * Sets local CF request preferences.
         *
         * Local preferences are not visible on backend side, nor in CF structure.
         * They are used to change behaviour of request-response handling.
         *
         * @param {Object} localPreferences Local preferences map
         * @param {boolean} [localPreferences.capture=false] Flag, when set to `true` response is not processed globally at all
         * @param {boolean} [localPreferences.silentRequest=false] Flag, when set to `true` request is not printed in output
         * @param {boolean} [localPreferences.silentResponse=false] Flag, when set to `true` success response is not printed in output
         * @param {boolean} [localPreferences.silentErrors=false] Flag, when set to `true` error response is not printed in output
         * @param {boolean} [localPreferences.silent] Flag setting all `silent*` flags with its value
         * @param {boolean} [localPreferences.uiBlocking] Flag, when set to `true` UI is blocked with interstitial always, when set to `false` UI cannot be blocked
         * @param {boolean} [localPreferences.important=false] Flag, when set to `true` request cannot be cancelled (unless timeouted)
         * @param {boolean} [localPreferences.shouldRedirectResponsePartition=false] Flag, when set to `true`, in split screen, redirect the response to the other, currently non-focused partition
         * @param {*} [localPreferences.requestSource] Additional information about request source
         * @returns {app.common.data.dto.CommandFlow} Self
         */
        setLocalPreferences(preferences: KeyValueMap): this;
        /**
         * Returns map of all local preferences set.
         *
         * @returns {object} Local preferences
         */
        getLocalPreferences(): KeyValueMap;
        setRemotePreference(name: RemotePreference, value: any, secure?: boolean): this;
        getRemotePreference(name: RemotePreference): any;
        setRemotePreferences(preferences: KeyValueMap, secure?: boolean): this;
        getRemotePreferences(): KeyValueMap;
        /**
         * Pass a formatter function that will be used to display a friendly representation of the
         * command sent.
         *
         * @param {Function} formatter Pretty formatter
         * @param {app.common.data.dto.CommandFlow} formatter.commandFlow CommandFlow object to create a representation for
         * @param {string} formatter.return Formatted CF presentation
         * @returns {app.common.data.dto.CommandFlow} Self
         */
        setPrettyFormatter(formatter: (struct?: JsonObject) => string): this;
        /**
         * Sets icon related to CF command.
         *
         * @param {string} icon Icon name
         * @returns {app.common.data.dto.CommandFlow} Self
         */
        setIcon(iconCssClassName: string): this;
        /**
         * Indicates whether command is `manual` - sent from command bar input (or analogous).
         *
         * @returns {boolean} Manual command flag.
         */
        isManualCommand(): true;
        /**
         * Returns Message ID
         * @returns {string} Message ID
         */
        getMsgId(): string;
        /**
         * Returns Real Conversation ID
         * @returns {string} Real Conversation ID
         */
        getConvId(): string;
        /**
         * Finds and returns one data structure.
         *
         * Uses condition as in `objects.findStruct()`.
         *
         * @param {*} cond Search condition
         */
        getOneDataStruct(cond?: string): JsonObject;
        /**
         * Finds and returns all data structures.
         */
        getDataStructs(): JsonObject[];
        getOneDataObject<T>(cond: string | (new() => T)): T;
        /**
         * Returns request params JSON structure.
         *
         * @returns {JSON} Request params JSON structure
         */
        getRequestParamsStructure(): JsonObject;
        /**
         * Returns command name without additional data.
         *
         * @returns {string} Command name.
         */
        getCommand(): string;
        /**
         * Returns errors contained in CF structure.
         *
         * Potentially Data objects can have errors too.
         *
         * @returns {app.common.data.dto.ErrorData[]} Error objects
         */
        getErrorsFromCommandFlow(): ErrorData[];
        getNonErrorMessages(): InfoData[];
        /**
         * Returns FlowControl object used to influence on Workflow execution by Workflow Extension Points.
         *
         * @returns {app.common.data.dto.FlowControl} flow control object
         */
        getFlowControl(): FlowControl;
        isSoResponse(): boolean;
        /**
         * Returns all errors contained in Command Flow and data objects (no duplicates).
         *
         * @returns {app.common.data.dto.ErrorData[]} Error objects
         */
        getAllErrors(): ErrorData[];
        /**
         * Returns promise related to CF request.
         *
         * Promise is resolved when successful response received. It is rejected when response
         * did not manage to be received successfully (error response, cancelled request, requeste timeouted).
         *
         * @returns {jQuery.Deffered} Promise
         */
        getPromise(): NgvPromise<CommandFlow>;
        /**
         * Tries to cancel request.
         *
         * Some requests (eg. with `important` local preference set) might be not cancellable.
         */
        cancelRequest(): void;
        /**
         * Returns all data objects contained in Command Flow (except errors).
         *
         * Data objects are created basing on `dto` service register.
         *
         * @returns {app.common.data.dto.Data[]} Data objects
         */
        getDataObjects(): Data[];
        /**
         * Sets the type of command.
         *
         * Commands can be `machine` when sent without user interaction
         * or no, if user interacted with gui.
         *
         * @returns {app.common.data.dto.CommandFlow} Self
         */
        setMachineRequest(): this;
    }
}

declare module "sabre-ngv-app/app/common/data/dto/Data" {
    /// <ngv scope="public" />
    import {AbstractModel} from "sabre-ngv-app/app/AbstractModel";
    import {DataOptions} from "sabre-ngv-app/app/common/data/dto/DataOptions";
    import {WithRemotePreferences} from "sabre-ngv-app/app/common/data/dto/WithRemotePreferences";
    import {RemotePreference} from "sabre-ngv-app/app/common/data/dto/RemotePreference";
    import * as _ from "underscore";
    import {CommandFlow} from "sabre-ngv-app/app/common/data/dto/CommandFlow";
    import {JsonObject} from "sabre-ngv-app/_types";
    /**
     * Data object class.
     *
     * For more information read [DTO Flow](#!/guide/core_guide_dto_flow)
     *
     */
    export class Data extends AbstractModel implements DataOptions, WithRemotePreferences {
        protected fromRoot(): _._Chain<JsonObject>;
        setRemotePreference(name: RemotePreference, value: any, secure?: boolean): this;
        getRemotePreference(name: RemotePreference): any;
        setRemotePreferences(preferences: { [name: string]: string | number | boolean | null }, secure?: boolean): this;
        getRemotePreferences(): { [name: string]: string | number | boolean | null };
        getCommand(): string;
        getCommandFlow(): CommandFlow;
        getWarningMessage(): string;
    }
}

declare module "sabre-ngv-app/app/common/data/dto/DataFindCondition" {
    /// <ngv scope="public" />
    import {Data} from "sabre-ngv-app/app/common/data/dto/Data";
    import {Class} from "sabre-ngv-app/_types";
    export type DataObjectMatcher = (object: Data) => boolean;
    export type DataClass<T extends Data> = Class<T>;
    export type DataObjectIndex = number;
    export type DataFindCondition<T extends Data> = DataObjectMatcher | DataClass<T> | DataObjectIndex;
}

declare module "sabre-ngv-app/app/common/data/dto/DataOptions" {
    /// <ngv scope="public" />
    export interface DataOptions {
        dataRoot?: string;
    }
}

declare module "sabre-ngv-app/app/common/data/dto/EnhancedResponseData" {
    /// <ngv scope="public" />
    import {Data} from "sabre-ngv-app/app/common/data/dto/Data";
    export class EnhancedResponseData extends Data {
    }
}

declare module "sabre-ngv-app/app/common/data/dto/ErrorData" {
    /// <ngv scope="public" />
    import {InfoData} from "sabre-ngv-app/app/common/data/dto/InfoData";
    /**
     * Error data object.
     *
     * For more information read [DTO Flow](#!/guide/core_guide_dto_flow)
     *
     */
    export class ErrorData extends InfoData {
        static FATAL: 980;
        static MAJOR: 960;
        static MINOR: 940;
        static TINY: 920;
        getSeverity(): number;
        getClassType(): 'danger';
    }
}

declare module "sabre-ngv-app/app/common/data/dto/FlowControl" {
    /// <ngv scope="public" />
    import {AbstractModel} from "sabre-ngv-app/app/AbstractModel";
    /**
     * Flow Control structure
     *
     * FlowControl object is used by Workflow Extension Points to influence on workflow's execution
     * (like cancelling, skipping).
     * It has to be set by Human Task handler in frontend.
     *
     * For more information please refer to Sabre Red Workspace Developer Toolkit documentation.
     */
    export class FlowControl extends AbstractModel {
        /**
         * Returns the action used to interact to workflow's execution.
         * Possible values are: 'CONTINUE' to continue workflow execution (default value),
         * 'SKIP' to skip current task execution and 'CANCEL' to cancel workflow execution.
         *
         * @returns {string} flow control action
         */
        getFlowControlAction(): string;
        /**
         * Sets flow control action used to interact to workflow's execution
         *
         * @param {string} action to be set
         */
        setFlowControlAction(action: string): void;
        /**
         * Returns process Id used to handle Human Task execution.
         *
         * @returns {string} process Id value
         */
        getProcessId(): number;
        /**
         * Sets process Id that is used to handle Human Task execution.
         * When sending Human Task response to backend, processId should be rewritten from original request object.
         * Otherwise Human Task will not be continued correctly.
         *
         * @param {string} process Id to be set
         */
        setProcessId(processId: number): void;
    }
}

declare module "sabre-ngv-app/app/common/data/dto/InfoData" {
    /// <ngv scope="public" />
    import {Data} from "sabre-ngv-app/app/common/data/dto/Data";
    import {AlertCssType} from "sabre-ngv-app/_types";
    export class InfoData extends Data {
        getClassType(): AlertCssType;
        getMessage(): string;
        getTitle(): string;
        getTitleKey(): string;
    }
}

declare module "sabre-ngv-app/app/common/data/dto/LocalPreference" {
    /// <ngv scope="public" />
    export type LocalPreference =
        string
        | 'uiBlocking'
        | 'silent'
        | 'silentRequest'
        | 'silentResponse'
        | 'silentErrors'
        | 'commandBarInput'
        | 'manualCommandEquivalent'
        | 'capture'
        | 'alreadyHandled'
        | 'requestSource'
        | 'shouldRedirectResponsePartition'
        | 'addToPnrModalConfig'
        | 'pnrSubjectArea';
}

declare module "sabre-ngv-app/app/common/data/dto/NonGenericMaskData" {
    /// <ngv scope="public" />
    import {MaskData} from "sabre-ngv-app/app/common/data/MaskData";
    /**
     * Class for non generic, non command line mask.
     * @extends app.common.data.dto.MaskData
     */
    export class NonGenericMaskData extends MaskData {
    }
}

declare module "sabre-ngv-app/app/common/data/dto/RemotePreference" {
    /// <ngv scope="public" />
    export type RemotePreference =
        string
        | 'textOnly'
        | 'structureOnly'
        | 'cf-pretty-line'
        | 'cf-icon'
        | 'commandHistorySelectionDisabled'
        | 'matrixPreferredCarriers'
        | 'displayOnlyPreferredCarriers';
}

declare module "sabre-ngv-app/app/common/data/dto/request/RequestData" {
    /// <ngv scope="public" />
    import {AbstractModel} from "sabre-ngv-app/app/AbstractModel";
    import {RequestDataStruct} from "sabre-ngv-app/app/common/data/dto/request/RequestDataStruct";
    export abstract class RequestData<TStruct extends RequestDataStruct> extends AbstractModel {
        abstract getRequestStructure(): TStruct;
    }
}

declare module "sabre-ngv-app/app/common/data/dto/request/RequestDataFindCondition" {
    /// <ngv scope="public" />
    import {RequestData} from "sabre-ngv-app/app/common/data/dto/request/RequestData";
    import {Class} from "sabre-ngv-app/_types";
    export type RequestDataObjectMatcher<TStruct> = (object: RequestData<TStruct>) => boolean;
    export type RequestDataClass<T extends RequestData<TStruct>, TStruct> = Class<T>;
    export type RequestDataObjectIndex = number;
    export type RequestDataFindCondition<T extends RequestData<TStruct>, TStruct> =
        RequestDataObjectMatcher<TStruct>
        | RequestDataClass<T, TStruct>
        | RequestDataObjectIndex;
}

declare module "sabre-ngv-app/app/common/data/dto/request/RequestDataStruct" {
    /// <ngv scope="public" />
    export type RequestDataStruct = {
        [key: string]: any;
    };
}

declare module "sabre-ngv-app/app/common/data/dto/ResponseData" {
    /// <ngv scope="public" />
    import {Data} from "sabre-ngv-app/app/common/data/dto/Data";
    /**
     *
     * Super-class for objects containing response from host/service
     */
    export class ResponseData extends Data {
        isScreenOnly(): boolean;
    }
}

declare module "sabre-ngv-app/app/common/data/dto/SuccessData" {
    /// <ngv scope="public" />
    import {InfoData} from "sabre-ngv-app/app/common/data/dto/InfoData";
    export class SuccessData extends InfoData {
        getClassType(): 'success';
    }
}

declare module "sabre-ngv-app/app/common/data/dto/WarningData" {
    /// <ngv scope="public" />
    import {InfoData} from "sabre-ngv-app/app/common/data/dto/InfoData";
    export class WarningData extends InfoData {
        getClassType(): 'warning';
    }
}

declare module "sabre-ngv-app/app/common/data/dto/WithRemotePreferences" {
    /// <ngv scope="public" />
    import {RemotePreference} from "sabre-ngv-app/app/common/data/dto/RemotePreference";
    import {KeyValueMap} from "sabre-ngv-app/_types";
    /**
     * Mixin adding remote (backend/java side) preferences support
     * for CommandFlow or Data structure based classes.
     *
     */
    export class WithRemotePreferences {
        /**
         * Sets one remote preference.
         *
         * See #setRemotePreferences for detailed list of possible options.
         *
         * @param {string} name Preference name
         * @param {string} value Preference value
         * @param {boolean} [secure=true] Secure preference flag
         * @returns {app.common.data.dto.WithRemotePreferences} Self
         */
        setRemotePreference(name: RemotePreference, value: any, secure?: boolean): this;
        /**
         * Gets value of given remote preference.
         *
         * @param {string} name Remote preference name
         * @returns {string} Remote preference value
         */
        getRemotePreference(name: RemotePreference): any;
        /**
         * Sets remote preferences.
         *
         * Remote preferences are visible on both: backend and frontend sides.
         *
         * They are mainly used to change backend (on CF object)
         * or frontend (on CF or Data object) processing behaviour.
         *
         * @param {Object} remotePreferences Remote preferences map
         * @param {boolean} [remotePreferences.structureOnly] CF related flag, when set to true only structured response data is requested
         * @param {boolean} [remotePreferences.textOnly] CF related flag, when set to true only text response data is requested
         * @param {boolean} [remotePreferences.silentResponse] Data related flag, when set to true works like local `silentResponse` preference but for specific Data object only. See: app.common.data.dto.CommandFlow#setLocalPreferences
         * @param {boolean} [remotePreferences.fullPnrDelivered] TIR data related flag, when set to true indicates that received TirData contains full PNR information. See: app.responses.pnr.models.TirData
         * @param {boolean} [secure=true] Secure preferences flag
         * @returns {app.common.data.dto.WithRemotePreferences} Self
         */
        setRemotePreferences(preferences: KeyValueMap, secure?: boolean): this;
        /**
         * Returns JSON structure of all remote preferences set.
         *
         * @returns {JSON} Remote preferences as JSON structure
         */
        getRemotePreferences(): KeyValueMap;
    }
}

declare module "sabre-ngv-app/app/common/data/flight/_types" {
    /// <ngv scope="public" />
    export type IATACode = string;
    export type AirlineCode = string;
    export type BookingClass = string;
    export type FlightDetailsOptions = {
        isMachineRequest?: boolean
    }
}

declare module "sabre-ngv-app/app/common/data/flight/AbstractFlightSegment" {
    /// <ngv scope="public" />
    import {AbstractModel} from "sabre-ngv-app/app/AbstractModel";
    import {AirlineCode, FlightDetailsOptions, IATACode} from "sabre-ngv-app/app/common/data/flight/_types";
    import {NgvPromise} from "sabre-ngv-app/_types";
    import {BookingClassStruct} from "sabre-ngv-app/app/common/data/flight/BookingClassStruct";
    import {MealCode} from "sabre-ngv-app/app/common/data/flight/MealCode";
    import {BaggageAllowanceStruct} from "sabre-ngv-app/app/common/data/flight/BaggageAllowanceStruct";
    /**
     *
     * Base class for flight segment, subsegment and connection.
     *
     * The class is heavily composed, check relevant mixins for particular functionality.
     */
    export abstract class AbstractFlightSegment extends AbstractModel {
        getOriginIata(): IATACode;
        getDestinationIata(): IATACode;
        getMarketingAirline(): AirlineCode;
        getFlightNumber(): number;
        getDepartureDate(): Date;
        getShortDepartureDate(): string;
        getLegId(): string;
        /**
         * Returns flight details as NgvPromise
         */
        getFlightDetails(options?: FlightDetailsOptions): NgvPromise<AbstractFlightSegment>;
        isCancelled(): boolean;
        getAvailableBookingClasses(): BookingClassStruct[];
        getSegmentIndex(): number;
        /**
         * Returns segment number as number.
         *
         * @return Segment number
         */
        getSegmentNumberAsNumber(): number;
        getMeals(): MealCode[];
        /**
         * Returns JsonObject of baggage allowance
         */
        getBaggageAllowanceDetails(): BaggageAllowanceStruct[];
        /**
         * Returns information is E-Ticket
         */
        hasETicket(): boolean;
        /**
         * Returns true if Flight Segments contains TrafficRestrictionDisplayText or GovernmentApprovalDisplayText
         *
         * @returns {boolean}
         */
        getHasAdditionalDisplayText(): boolean;
        /**
         * Returns a string containing traffic restriction text if exist.
         *
         * @returns {string}
         */
        getTrafficRestrictionDisplayText(): string;
        /**
         * Returns a string containing government approval text if exist.
         *
         * @returns {string}
         */
        getGovernmentApprovalDisplayText(): string;
    }
}

declare module "sabre-ngv-app/app/common/data/flight/AbstractFlightStop" {
    /// <ngv scope="public" />
    import {AbstractModel} from "sabre-ngv-app/app/AbstractModel";
    import {FlightSegment} from "sabre-ngv-app/app/common/data/flight/FlightSegment";
    import {FlightConnection} from "sabre-ngv-app/app/common/data/flight/FlightConnection";
    import {IATACode} from "sabre-ngv-app/app/common/data/flight/_types";
    export type FlightStopType = 'Stop' | 'Connection';
    export abstract class AbstractFlightStop extends AbstractModel /* implements WithNextDayIndicators, WithDiggingSupport */ {
        getDurationInMinutes(): number;
        getDepartureDateWithZone(): string;
        getArrivalDateWithZone(): string;
        getRawArrivalDate(): string;
        getRawDepartureDate(): string;
        getIata(): IATACode;
        getParent(): FlightSegment;
        getParentFlightConnection(): FlightConnection;
        hasInboundSegment(): boolean;
        getInboundSegment(): FlightSegment;
        hasOutboundSegment(): boolean;
        getOutboundSegment(): FlightSegment;
        getType(): FlightStopType;
    }
}

declare module "sabre-ngv-app/app/common/data/flight/BaggageAllowanceStruct" {
    /// <ngv scope="public" />
    export interface WeightAllowance extends BaggageAllowance {
        '@unit': string;
        '@weight': number;
    }
    export interface PieceAllowance extends BaggageAllowance {
        '@pieces': number;
    }
    export interface BaggageAllowance {
        segmentNumbers?: Array<number>;
        '@passengerType': string;
    }
    export type BaggageAllowanceStruct = WeightAllowance | PieceAllowance
}

declare module "sabre-ngv-app/app/common/data/flight/BookingClassStruct" {
    /// <ngv scope="public" />
    export interface BookingClassStruct {
        count: number;
        name: string;
        selected: boolean;
    }
}

declare module "sabre-ngv-app/app/common/data/flight/EquipmentCode" {
    /// <ngv scope="public" />
    export type EquipmentCode =
        'CR9'
        | 'DH4'
        | 'E75'
        | 'SH4'
        | 'E90'
        | 'S80'
        | '319'
        | '320'
        | '321'
        | '32B'
        | '332'
        | '343'
        | '346'
        | '717'
        | '734'
        | '738'
        | '73H'
        | '73J'
        | '757'
        | '763'
        | '772'
        | '773'
        | '77W'
        | '788'
        | string;
}

declare module "sabre-ngv-app/app/common/data/flight/EquipmentCodeInfo" {
    /// <ngv scope="public" />
    import {EquipmentCode} from "sabre-ngv-app/app/common/data/flight/EquipmentCode";
    export interface EquipmentCodeInfo {
        equipmentCode: EquipmentCode;
        formattedEquipmentCode: string;
    }
}

declare module "sabre-ngv-app/app/common/data/flight/FlightConnection" {
    /**
     *
     * This model class contains information about single flight connection.
     */
    /// <ngv scope="public" />
    import {FlightSegments} from "sabre-ngv-app/app/common/data/flight/FlightSegments";
    import {FlightSegment} from "sabre-ngv-app/app/common/data/flight/FlightSegment";
    export class FlightConnection extends FlightSegment {
        getFlightSegments(): FlightSegments;
        getNumberInParty(): number;
        setCustomNumberInParty(numberInParty: number): void;
        getRph(): string;
    }
}

declare module "sabre-ngv-app/app/common/data/flight/FlightConnections" {
    /**
     *
     * Collection of {@link app.common.data.flight.FlightConnection flight connections}.
     */
    /// <ngv scope="public" />
    import {AbstractCollection} from "sabre-ngv-app/app/AbstractCollection";
    import {FlightConnection} from "sabre-ngv-app/app/common/data/flight/FlightConnection";
    import {CpaRequestSender} from "sabre-ngv-app/app/responses/cpa/models/CpaRequestSender";
    import {JsonObject} from "sabre-ngv-app/_types";
    export class FlightConnections extends AbstractCollection<FlightConnection> {
        static createFromSubsegments(subsegments: Array<JsonObject>): FlightConnections;
        setRequestSender(requestSender: CpaRequestSender): void;
        getRequestSender(): CpaRequestSender;
    }
}

declare module "sabre-ngv-app/app/common/data/flight/FlightConnectionStruct" {
    /// <ngv scope="public" />
    import {FlightSegmentStructs} from "sabre-ngv-app/app/common/data/flight/FlightSegmentStruct";
    export interface FlightConnectionStructOT {
        'ot.FlightSegment': FlightSegmentStructs
    }
    export type FlightConnectionStruct = FlightConnectionStructOT;
    export type FlightConnectionStructs = FlightConnectionStruct[];
    export type NormalizedFlightConnectionStructs = FlightConnectionStructs;
}

declare module "sabre-ngv-app/app/common/data/flight/FlightPassengerType" {
    /**
     *
     * This model class holds passenger type information for shopping request.
     */
    /// <ngv scope="public" />
    import {AbstractModel} from "sabre-ngv-app/app/AbstractModel";
    export class FlightPassengerType extends AbstractModel {
        getCode() : string;
        getQuantity(): number;
    }
}

declare module "sabre-ngv-app/app/common/data/flight/FlightSegment" {
    /**
     *
     * This model class contains information about single flight segment.
     */
    /// <ngv scope="public" />
    import {AbstractFlightSegment} from "sabre-ngv-app/app/common/data/flight/AbstractFlightSegment";
    import {BookingClass, IATACode} from "sabre-ngv-app/app/common/data/flight/_types";
    import {EquipmentCode} from "sabre-ngv-app/app/common/data/flight/EquipmentCode";
    import {AbstractFlightStop} from "sabre-ngv-app/app/common/data/flight/AbstractFlightStop";
    import {EquipmentCodeInfo} from "sabre-ngv-app/app/common/data/flight/EquipmentCodeInfo";
    /**
     * FlightSegment is part of structure started with root 'FlightConnection'
     */
    export class FlightSegment extends AbstractFlightSegment {
        getSegmentId(): string;
        setCustomBookingClass(bookingClass: BookingClass): void;
        /**
         * Returns an object containing booking class.
         */
        getSelectedBookingClass(): BookingClass;
        isPartOfCancelledConnection(): boolean;
        /**
         * Returns a string containing marketing operating airline code.
         */
        getMarketingOperatingAirline(): string;
        /**
         * Returns a string containing operating airline code.
         */
        getOperatedBy(): string;
        /**
         * Returns a boolean value about inbound stop.
         */
        hasInboundGap(): boolean;
        /**
         * Returns a string containing origin city IATA code for this segment.
         */
        getOriginIata(): IATACode;
        /**
         * Returns formatted departure date.
         */
        getFormattedDepartureDate(): string;
        /**
         * Returns formatted depature time.
         */
        getFormattedDepartureTime(): string;
        /**
         * Returns ordinal number.
         */
        public getRph(): string;
        /**
         * Returns brand Id from fare component.
         */
        getBrandFareId(): string;
        /**
         * Returns an array object containing additional info about stops.
         */
        getFlightStops(): AbstractFlightStop[];
        /**
         * Returns boolean value about having out bound gap.
         */
        hasOutboundGap(): boolean;
        /**
         * Returns a string containing destination city IATA code for this segment
         */
        getDestinationIata(): IATACode;
        /**
         * Returns a string containing short departure date.
         */
        getShortDepartureDate(): string;
        /**
         * Returns formatted arrival date.
         */
        getFormattedArrivalDate(): string;
        /**
         * Returns formatted arrival item.
         */
        getFormattedArrivalTime(): string;
        /**
         * Returns an Array of all equipment codes in this segment.
         */
        getEquipmentCodes(): EquipmentCodeInfo[];
        /**
         * Returns a string containing segment travel time.
         */
        getFormattedSegmentTravelTime(): string;
        /**
         * Returns number of passengers for segment
         */
        getNumberInParty(): number;
        /**
         * Returns equipment code for segment
         */
        getEquipmentCode(): EquipmentCode;
        /**
         * Returns number of Air Miles
         */
        getAirMiles(): number;
        /**
         *
         * @returns {string}
         */
        getMarriageGrp(): string;
        /**
         *
         * @returns {boolean}
         */
        hasChangeOfGaugeIndicator(): boolean;
        /**
         *
         * @returns {number}
         */
        getGroupIndex(): number;
        /**
         * Returns a string containing carrier company short name
         *
         * @returns {string}
         */
        getCompanyShortName(): string;
        /**
         * Returns a string containing operating airline code.
         *
         * @returns {string}
         */
        getOperatingAirline(): string;
        /**
         * Returns a string containing raw arrival date.
         *
         * @returns {string}
         */
        getRawArrivalDate(): string;
        /**
         * Returns a string containing raw departure date.
         *
         * @returns {string}
         */
        getRawDepartureDate(): string;
    }
}

declare module "sabre-ngv-app/app/common/data/flight/FlightSegments" {
    /**
     *
     * Collection of FlightSegment.
     */
    /// <ngv scope="public" />
    import {AbstractCollection} from "sabre-ngv-app/app/AbstractCollection";
    import {FlightSegment} from "sabre-ngv-app/app/common/data/flight/FlightSegment";
    export class FlightSegments extends AbstractCollection<FlightSegment> {
    }
}

declare module "sabre-ngv-app/app/common/data/flight/FlightSegmentStruct" {
    /// <ngv scope="public" />
    export interface FlightSegmentStructCommon {
        '[@StopQuantity]'?: string | number;
        [key: string]: any;
    }
    export interface FlightSegmentStructWithFlightNumber extends FlightSegmentStructCommon {
        '[@FlightNumber]': string | number;
    }
    export interface FlightSegmentStructWithDepartureDateTime extends FlightSegmentStructCommon {
        '[@DepartureDateTime]': string;
    }
    export interface FlightSegmentStructWithMarketingAirline extends FlightSegmentStructCommon {
        '[dx.MarketingAirline]': string;
    }
    export type FlightSegmentStruct = FlightSegmentStructWithFlightNumber
        | FlightSegmentStructWithDepartureDateTime
        | FlightSegmentStructWithMarketingAirline;
    export type FlightSegmentStructs = FlightSegmentStruct[];
    export type NormalizedFlightSegmentStructs = FlightSegmentStructs[];
}

declare module "sabre-ngv-app/app/common/data/flight/FlightStopConnection" {
    /// <ngv scope="public" />
    import {AbstractFlightStop} from "sabre-ngv-app/app/common/data/flight/AbstractFlightStop";
    /**
     * Represents intermediate stop between flight segment.
     */
    export class FlightStopConnection extends AbstractFlightStop {
        getType(): 'Connection';
    }
}

declare module "sabre-ngv-app/app/common/data/flight/FlightStopover" {
    /// <ngv scope="public" />
    import {AbstractFlightStop} from "sabre-ngv-app/app/common/data/flight/AbstractFlightStop";
    /**
     * Represents stops "inside" flight segment : stopover, change of gauge.
     */
    export class FlightStopover extends AbstractFlightStop {
        getType(): 'Stop';
    }
}

declare module "sabre-ngv-app/app/common/data/flight/FlightSubsegment" {
    /**
     *
     * This model class contains information about single flight subsegment.
     */
    /// <ngv scope="public" />
    import {AbstractFlightSegment} from "sabre-ngv-app/app/common/data/flight/AbstractFlightSegment";
    export class FlightSubsegment extends AbstractFlightSegment {
    }
}

declare module "sabre-ngv-app/app/common/data/flight/MealCode" {
    /// <ngv scope="public" />
    export type MealCode =
          'S'
        | 'M'
        | 'G'
        | 'R'
        | 'L'
        | 'F'
        | 'SB'
        | 'LD'
        | 'D'
        | 'BD'
        | 'RM'
        | 'DB'
        | 'BM'
        | 'MB'
        | 'MS'
        | 'RC'
        | 'OC'
        | 'SH'
        | 'HS'
        | 'RF'
        | 'ELD'
        | 'HM'
        | 'LS'
        | string;
}

declare module "sabre-ngv-app/app/common/data/MaskData" {
    /// <ngv scope="public" />
    import {Data} from "sabre-ngv-app/app/common/data/dto/Data";
    export class MaskData extends Data {
    }
}

declare module "sabre-ngv-app/app/common/mixins/Closable" {
    /**
     *
     * Mixin which provides standard protocol for closable widgets.
     */
    /// <ngv scope="public" />
    export class Closable {
        /**
         * Opens all closable elements
         */
        open(): void;
        /**
         * Closes all closable elements
         */
        close(): void;
        /**
         * Switches between open and close status of closable elements
         */
        toggle(): void;
    }
}

declare module "sabre-ngv-app/app/common/mixins/IModeRelatedWidgetsMap" {
    /// <ngv scope="public" />
    import {AbstractView} from "sabre-ngv-app/app/AbstractView";
    import {ViewDescriptor} from "sabre-ngv-app/_types";
    export interface IModeRelatedWidgetsMap<TNovice extends AbstractView, TExpert extends AbstractView> {
        'novice-output-mode': ViewDescriptor<TNovice>;
        'expert-output-mode': ViewDescriptor<TExpert>;
    }
}

declare module "sabre-ngv-app/app/common/mixins/WithHighlightableChildren" {
    /**
     *
     * Mixin that allows widget to contain items that can be highlighted.
     */
    /// <ngv scope="public" />
    export class WithHighlightableChildren {
    }
}

declare module "sabre-ngv-app/app/common/mixins/WithModeRelatedWidget" {
    /// <ngv scope="public" />
    import {IModeRelatedWidgetsMap} from "sabre-ngv-app/app/common/mixins/IModeRelatedWidgetsMap";
    import {AbstractView} from "sabre-ngv-app/app/AbstractView";
    import {WithModeRelatedWidgetOptions} from "sabre-ngv-app/app/common/mixins/WithModeRelatedWidgetOptions";
    export class WithModeRelatedWidget<TNovice extends AbstractView, TExpert extends AbstractView> implements WithModeRelatedWidgetOptions {
        modeRelatedWidgets: IModeRelatedWidgetsMap<TNovice, TExpert>;
    }
}

declare module "sabre-ngv-app/app/common/mixins/WithModeRelatedWidgetOptions" {
    /// <ngv scope="public" />
    import {IModeRelatedWidgetsMap} from "sabre-ngv-app/app/common/mixins/IModeRelatedWidgetsMap";
    import {AbstractView} from "sabre-ngv-app/app/AbstractView";
    export interface WithModeRelatedWidgetOptions {
        modeRelatedWidgets: IModeRelatedWidgetsMap<AbstractView, AbstractView>;
    }
}

declare module "sabre-ngv-app/app/common/mixins/WithoutFocusOnClick" {
    /// <ngv scope="public" />
    export class WithoutFocusOnClick {
    }
}

declare module "sabre-ngv-app/app/common/mixins/WithRetryButton" {
    /// <ngv scope="public" />
    export class WithRetryButton {
    }
}

declare module "sabre-ngv-app/app/common/mixins/WithShowInModal" {
    /**
     * A mixin class extending target class by ability to open content of the target class in modal
     */
    /// <ngv scope="public" />
    export class WithShowInModal {
        /**
         * Invokes Layer's `showInModal` method using "modalOptions" and "layerOptions" properties
         */
        showInModal(): void;
    }
}

declare module "sabre-ngv-app/app/common/mixins/WithStickyElement" {
    /**
     *
     * Mixin that provides sticky elements
     */
    /// <ngv scope="public" />
    import {WithStickyElementOptions} from "sabre-ngv-app/app/common/mixins/WithStickyElementOptions";
    import * as JQuery from "jquery";
    export class WithStickyElement implements WithStickyElementOptions {
        stickySelector?: string;
        stickToTop?: boolean;
        stickToBottom?: boolean;
        stickyScrollWidth?: number;
        scrollContainer?: JQuery;
    }
}

declare module "sabre-ngv-app/app/common/mixins/WithStickyElementOptions" {
    /// <ngv scope="public" />
    import * as JQuery from "jquery";
    export interface WithStickyElementOptions {
        stickySelector?: string;
        stickToTop?: boolean;
        stickToBottom?: boolean;
        stickyScrollWidth?: number;
        scrollContainer?: JQuery;
    }
}

declare module "sabre-ngv-app/app/common/mixins/WithTooltips" {
    /**
     * Mixin used for automatic initialization of tooltips in drawer.
     *
     * This mixin keeps only one tooltip opened at one time in whole document.
     *
     */
    /// <ngv scope="public" />
    export class WithTooltips {
    }
}

declare module "sabre-ngv-app/app/common/mixins/WithValidation" {
    /**
     *
     * Mixin that provides validation functionality.
     **/
    /// <ngv scope="public" />
    export class WithValidation {
        /**
         * Performs validation.
         *
         * @returns {boolean}
         */
        validate(): boolean;
    }
}

declare module "sabre-ngv-app/app/common/models/OrderedModel" {
    /**
     * Class for handling ordered hashmaps.
     */
    /// <ngv scope="public" />
    import {AbstractModel} from "sabre-ngv-app/app/AbstractModel";
    import {JsonObject, KeyValueMap} from "sabre-ngv-app/_types";
    import {AbstractModelOptions} from "sabre-ngv-app/app/AbstractModelOptions";
    export class OrderedModel<T> extends AbstractModel {
        /**
         *
         * As data, you may pass another model or JS object.
         * If Backbone model is passed, it is converted to JSON.
         * Order from app.common.models.OrderedModel objects is preserved.
         *
         * @param {OrderedModel<T> | JsonObject} [data={}] Model data
         * @param {AbstractModelOptions} [options] Options
         */
        initialize(data?: OrderedModel<T> | JsonObject, options?: AbstractModelOptions): void;
        /**
         * Returns JS array created from model attributes with order
         * described by #order
         * @returns {Array}
         */
        toArray(): T[];
        /**
         * Works as #toJSON but returns atrributes described in #order only.
         * @returns {T}
         */
        toHashmap(): KeyValueMap<T>
        /**
         * Returns all keys stored in collection
         * @returns {Array} Item keys
         */
        getKeys(): string[];
        /**
         * Returns all values stored in collection
         * @returns {Array} Item values
         */
        getValues(): T[];
    }
}

declare module "sabre-ngv-app/app/common/query/mixins/RemoteQueryResourcesMap" {
    /// <ngv scope="public" />
    import {RemoteQueryResourceOptions} from "sabre-ngv-app/app/common/query/RemoteQueryResourceOptions";
    export interface RemoteQueryResourcesMap<TResource> {
        [resourceName: string]: RemoteQueryResourceOptions<TResource>;
    }
}

declare module "sabre-ngv-app/app/common/query/mixins/WithRemoteQuerySupport" {
    /// <ngv scope="public" />
    import {WithRemoteQuerySupportOptions} from "sabre-ngv-app/app/common/query/mixins/WithRemoteQuerySupportOptions";
    export class WithRemoteQuerySupport<TResource> implements WithRemoteQuerySupportOptions<TResource> {
    }
}

declare module "sabre-ngv-app/app/common/query/mixins/WithRemoteQuerySupportOptions" {
    /// <ngv scope="public" />
    import {RemoteQueryResourcesMap} from "sabre-ngv-app/app/common/query/mixins/RemoteQueryResourcesMap";
    export interface WithRemoteQuerySupportOptions<TResource> {
        queryResources?: RemoteQueryResourcesMap<TResource>;
    }
}

declare module "sabre-ngv-app/app/common/query/Query" {
    /// <ngv scope="public" />
    import {QueryOptions} from "sabre-ngv-app/app/common/query/QueryOptions";
    export class Query {
        constructor(options?: QueryOptions);
    }
}

declare module "sabre-ngv-app/app/common/query/QueryOptions" {
    /// <ngv scope="public" />
    export interface QueryOptions {
        start?: number;
        count?: number;
    }
}

declare module "sabre-ngv-app/app/common/query/RemoteQueryResourceOptions" {
    /// <ngv scope="public" />
    import {Command} from "sabre-ngv-app/app/common/data/dto/Command";
    import {JsonObject} from "sabre-ngv-app/_types";
    export interface RemoteQueryResourceOptions<TResource> {
        queryCommand: Command;
        resourcePath: string;
        itemConstructor(struct: JsonObject): TResource;
        itemHashFunc(struct: JsonObject): string;
    }
}

declare module "sabre-ngv-app/app/common/views/AbstractAction" {
    /// <ngv scope="public" />
    import {AbstractActionOptions} from "sabre-ngv-app/app/common/views/AbstractActionOptions";
    import {AbstractModel} from "sabre-ngv-app/app/AbstractModel";
    import {AbstractView} from "sabre-ngv-app/app/AbstractView";
    /**
     *
     * View representation of action.
     */
    export abstract class AbstractAction<TModel extends AbstractModel = AbstractModel> extends AbstractView<TModel> {
        /**
         * @param {struct.AbstractActionOptions} [options={}] Options object
         */
        constructor(options?: AbstractActionOptions);
        /**
         * Receiver of action.
         */
        actionReceiver: AbstractView;
    }
}

declare module "sabre-ngv-app/app/common/views/AbstractActionOptions" {
    /// <ngv scope="public" />
    import {ActionType} from "sabre-ngv-app/app/common/views/ActionType";
    import {AbstractViewOptions} from "sabre-ngv-app/app/AbstractViewOptions";
    export interface AbstractActionOptions extends AbstractViewOptions {
        caption?: string;
        actionName?: string;
        type?: ActionType;
    }
}

declare module "sabre-ngv-app/app/common/views/ActionType" {
    /// <ngv scope="public" />
    export type ActionType = 'default' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'danger' | 'link';
}

declare module "sabre-ngv-app/app/common/views/Button" {
    /// <ngv scope="public" />
    import {AbstractModel} from "sabre-ngv-app/app/AbstractModel";
    import {AbstractAction} from "sabre-ngv-app/app/common/views/AbstractAction";
    import {ButtonOptions} from "sabre-ngv-app/app/common/views/ButtonOptions";
    import {WarningMessageOptions} from "sabre-ngv-app/app/common/views/WarningMessageOptions";
    /**
     *
     * Button view class.
     */
    export class Button<TModel extends AbstractModel = AbstractModel> extends AbstractAction<TModel> {
        constructor(options?: ButtonOptions);
        caption: string;
        addWarningMessage(warningMessage: string, options?: WarningMessageOptions): void;
    }
}

declare module "sabre-ngv-app/app/common/views/ButtonOptions" {
    /// <ngv scope="public" />
    import {AbstractActionOptions} from "sabre-ngv-app/app/common/views/AbstractActionOptions";
    export interface ButtonOptions extends AbstractActionOptions {
    }
}

declare module "sabre-ngv-app/app/common/views/WarningMessageOptions" {
    /// <ngv scope="public" />
    export interface WarningMessageOptions {
        messageInTooltip?: boolean;
    }
}

declare module "sabre-ngv-app/app/DismissOptions" {
    /// <ngv scope="public" />
    import {AbstractMixin} from "sabre-ngv-app/app/AbstractMixin";
    export interface DismissOptions {
        dismissContext?: string;
        dismissObjects?: boolean;
        dismissArrays?: boolean;
        parent?: AbstractMixin;
        useSubstitute?: boolean;
    }
}

declare module "sabre-ngv-app/app/events/EventBus" {
    /// <ngv scope="public" />
    import {AbstractModel} from "sabre-ngv-app/app/AbstractModel";
    /**
     * Generic event bus implementation, currently a simple proxy for jQuery.
     * @link https://api.jquery.com/category/events/
     */
    export class EventBus extends AbstractModel {
    }
}

declare module "sabre-ngv-app/app/getService" {
    /// <ngv scope="public" />
    import {NgvServiceType} from "sabre-ngv-app/_types";
    import {AbstractService} from "sabre-ngv-app/app/services/impl/AbstractService";
    export function getService<T extends AbstractService = AbstractService>(serviceClass: NgvServiceType<T>): T;
}

declare module "sabre-ngv-app/app/LifetimeBindingOptions" {
    /// <ngv scope="public" />
    export interface LifetimeBindingOptions {
        timeout?: boolean;
        withReferencedObject?: boolean;
        useful?: boolean;
        kill?: boolean;
        ctx?: string;
    }
}

declare module "sabre-ngv-app/app/Mountable" {
    /// <ngv scope="public" />
    import {AbstractView} from "sabre-ngv-app/app/AbstractView";
    import {ComponentType} from "react";
    /**
     * Mountable interface for views that can be used by both jQuery code and React components.
     *
     * @interface
     * @prop P - Component properties type.
     */
    export interface Mountable<P> {
        /**
         * Returns the element as a class instance inheriting from AbstractView.
         * @returns {AbstractView}
         */
        getAsWidget(): AbstractView;
        /**
         * Returns the element as a react component (or a stateless component) constructor.
         * @returns {React.ComponentType<P>}
         */
        getAsComponent(): ComponentType<P>;
    }
}

declare module "sabre-ngv-app/app/registerService" {
    /// <ngv scope="public" />
    import {NgvServiceClass} from "sabre-ngv-app/_types";
    import {AbstractServiceOptions} from "sabre-ngv-app/app/services/impl/AbstractServiceOptions";
    export function registerService(serviceClass: NgvServiceClass, options?: AbstractServiceOptions): void;
}

declare module "sabre-ngv-app/app/services/impl/AbstractService" {
    /// <ngv scope="public" />
    import {AbstractObject} from "sabre-ngv-app/app/AbstractObject";
    import {AbstractServiceOptions} from "sabre-ngv-app/app/services/impl/AbstractServiceOptions";
    import {IAbstractService} from "sabre-ngv-app/app/services/impl/IAbstractService";
    export abstract class AbstractService extends AbstractObject implements AbstractServiceOptions, IAbstractService {
        constructor(options?: AbstractServiceOptions);
        static SERVICE_NAME: string;
    }
}

declare module "sabre-ngv-app/app/services/impl/AbstractServiceOptions" {
    /// <ngv scope="public" />
    export interface AbstractServiceOptions {
    }
}

declare module "sabre-ngv-app/app/services/impl/AbstractSrwApi" {
    /// <ngv scope="public" />
    import {AbstractService} from "sabre-ngv-app/app/services/impl/AbstractService";
    export abstract class AbstractSrwApi extends AbstractService {
        static SERVICE_NAME: 'srwApi';
    }
}

declare module "sabre-ngv-app/app/services/impl/AirShopService" {
    /// <ngv scope="public" />
    import {AbstractService} from "sabre-ngv-app/app/services/impl/AbstractService";
    import {FlightConnection} from "sabre-ngv-app/app/common/data/flight/FlightConnection";
    export class AirShopService extends AbstractService {
        static SERVICE_NAME: 'airShop';
        book(flight: FlightConnection): void;
        addToWaitList(flight: FlightConnection): void;
        getCabinTypeByCode(cabinClassCode: string): string;
    }
}

declare module "sabre-ngv-app/app/services/impl/AuthTokenType" {
    /// <ngv scope="public" />
    export type AuthTokenType = 'SESSION' | 'SESSIONLESS';
}

declare module "sabre-ngv-app/app/services/impl/DatesService" {
    /// <ngv scope="public" />
    import {IDatesService} from 'sabre-ngv-app/app/services/impl/IDatesService';
    import {AbstractService} from 'sabre-ngv-app/app/services/impl/AbstractService';
    import {MomentSource} from 'sabre-ngv-app/_types';
    import * as moment from 'moment';
    export class DatesService extends AbstractService implements IDatesService {
        static SERVICE_NAME: 'dates';
        /**
         * Get current time at the moment of calling as a new Moment object
         */
        getNow(): moment.Moment;
        isTwelveTimeFormat(): boolean;
        /**
         * Attention: this method performs strict parsing - no trash in input string (provided that it's string) is allowed.
         *
         * This method returns an immutable object. Each manipulative method returns new immutable instance of Moment object,
         * keeping target object intact.
         */
        toMoment(date: MomentSource, dateFormat?: string): moment.Moment;
        toIsoString(date: MomentSource): string;
        getDayDifference(dateA: MomentSource, dateB: MomentSource, addYear?: boolean): number;
        getMinuteDifference(dateA: MomentSource, dateB: MomentSource): number;
        toIsoDate(date: MomentSource): string;
        toIsoTime(date: MomentSource): string;
        toIsoDateTime(date: MomentSource): string;
        toSabrishDate(date: MomentSource): string;
        toSabrishIsoTime(date: MomentSource): string;
        toTime(date: MomentSource): string;
        toLongWeekday(date: MomentSource): string;
        toWeekday(date: MomentSource): string;
        toHMinFormatFromMinutes(mins: number, forceHours: boolean, shortFormat?: boolean): string;
        fullFormatTime(time: MomentSource): string;
        formatTime(time: MomentSource): string;
        toDurationHHMM(minutes: number | moment.Duration): string;
        changeTimeFormat(to12HFormat: boolean): void;
    }
}

declare module "sabre-ngv-app/app/services/impl/DtoService" {
    /// <ngv scope="public" />
    import {AbstractService} from "sabre-ngv-app/app/services/impl/AbstractService";
    import {IDtoService} from "sabre-ngv-app/app/services/impl/IDtoService";
    import {AbstractModel} from "sabre-ngv-app/app/AbstractModel";
    import {IDtoModelMatcher} from "sabre-ngv-app/app/services/impl/IDtoModelMatcher";
    import {AbstractView} from "sabre-ngv-app/app/AbstractView";
    import {
        ModelDescriptor,
        NgvModelClass, NgvResponseComponent,
        SearchPath,
        ViewDescriptor
    } from "sabre-ngv-app/_types";
    export class DtoService extends AbstractService implements IDtoService {
        static SERVICE_NAME: 'dto';
        registerDataModel<TModel extends AbstractModel>(matcher: SearchPath | IDtoModelMatcher, modelDescriptor: ModelDescriptor<TModel>): void
        registerDataView<TView extends AbstractView>(model: NgvModelClass, widget: ViewDescriptor<TView>): void
        registerDataComponent(model: NgvModelClass, componentClass: NgvResponseComponent): void
        getDataModel<TModel extends AbstractModel = AbstractModel, TInput = any>(rawData: TInput): TModel
    }
}

declare module "sabre-ngv-app/app/services/impl/ExternalServiceConnector" {
    /// <ngv scope="public" />
    import {AbstractService} from "sabre-ngv-app/app/services/impl/AbstractService";
    import {NgvPromise} from "sabre-ngv-app/_types";
    export class ExternalServiceConnector extends AbstractService {
        static SERVICE_NAME: 'externalServiceConnector';
        callService(url: string, method: string, body: string, headers: Object): NgvPromise<Object>;
    }
}

declare module "sabre-ngv-app/app/services/impl/GeoService" {
    /// <ngv scope="public" />
    import { AbstractService } from "sabre-ngv-app/app/services/impl/AbstractService";
    export interface IGeoOption {
        label: string;
        value: string;
    }
    /**
     * Service returning data from GeoAutoComplete - used mainly in Hotel Search
     */
    export class GeoService extends AbstractService {
        static SERVICE_NAME: 'geo';
        /**
         * Call GeoService to complete query
         * @param query Query string
         * @param categories List of categories
         * @param callback Function called whenever response received
         */
        autocomplete(query: string, categories: string[], callback: (results: IGeoOption[]) => void): void;
        /**
         * Function to validate coordinates
         * @param value String to validate
         * @return boolean
         */
        isValidGeoCoordinate(value: string): boolean;
    }
}

declare module "sabre-ngv-app/app/services/impl/HttpMethod" {
    /// <ngv scope="public" />
    export type HttpMethod = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'HEAD' | 'CONNECT' | 'OPTIONS' | 'TRACE' | 'PATCH';
}

declare module "sabre-ngv-app/app/services/impl/IAbstractService" {
    /// <ngv scope="public" />
    export interface IAbstractService {
    }
}

declare module "sabre-ngv-app/app/services/impl/IDatesService" {
    /// <ngv scope="public" />
    import {MomentSource} from "sabre-ngv-app/_types";
    export interface IDatesService {
        toIsoDate(date: MomentSource): string;
        toIsoTime(date: MomentSource): string;
        toIsoDateTime(date: MomentSource): string;
        toSabrishDate(date: MomentSource): string;
        toTime(date: MomentSource): string;
        toLongWeekday(date: MomentSource): string;
    }
}

declare module "sabre-ngv-app/app/services/impl/IDtoModelMatcher" {
    /// <ngv scope="public" />
    import {JsonObject} from "sabre-ngv-app/_types";
    export interface IDtoModelMatcher {
        (rawData: JsonObject): boolean
    }
}

declare module "sabre-ngv-app/app/services/impl/IDtoService" {
    /// <ngv scope="public" />
    import {AbstractModel} from "sabre-ngv-app/app/AbstractModel";
    import {AbstractView} from "sabre-ngv-app/app/AbstractView";
    import {IDtoModelMatcher} from "sabre-ngv-app/app/services/impl/IDtoModelMatcher";
    import {ModelDescriptor, NgvModelClass, SearchPath, ViewDescriptor} from "sabre-ngv-app/_types";
    export interface IDtoService {
        registerDataModel<TModel extends AbstractModel>(matcher: SearchPath | IDtoModelMatcher, modelDescriptor: ModelDescriptor<TModel>): void;
        registerDataView<TView extends AbstractView>(model: NgvModelClass, widget: ViewDescriptor<TView>): void;
        getDataModel<TModel extends AbstractModel>(rawData: any): TModel
    }
}

declare module "sabre-ngv-app/app/services/impl/IModeService" {
    /// <ngv scope="public" />
    import {NgvMode} from "sabre-ngv-app/_types";
    import {AbstractService} from "sabre-ngv-app/app/services/impl/AbstractService";
    export abstract class IModeService extends AbstractService {
        static SERVICE_NAME: 'mode';
        // please extend NgvMode when exposing new modes via methods
        abstract isMode(mode: NgvMode): boolean;
        abstract isMemoAreaMode(): boolean;
        abstract toggleMemoAreaMode(on?: boolean): void;
        abstract isPfKeyEditMode(): boolean;
        abstract togglePfKeyEditMode(on?: boolean): void;
        abstract isPfKeyMode(): boolean;
        abstract togglePfKeyMode(on?: boolean): void;
        abstract isMaskMode(): boolean;
        abstract toggleMaskMode(on?: boolean): void;
        abstract isExpertOutputMode(): boolean;
        abstract toggleExpertOutputMode(on?: boolean): void;
        abstract forceExpertOutputMode(on?: boolean): void;
        abstract isNoviceOutputMode(): boolean;
        abstract toggleNoviceOutputMode(on?: boolean): void;
        abstract forceNoviceOutputMode(on?: boolean): void;
        abstract isExpertInputMode(): boolean;
        abstract toggleExpertInputMode(on?: boolean): void;
        abstract forceExpertInputMode(on?: boolean): void;
        abstract isNoviceInputMode(): boolean;
        abstract toggleNoviceInputMode(on?: boolean): void;
        abstract forceNoviceInputMode(on?: boolean): void;
        abstract isLayerMode(): boolean;
        abstract isStandardMode(): boolean;
        abstract isTravelInsuranceEnabledMode(): boolean;
        abstract isItineraryPreviewEnabledMode(): boolean;
        abstract isMultipleResponseDisplayMode(): boolean;
        abstract toggleMultipleResponseDisplayMode(on?: boolean): void;
        abstract isSabreKeysMode(): boolean;
        abstract toggleSabreKeysMode(on?: boolean): void;
    }
}

declare module "sabre-ngv-app/app/services/impl/IScribeService" {
    /// <ngv scope="public" />
    import {CommandFlow} from "sabre-ngv-app/app/common/data/dto/CommandFlow";
    export interface IScribeService {
        afterScript(flow: CommandFlow): void;
    }
}

declare module "sabre-ngv-app/app/services/impl/LayoutElement" {
    /// <ngv scope="public" />
    export type LayoutElement = 'action-bar' | 'areaTabs' | 'input' | 'pfkeys' | 'pfkey-edit' | 'toolbar' | 'sidepanel' | 'memoarea' | 'output' | 'all';
}

declare module "sabre-ngv-app/app/services/impl/ModeService" {
    /// <ngv scope="public" />
    import {AbstractService} from "sabre-ngv-app/app/services/impl/AbstractService";
    import {IModeService} from "sabre-ngv-app/app/services/impl/IModeService";
    import {NgvMode} from "sabre-ngv-app/_types";
    export class ModeService extends AbstractService implements IModeService {
        static SERVICE_NAME: 'mode';
        isMode(mode: NgvMode): boolean;
        isMemoAreaMode(): boolean;
        toggleMemoAreaMode(on?: boolean): void;
        isPfKeyEditMode(): boolean;
        togglePfKeyEditMode(on?: boolean): void;
        isPfKeyMode(): boolean;
        togglePfKeyMode(on?: boolean): void;
        isMaskMode(): boolean;
        toggleMaskMode(on?: boolean): void;
        isExpertOutputMode(): boolean;
        toggleExpertOutputMode(on?: boolean): void;
        forceExpertOutputMode(on?: boolean): void;
        isNoviceOutputMode(): boolean;
        toggleNoviceOutputMode(on?: boolean): void;
        forceNoviceOutputMode(on?: boolean): void;
        isExpertInputMode(): boolean;
        toggleExpertInputMode(on?: boolean): void;
        forceExpertInputMode(on?: boolean): void;
        isNoviceInputMode(): boolean;
        toggleNoviceInputMode(on?: boolean): void;
        forceNoviceInputMode(on?: boolean): void;
        isLayerMode(): boolean;
        isStandardMode(): boolean;
        isTravelInsuranceEnabledMode(): boolean;
        isItineraryPreviewEnabledMode(): boolean;
        isMultipleResponseDisplayMode(): boolean;
        toggleMultipleResponseDisplayMode(on: boolean): void;
        isSabreKeysMode(): boolean;
        toggleSabreKeysMode(on: boolean): void;
    }
}

declare module "sabre-ngv-app/app/services/impl/PnrPublicService" {
    /// <ngv scope="public" />
    import {AbstractService} from 'sabre-ngv-app/app/services/impl/AbstractService';
    export class PnrPublicService extends AbstractService {
        /**
         * Gets record locator from PNR if PNR is available, undefined otherwise
         * @return {String}
         */
        getRecordLocator(): string;
    }
}

declare module "sabre-ngv-app/app/services/impl/SrwAsyncApi" {
    /// <ngv scope="public" />
    import {AbstractSrwApi} from "sabre-ngv-app/app/services/impl/AbstractSrwApi";
    import {HttpMethod} from "sabre-ngv-app/app/services/impl/HttpMethod";
    import {AuthTokenType} from "sabre-ngv-app/app/services/impl/AuthTokenType";
    export class SrwAsyncApi extends AbstractSrwApi {
        sws(xml: string, action: string, callback: Object): void;
        swsWithLock(xml: string, action: string, lockId: number, callback: Object): void;
        lock(callback: Object): void;
        lockWithTimeout(timeout: number, callback: Object): void;
        tryLock(duration: number, lockWaitingTimeout: number, callback: Object): void;
        unlock(lockId: number, callback: Object): void;
        showInEmu(text: string, isCommand: boolean, functionObject: Object): void;
        executeInEmu(command: string, showCommand: boolean, showResponse: boolean, functionObject: Object): void;
        rest2Sg(url: string, httpMethod: HttpMethod, authTokenType: AuthTokenType, payload: string,
                contentType: string, functionObject: Object): string;
        rest2SgWithLock(url: string, httpMethod: HttpMethod, authTokenType: AuthTokenType, payload: string,
                        contentType: string, lockId: number, functionObject: Object): string;
    }
}

declare module "sabre-ngv-app/app/services/impl/SrwSyncApi" {
    /// <ngv scope="public" />
    import {AbstractSrwApi} from "sabre-ngv-app/app/services/impl/AbstractSrwApi";
    import {HttpMethod} from "sabre-ngv-app/app/services/impl/HttpMethod";
    import {AuthTokenType} from "sabre-ngv-app/app/services/impl/AuthTokenType";
    export class SrwSyncApi extends AbstractSrwApi {
        sws(xml: string, action: string): string;
        swsWithLock(xml: string, action: string, lockId: number): string;
        lock(): string;
        lockWithTimeout(timeout: number): string;
        tryLock(duration: number, lockWaitingTimeout: number): string;
        unlock(lockId: number): string;
        showInEmu(text: string, isCommand: boolean): string;
        executeInEmu(command: string, showCommand: boolean, showResponse: boolean): string;
        rest2Sg(url: string, httpMethod: HttpMethod, authTokenType: AuthTokenType, payload: string,
                contentType: string): string;
        rest2SgWithLock(url: string, httpMethod: HttpMethod, authTokenType: AuthTokenType, payload: string,
                        contentType: string, lockId: number): string;
    }
}

declare module "sabre-ngv-app/app/Silencable" {
    /// <ngv scope="public" />
    export interface Silencable {
        silent?: boolean;
    }
}

declare module "sabre-ngv-app/app/widgets/console/AbstractNoviceButton" {
    /// <ngv scope="public" />
    import {AbstractView} from "sabre-ngv-app/app/AbstractView";
    /**
     */
    export class AbstractNoviceButton extends AbstractView {
    }
}

declare module "sabre-ngv-app/app/widgets/console/AreaInView" {
    /// <ngv scope="public" />
    import {AbstractView} from "sabre-ngv-app/app/AbstractView";
    import {AbstractModel} from "sabre-ngv-app/app/AbstractModel";
    export class AreaInView extends AbstractView {
    }
}

declare module "sabre-ngv-app/app/widgets/container/ContainerModel" {
    /// <ngv scope="public" />
    import {OrderedModel} from "sabre-ngv-app/app/common/models/OrderedModel";
    /**
     * Model for items in container widgets.
     */
    export class ContainerModel<TItem> extends OrderedModel<TItem> {
    }
}

declare module "sabre-ngv-app/app/widgets/container/ContainerView" {
    /// <ngv scope="public" />
    import {AbstractView} from "sabre-ngv-app/app/AbstractView";
    import {ContainerViewOptions} from "sabre-ngv-app/app/widgets/container/ContainerViewOptions";
    import {ContainerModel} from "sabre-ngv-app/app/widgets/container/ContainerModel";
    import {SearchPath, ViewDescriptor} from "sabre-ngv-app/_types";
    /**
     * Container widget. Allows to aggregate other widgets.
     */
    export class ContainerView<TItem extends AbstractView = AbstractView> extends AbstractView implements ContainerViewOptions {
        itemsProperty: SearchPath;
        itemDescriptor: ViewDescriptor<TItem>;
        /**
         * Returns items contained in container.
         * @returns {app.common.models.OrderedModel} Items stored in ordered model
         */
        getItems(): ContainerModel<TItem>;
    }
}

declare module "sabre-ngv-app/app/widgets/container/ContainerViewOptions" {
    /// <ngv scope="public" />
    import {OldContainersInterface} from "sabre-ngv-app/app/widgets/container/OldContainerInterface";
    export interface ContainerViewOptions extends OldContainersInterface {
    }
}

declare module "sabre-ngv-app/app/widgets/container/ListView" {
    /// <ngv scope="public" />
    import {AbstractModel} from "sabre-ngv-app/app/AbstractModel";
    import {AbstractView} from "sabre-ngv-app/app/AbstractView";
    import {ListViewOptions} from "sabre-ngv-app/app/widgets/container/ListViewOptions";
    import {WithRetryButton} from "sabre-ngv-app/app/common/mixins/WithRetryButton";
    import {SearchPath, ViewDescriptor} from "sabre-ngv-app/_types";
    /*
     */
    export class ListView<TModel extends AbstractModel, TItem extends AbstractView> extends AbstractView<TModel> implements ListViewOptions, WithRetryButton {
        itemsProperty: SearchPath;
        itemDescriptor: ViewDescriptor<TItem>;
        usesQueryResource?: boolean;
    }
}

declare module "sabre-ngv-app/app/widgets/container/ListViewOptions" {
    /// <ngv scope="public" />
    export interface ListViewOptions {
    }
}

declare module "sabre-ngv-app/app/widgets/container/OldContainerInterface" {
    /// <ngv scope="public" />
    import {SearchPath, ViewDescriptor} from "sabre-ngv-app/_types";
    export interface OldContainersInterface {
        enhancedDataPath?: SearchPath;
        itemsProperty: SearchPath;
        itemDescriptor: ViewDescriptor;
    }
}

declare module "sabre-ngv-app/app/widgets/container/StackContainerView" {
    /// <ngv scope="public" />
    import {ContainerView} from "sabre-ngv-app/app/widgets/container/ContainerView";
    /**
     *
     * Container view that displays items on stack so only one item is visible.
     */
    export class StackContainerView extends ContainerView {
    }
}

declare module "sabre-ngv-app/cf" {
    /// <ngv scope="public" />
    import {Command} from "sabre-ngv-app/app/common/data/dto/Command";
    import {CommandFlow} from "sabre-ngv-app/app/common/data/dto/CommandFlow";
    export function cf(cmd: Command): CommandFlow;
}

declare module "sabre-ngv-app/cssProperty" {
    /// <ngv scope="public" />
    export function cssProperty(propertyName: string): string | null;
}

declare module "sabre-ngv-app/from" {
    /// <ngv scope="public" />
    import * as _ from "underscore";
    export function from<T>(obj: T): _._Chain<T>
}

declare module "sabre-ngv-app/key" {
    /// <ngv scope="public" />
    import {JsonObject} from "sabre-ngv-app/_types";
    export namespace key {
        const CHANGE: string;
        const END_ITEM: string;
        const NEW_LINE: string;
        const CROSS: string;
        const CROSS_REAL: string;
        const CROSS_HOST: string;
        const END_OF_SELECTION: string;
        const NOT_SIGN: string;
        const POUND: string;
        const CHEVRON: string;
        const BACKSPACE: number;
        const TAB: number;
        const ENTER: number;
        const COMMA: number;
        const ESC: number;
        const SPACE: number;
        const ARROW_LEFT: number;
        const ARROW_UP: number;
        const ARROW_RIGHT: number;
        const ARROW_DOWN: number;
        const ZERO: number;
        const NUMPAD_0: number;
        const NUMPAD_9: number;
        namespace asciiTable {
            type JsonizedAsciiTable = JsonObject;
            type Options = {
                prefix?: string;
            };
            enum Direction {
                LEFT = 0,
                CENTER = 1,
                RIGHT = 2
            }
            type Row = any[];
            type SortingFunction = (a: any, b: any) => number;
            class AsciiTable {
                new(name?: string | JsonizedAsciiTable, options?: Object): this;
                static readonly LEFT: Direction.LEFT;
                static readonly CENTER: Direction.CENTER;
                static readonly RIGHT: Direction.RIGHT;
                reset(name?: string | JsonizedAsciiTable): string;
                clear(name?: string | JsonizedAsciiTable): string;
                setBorder(edge?: string, fill?: string, top?: string, bottom?: string): this;
                removeBorder(): this;
                setAlign(idx: number, dir: Direction): this;
                setTitle(name: string): this;
                getTitle(): string;
                setTitleAlign(dir: Direction): this;
                sort(method: SortingFunction): this;
                sortColumn(idx: number, method: SortingFunction): this;
                setHeading(...values: Row): this;
                getHeading(): Row;
                setHeadingAlign(dir: Direction): this;
                addRow(...values: Row): this;
                getRows(): Row[];
                addRowMatrix(rows: Row[]): this;
                addData(data: any[], rowCallback: (element: any) => (Row | Row[]), asMatrix: boolean): this;
                clearRows(): this;
                setJustify(val: boolean): this;
                toJSON(): JsonizedAsciiTable;
                parse(obj: JsonizedAsciiTable): this;
                fromJSON(obj: JsonizedAsciiTable): this;
                render(): string;
                valueOf(): string;
                toString(): string;
                static factory(name?: string | JsonizedAsciiTable, options?: Options): AsciiTable;
                static align(dir: Direction, str?: string, len?: number, pad?: number): string;
                static alignLeft(str?: string, len?: number, pad?: number): string;
                static alignCenter(str?: string, len?: number, pad?: number): string;
                static alignRight(str?: string, len?: number, pad?: number): string;
                static alignAuto(str?: string, len?: number, pad?: number): string;
                static arrayFill(len: number, fill: any): any[];
            }
        }
    }
}

declare module "sabre-ngv-app/app/widgets/formFactory/views/common/ActionButtons" {
    /// <ngv scope="public" />
    import {AbstractView} from "sabre-ngv-app/app/AbstractView";
    export class ActionButtons extends AbstractView {
    }
}
